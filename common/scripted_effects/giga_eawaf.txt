#################################
### Generate Primitives #########
#################################
#Generate Faust primitives, more complex than the usual.
generate_eawaf_primitives_on_planet = {
	create_eawaf_species = yes
	create_eawaf_primitive_empire = yes
	setup_eawaf_primitive_planet = yes
}

create_eawaf_species = {
	create_species = {
		name = "Griffon"
		plural = "Griffons"
		class = AVI
		portrait = avi10
		homeworld = THIS
		traits = {
			trait = trait_pc_continental_preference
			trait = trait_thrifty
			trait = trait_strong
			trait = trait_intelligent
			trait = trait_unruly
		}
		effect = {
			save_global_event_target_as = eawaf_griffons
		}
	}
	create_species = {
		name = "Changeling"
		plural = "Changelings"
		class = MAM
		portrait = mam10
		homeworld = THIS
		traits = {
			trait = trait_pc_tundra_preference
			trait = trait_rapid_breeders
			trait = trait_adaptive
			trait = trait_ingenious
			trait = trait_wasteful
			trait = trait_repugnant
		}
		effect = {
			save_global_event_target_as = eawaf_changelings
		}
	}
	create_species = {
		name = "Yeti"
		plural = "Yetis"
		class = REP
		portrait = rep10
		homeworld = THIS
		traits = {
			trait = trait_pc_alpine_preference
			trait = trait_strong
			trait = trait_intelligent
			trait = trait_unruly
			trait = trait_quarrelsome
		}
		effect = {
			save_global_event_target_as = eawaf_yetis
		}
	}
	create_species = {
		name = "Equinean"
		plural = "Equineans"
		class = MAM
		portrait = mam10
		homeworld = THIS
		traits = {
			trait = trait_pc_continental_preference
			trait = trait_latent_psionic
			trait = trait_charismatic
			trait = trait_docile
			trait = trait_sedentary
		}
		effect = {
			save_global_event_target_as = eawaf_ponies
		}
	}
}

create_eawaf_primitive_empire = {
	create_country = {
		name = "Faust Civilizations"
		authority = random
		civics = {
			civic = civic_increasing_urbanization
			civic = civic_atmospheric_pollution
		}
		ethos = {
			ethic = ethic_fanatic_spiritualist
			ethic = ethic_egalitarian
		}
		species = event_target:eawaf_ponies
		ethos = random
		type = primitive
	}
	last_created_country = {
		set_graphical_culture = industrial_01
		save_global_event_target_as = giga_eawaf_country
		set_country_flag = machine_age 
		# set_country_flag = recently_advanced #No advancing, they advance manually
		set_country_flag = tech_frozen
		#set_country_flag = custom_preftl_diplomacy
		#set_country_flag = custom_preftl_espionage
		set_pre_ftl_age = machine_age
		set_country_flag = giga_eawaf_country
		change_country_flag = {
			icon={
				category="flusionian"
				file="eawaf_faust_flag.dds"
			}
			background={
				category="backgrounds"
				file="circle.dds"
			}
			colors={
				"sky_blue"
				"light_blue"
				"null"
				"null"
			}
		}

		#THE ATOMIC AGE
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = sirens_spawn_date value = 2200 } } }
			country_event = { id = giga_eawaf.7000 days = 30 }
		}
		else = {
			country_event = { id = giga_eawaf.7000 days = 7200 random = 60 } #Atomic Age
		}
	}
}

setup_eawaf_primitive_planet = {
	add_modifier = {
		modifier = giga_eaw_faust_planet_modifier
		days = -1
	}
	set_owner = event_target:giga_eawaf_country
	set_capital = yes
	add_deposit = d_everfree_forest
	add_deposit = d_crystal_forest
	#add_deposit = d_crystal_forest
	add_deposit = d_crystalline_caverns
	add_deposit = d_crystalline_caverns
	#add_deposit = d_crystalline_caverns
	add_building = building_primitive_farm
	add_building = building_primitive_factory
	add_building = building_primitive_mine
	add_building = building_primitive_power_plant
	add_building = building_primitive_capital
	add_building = building_urban_dwellings
	add_building = building_primitive_farm
	add_building = building_urban_dwellings
	remove_building = building_colony_shelter
	while = {
		count = 15
		create_pop = {
			species = event_target:eawaf_ponies
		}
	}
	while = {
		count = 10
		create_pop = {
			species = event_target:eawaf_griffons
		}
	}
	while = {
		count = 5
		create_pop = {
			species = event_target:eawaf_changelings
		}
	}
	while = {
		count = 5
		create_pop = {
			species = event_target:eawaf_yetis
		}
	}
	giga_eawaf_reset_faust_armies = yes
}

giga_eawaf_reset_faust_armies = {
	remove_all_armies = yes
	while = { count = 1	create_army = { name = NAME_reicsharmee		owner = last_created_country species = event_target:eawaf_griffons  type = "eawaf_army"  } }
	while = { count = 1	create_army = { name = NAME_aquileian		owner = last_created_country species = event_target:eawaf_griffons  type = "eawaf_army"  } }
	while = { count = 1	create_army = { name = NAME_wingbardian		owner = last_created_country species = event_target:eawaf_griffons  type = "eawaf_army"  } }
	while = { count = 1	create_army = { name = NAME_river			owner = last_created_country species = event_target:eawaf_ponies type = "eawaf_army"  } }
	while = { count = 1	create_army = { name = NAME_changeling		owner = last_created_country species = event_target:eawaf_changelings type = "eawaf_army"  } }
	while = { count = 1	create_army = { name = NAME_equestrian		owner = last_created_country species = event_target:eawaf_ponies type = "eawaf_army"  } }
	while = { count = 1	create_army = { name = NAME_kirin			owner = last_created_country species = event_target:eawaf_ponies type = "eawaf_army"  } }
	while = { count = 1	create_army = { name = NAME_storm			owner = last_created_country species = event_target:eawaf_yetis type = "eawaf_army"  } }
}

giga_eawaf_clear_strife_field_ship_modifiers = {
	remove_modifier = giga_eawaf_strife_field_ship_modifier
	remove_modifier = giga_eawaf_disenchanter_1_upkeep_modifier
	remove_modifier = giga_eawaf_disenchanter_2_upkeep_modifier
	remove_modifier = giga_eawaf_disenchanter_3_upkeep_modifier
	remove_modifier = giga_eawaf_disenchanter_4_upkeep_modifier
	remove_modifier = giga_eawaf_disenchanter_1_speed_modifier
	remove_modifier = giga_eawaf_disenchanter_2_speed_modifier
	remove_modifier = giga_eawaf_disenchanter_3_speed_modifier
}

#Refresh planet modifiers whenever potency changes
giga_eawaf_update_planet_system_modifiers = {
	every_system = {
		limit = { giga_eawaf_is_field_system = yes }
		every_ship_in_system = {
			limit = { has_modifier = giga_eawaf_strife_field_ship_modifier }
			remove_modifier = giga_eawaf_strife_field_ship_modifier
			add_modifier = {
				modifier = giga_eawaf_strife_field_ship_modifier
				days = -1
				mult = event_target:giga_eawaf_country.giga_eawaf_field_potency_multiplier
			}
		}
		every_system_planet = {
			limit = { has_modifier = giga_eawaf_outer_strife_field_modifier }
			giga_eawaf_clear_outer_strife_field_modifier = yes
			giga_eawaf_apply_outer_strife_field_modifier = yes
		}
	}
}

giga_eawaf_apply_strife_field_effects = {
	every_system = { #We fetch the distance of every system from Faust. This has to be done regularly in case new systems are added.
		set_variable = { which = giga_eawaf_distance_from_faust value = 0 }
		export_trigger_value_to_variable = {
			trigger = distance
			parameters = {
				source = event_target:giga_eawaf_faust_system
				type = euclidean
			}
			variable = giga_eawaf_distance_from_faust
		}
		round_variable = giga_eawaf_distance_from_faust
		if = { #If they are closer to Faust than the Outer Field range variable, BUT further than the Inner Field, apply Outer Field effects.
			limit = {
				check_variable = { which = giga_eawaf_distance_from_faust value < event_target:giga_eawaf_country.giga_eawaf_outer_strife_field_range }
				check_variable = { which = giga_eawaf_distance_from_faust value > event_target:giga_eawaf_country.giga_eawaf_inner_strife_field_range }
				NOT = { has_star_flag = giga_eawaf_outer_field_system }
				NOT = { any_system_megastructure = { is_megastructure_type = anti_sirens_shield } }
			}
			set_star_flag = giga_eawaf_outer_field_system
			if = {
				limit = { has_star_flag = giga_eawaf_inner_field_system }
				remove_star_flag = giga_eawaf_inner_field_system
				every_system_ambient_object = {
					limit = { OR = { is_ambient_object_type = giga_eawaf_strife_field_outer_object is_ambient_object_type = giga_eawaf_strife_field_inner_object } }
					destroy_ambient_object = this
				}
			}
			random_system_planet = {
				limit = { is_star = yes }
				create_ambient_object = { #Outer strife field object
					type = "giga_eawaf_strife_field_outer_object"
					location = THIS
				}
			}
			#Apply system modifier
			# if = {
			# 	limit = { NOT = { has_modifier = giga_eawaf_outer_strife_field_system_modifier } }
			# 	add_modifier = {
			# 		modifier = giga_eawaf_outer_strife_field_system_modifier
			# 		days = -1
			# 		mult = event_target:giga_eawaf_country.giga_eawaf_field_potency_multiplier
			# 	}
			# }
			#Apply planet modifier
			every_system_planet = {
				limit = { is_colony = yes }
				giga_eawaf_apply_outer_strife_field_modifier = yes
			}
		}
		else_if = { #If they are closer to Faust than the Inner Field range variable, apply Inner Field effects.
			limit = {
				OR = {
					check_variable = { which = giga_eawaf_distance_from_faust value = event_target:giga_eawaf_country.giga_eawaf_inner_strife_field_range }
					check_variable = { which = giga_eawaf_distance_from_faust value < event_target:giga_eawaf_country.giga_eawaf_inner_strife_field_range }
				}
				NOT = { has_star_flag = giga_eawaf_inner_field_system }
				NOT = { any_system_megastructure = { is_megastructure_type = anti_sirens_shield } }
			}
			set_star_flag = giga_eawaf_inner_field_system
			if = { #Remove strife field graphics
				limit = { has_star_flag = giga_eawaf_outer_field_system }
				remove_star_flag = giga_eawaf_outer_field_system
				every_system_ambient_object = {
					limit = { OR = { is_ambient_object_type = giga_eawaf_strife_field_inner_object is_ambient_object_type = giga_eawaf_strife_field_outer_object } }
					destroy_ambient_object = this
				}
			}
			random_system_planet = {
				limit = { is_star = yes }
				create_ambient_object = { #Inner strife field object
					type = "giga_eawaf_strife_field_inner_object"
					location = THIS
				}
			}
			every_system_planet = {
				limit = { is_colony = yes }
				giga_eawaf_clear_outer_strife_field_modifier = yes
			}
			#Take control of everything that is not shielded. If system is unowned, build starbase.
			every_fleet_in_system = {
				limit = {
					NOT = { controller = { is_same_value = event_target:giga_eawaf_country } }
					owner = { giga_eawaf_is_immune_to_sirens = no }
				}
				owner = { set_country_flag = giga_eawaf_former_owner@PREV } #Remember the former owner
				set_owner = event_target:giga_eawaf_country 
				set_fleet_flag = giga_eawaf_enthralled_by_sirens
			}
			every_ship_in_system = {
				limit = {
					NOT = { controller = { is_same_value = event_target:giga_eawaf_country } }
					NOR = {
						has_component = GIGA_EAWAF_DISENCHANTER_3
						has_component = GIGA_EAWAF_DISENCHANTER_4
					}
					owner = { giga_eawaf_is_immune_to_sirens = no }
				}
				owner = { set_country_flag = giga_eawaf_former_owner@PREV } #Remember the former owner
				fleet = { set_owner = event_target:giga_eawaf_country } 
				set_ship_flag = giga_eawaf_enthralled_by_sirens
			}
			every_system_planet = {
				if = {
					limit = {
						is_colony = yes
						NOT = { owner = { is_same_value = event_target:giga_eawaf_country } }
						NOT = { has_building = building_giga_eawaf_disenchanter_building_2 }
						owner = { giga_eawaf_is_immune_to_sirens = no }
					}
					if = {
						limit = { exists = owner }
						owner = { set_country_flag = giga_eawaf_former_owner@PREV } #Remember the former owner
					}
					set_owner = event_target:giga_eawaf_country 
					set_controller = event_target:giga_eawaf_country
					add_building = building_giga_eawaf_sirens_capital
					set_planet_flag = giga_eawaf_enthralled_by_sirens
				}
			}
			every_system_megastructure = {
				if = {
					limit = { 
						exists = owner 	
						owner = { giga_eawaf_is_immune_to_sirens = no } 
					}
					owner = { set_country_flag = giga_eawaf_former_owner@PREV } #Remember the former owner
				}
				set_owner = event_target:giga_eawaf_country 
				set_megastructure_flag = giga_eawaf_enthralled_by_sirens
			}
			if = {
				limit = { NOT = { exists = starbase } }
				create_starbase = {
					size = starbase_starhold
					owner = event_target:giga_eawaf_country
				}
			}
			else = {
				starbase = { 
					if = {
						limit = { 
							exists = owner
							owner = { giga_eawaf_is_immune_to_sirens = no } 
						}
						set_owner = event_target:giga_eawaf_country
					}
				}
			}
		}
		else_if = { #Not in any fields
			limit = {
				OR = {
					check_variable = { which = giga_eawaf_distance_from_faust value > event_target:giga_eawaf_country.giga_eawaf_outer_strife_field_range }
					OR = {
						has_star_flag = giga_eawaf_inner_field_system
						has_star_flag = giga_eawaf_outer_field_system
					}
				}
				any_system_megastructure = { is_megastructure_type = anti_sirens_shield }
			}
			#Clear Strife Fields
			every_system_ambient_object = {
				limit = { OR = { is_ambient_object_type = giga_eawaf_strife_field_outer_object is_ambient_object_type = giga_eawaf_strife_field_inner_object } }
				destroy_ambient_object = this
			}
			#Remove Strife Field Modifiers
			every_system_planet = {
				limit = { is_colony = yes }
				giga_eawaf_clear_outer_strife_field_modifier = yes
			}
			if = {
				limit = { has_star_flag = giga_eawaf_outer_field_system }
				remove_star_flag = giga_eawaf_outer_field_system
			}
			if = {
				limit = { has_star_flag = giga_eawaf_inner_field_system }
				remove_star_flag = giga_eawaf_inner_field_system
			}
			every_ship_in_system = { #Return ships to owners
				limit = {
					controller = { is_country_type = giga_eawaf_sirens }
					has_ship_flag = giga_eawaf_enthralled_by_sirens
				}
				random_country = {
					limit = { has_country_flag = giga_eawaf_former_owner@PREV }
					save_event_target_as = giga_eawaf_former_owner
				}
				fleet = { set_owner = event_target:giga_eawaf_former_owner set_controller = event_target:giga_eawaf_former_owner }
			}
			starbase = { #Return starbases to owners
				if = {
					limit = {
						controller = { is_country_type = giga_eawaf_sirens }
						any_country = { has_country_flag = giga_eawaf_former_owner@PREV }
					}
					random_country = {
						limit = { has_country_flag = giga_eawaf_former_owner@PREV }
						save_event_target_as = giga_eawaf_former_owner
					}
					set_owner = event_target:giga_eawaf_former_owner
				}
			}
			every_system_planet = { #Return planets to owners or have them revolt
				limit = {
					owner = { is_country_type = giga_eawaf_sirens }
					is_colony = yes
					has_planet_flag = giga_eawaf_enthralled_by_sirens
				}
				if = {
					limit = { NOT = { any_country = { has_country_flag = giga_eawaf_former_owner@PREV } } }
					create_sirens_splinter_state = yes
				}
				else = {
					random_country = {
						limit = { has_country_flag = giga_eawaf_former_owner@PREV }
						save_event_target_as = giga_eawaf_former_owner
					}
					set_owner = event_target:giga_eawaf_former_owner
					solar_system = { starbase = { set_owner = event_target:giga_eawaf_former_owner } }
				}
			}
		}
	}
}

#Strife is (Stability below 80) x (Pop Count) x (1 + Crime Percentage)
giga_eawaf_calculate_strife = {
	event_target:giga_eawaf_country = { #Reset value of Strife to 0
		set_variable = { which = giga_eawaf_total_strife value = 0 }
	}
	every_galaxy_planet = { #Add Strife from all planets within the Fields regardless of ownership.
		limit = {
			is_colony = yes
			solar_system = { OR = { has_star_flag = giga_eawaf_outer_field_system has_star_flag = giga_eawaf_inner_field_system } }
			planet_stability < 80
		}
		export_trigger_value_to_variable = { trigger = num_pops variable = giga_eawaf_planet_pop_count } #Pop count

		export_trigger_value_to_variable = { trigger = planet_stability variable = giga_eawaf_planet_stability } #Stability
		subtract_variable = { which = giga_eawaf_planet_stability value = 80 }
		multiply_variable = { which = giga_eawaf_planet_stability value = -1}

		export_trigger_value_to_variable = { trigger = planet_crime variable = giga_eawaf_planet_crime } #Crime
		divide_variable = { which = giga_eawaf_planet_crime value = 100 } #To get a percentage
		change_variable = { which = giga_eawaf_planet_crime value = 1 }

		set_variable = { which = giga_eawaf_planet_strife value = giga_eawaf_planet_stability }
		multiply_variable = { which = giga_eawaf_planet_strife value = giga_eawaf_planet_pop_count }
		multiply_variable = { which = giga_eawaf_planet_strife value = giga_eawaf_planet_crime }

		round_variable = giga_eawaf_planet_strife

		event_target:giga_eawaf_country = {
			change_variable = { which = giga_eawaf_total_strife value = PREV.giga_eawaf_planet_strife }
		}
	}
	every_galaxy_planet = { #Add strife from Strifers
		limit = {
			is_colony = yes
			solar_system = { has_star_flag = giga_eawaf_inner_field_system }
		}
		set_variable = { which = giga_eawaf_planet_strife_from_strifers value = 0 }
		export_trigger_value_to_variable = {
			trigger = num_assigned_jobs
			parameters = { job = giga_eawaf_sirens_strifer }
			variable = giga_eawaf_planet_strife_from_strifers
		}
		multiply_variable = { which = giga_eawaf_planet_strife_from_strifers value = event_target:giga_eawaf_country.giga_eawaf_strife_from_strifers }
		event_target:giga_eawaf_country = {
			change_variable = { which = giga_eawaf_total_strife value = PREV.giga_eawaf_planet_strife_from_strifers }
		}
	}
	multiply_variable = { #Multiply by difficulty...
		which = giga_eawaf_total_strife
		value = giga_eawaf_strife_difficulty
	}
	round_variable = giga_eawaf_total_strife
	#Debug
	#set_variable = { which = giga_eawaf_total_strife value = 10000000 }
}

giga_eawaf_update_strife_field_size = {
	event_target:giga_eawaf_country = {
		if = { #Reached expansion threshold, grow the field in 6 months!
			limit = {
				check_variable = { which = giga_eawaf_total_strife value > value:giga_eawaf_strife_field_range_next_level_cost }
				NOT = { has_country_flag = giga_eawaf_strife_field_about_to_change_size }
				NOT = { has_country_flag = giga_eawaf_strife_field_awaiting_size_change }
			}
			set_timed_country_flag = { flag = giga_eawaf_strife_field_about_to_change_size days = 180 } #DEBUG, CHANGE TO 180
			set_timed_country_flag = { flag = giga_eawaf_strife_field_awaiting_size_change days = 270 }
			every_playable_country = {
				create_message = {
					type = STRIFE_FIELD_ABOUT_TO_GROW
					localization = STRIFE_FIELD_ABOUT_TO_GROW_DESC
					days = 30
				}
			}
		}
		else_if = { #Reached expansion threshold, ready to grow!
			limit = {
				check_variable = { which = giga_eawaf_total_strife value > value:giga_eawaf_strife_field_range_next_level_cost }
				NOT = { has_country_flag = giga_eawaf_strife_field_about_to_change_size }
				has_country_flag = giga_eawaf_strife_field_awaiting_size_change
			}
			every_playable_country = {
				create_message = {
					type = STRIFE_FIELD_GROWING
					localization = STRIFE_FIELD_GROWING_DESC
					days = 30
				}
			}
			remove_country_flag = giga_eawaf_strife_field_awaiting_size_change
			change_variable = { which = giga_eawaf_outer_strife_field_range_level value = 1 }
			#Actual 'in-game' Outer Field range
			set_variable = { which = giga_eawaf_outer_strife_field_range value = value:giga_eawaf_outer_strife_field_range } 
			#Actual 'in-game' Inner Field range
			set_variable = { which = giga_eawaf_inner_strife_field_range value = value:giga_eawaf_inner_strife_field_range }
			#How much the next level is going to cost
			set_variable = { which = giga_eawaf_strife_field_range_next_level_cost value = value:giga_eawaf_strife_field_range_next_level_cost }
			#How much the previous level would cost
			set_variable = { which = giga_eawaf_strife_field_range_prev_level_cost value = value:giga_eawaf_strife_field_range_prev_level_cost }
			#giga_eawaf_update_strife_field_gfx_size = yes
		}
		else_if = { #Fell to lower threshold, shrink the field in 6 months!
			limit = {
				check_variable = { which = giga_eawaf_total_strife value < value:giga_eawaf_strife_field_range_prev_level_cost }
				check_variable = { which = giga_eawaf_outer_strife_field_range_level value > 0 } #This can't go below 1.
				NOT = { has_country_flag = giga_eawaf_strife_field_about_to_change_size }
				NOT = { has_country_flag = giga_eawaf_strife_field_awaiting_size_change }
			}
			set_timed_country_flag = { flag = giga_eawaf_strife_field_about_to_change_size days = 180 }
			set_timed_country_flag = { flag = giga_eawaf_strife_field_awaiting_size_change days = 270 }
			every_playable_country = {
				create_message = {
					type = STRIFE_FIELD_ABOUT_TO_SHRINK
					localization = STRIFE_FIELD_ABOUT_TO_SHRINK_DESC
					days = 30
				}
			}
		}
		else_if = { #Fell to lower threshold, shrink the field in 6 months!
			limit = {
				check_variable = { which = giga_eawaf_total_strife value < value:giga_eawaf_strife_field_range_prev_level_cost }
				check_variable = { which = giga_eawaf_outer_strife_field_range_level value > 0 } #This can't go below 1.
				NOT = { has_country_flag = giga_eawaf_strife_field_about_to_change_size }
				has_country_flag = giga_eawaf_strife_field_awaiting_size_change
			}
			every_playable_country = {
				create_message = {
					type = STRIFE_FIELD_SHRINKING
					localization = STRIFE_FIELD_SHRINKING_DESC
					days = 30
				}
			}
			remove_country_flag = giga_eawaf_strife_field_awaiting_size_change
			subtract_variable = { which = giga_eawaf_outer_strife_field_range_level value = 1 }
			#Actual 'in-game' Outer Field range
			set_variable = { which = giga_eawaf_outer_strife_field_range value = value:giga_eawaf_outer_strife_field_range } 
			#Actual 'in-game' Inner Field range
			set_variable = { which = giga_eawaf_inner_strife_field_range value = value:giga_eawaf_inner_strife_field_range }
			#How much the next level is going to cost
			set_variable = { which = giga_eawaf_strife_field_range_next_level_cost value = value:giga_eawaf_strife_field_range_next_level_cost }
			#How much the previous level would cost
			set_variable = { which = giga_eawaf_strife_field_range_prev_level_cost value = value:giga_eawaf_strife_field_range_prev_level_cost }
			#giga_eawaf_update_strife_field_gfx_size = yes
		}
	}
}

giga_eawaf_update_strife_field_size_2 = {
	event_target:giga_eawaf_country = {
		if = { #Reached expansion threshold, grow the field!
			limit = {
				check_variable = { which = giga_eawaf_total_strife value > value:giga_eawaf_strife_field_range_next_level_cost }
				NOT = { has_country_flag = giga_eawaf_strife_field_cooldown }
			}
			every_playable_country = {
				create_message = {
					type = STRIFE_FIELD_GROWING
					localization = STRIFE_FIELD_GROWING_DESC
					days = 30
				}
			}
			set_timed_country_flag = { flag = giga_eawaf_strife_field_cooldown days = 900 }
			change_variable = { which = giga_eawaf_outer_strife_field_range_level value = 1 }
			#Actual 'in-game' Outer Field range
			set_variable = { which = giga_eawaf_outer_strife_field_range value = value:giga_eawaf_outer_strife_field_range } 
			#Actual 'in-game' Inner Field range
			set_variable = { which = giga_eawaf_inner_strife_field_range value = value:giga_eawaf_inner_strife_field_range }
			#How much the next level is going to cost
			set_variable = { which = giga_eawaf_strife_field_range_next_level_cost value = value:giga_eawaf_strife_field_range_next_level_cost }
			#How much the previous level would cost
			set_variable = { which = giga_eawaf_strife_field_range_prev_level_cost value = value:giga_eawaf_strife_field_range_prev_level_cost }
			#giga_eawaf_update_strife_field_gfx_size = yes
		}
		else_if = { #Fell to lower threshold, shrink the field in 6 months!
			limit = {
				check_variable = { which = giga_eawaf_total_strife value < value:giga_eawaf_strife_field_range_prev_level_cost }
				check_variable = { which = giga_eawaf_outer_strife_field_range_level value > 0 } #This can't go below 1.
				NOT = { has_country_flag = giga_eawaf_strife_field_cooldown }
			}
			every_playable_country = {
				create_message = {
					type = STRIFE_FIELD_SHRINKING
					localization = STRIFE_FIELD_SHRINKING_DESC
					days = 30
				}
			}
			set_timed_country_flag = { flag = giga_eawaf_strife_field_cooldown days = 900 }
			remove_country_flag = giga_eawaf_strife_field_awaiting_size_change
			subtract_variable = { which = giga_eawaf_outer_strife_field_range_level value = 1 }
			#Actual 'in-game' Outer Field range
			set_variable = { which = giga_eawaf_outer_strife_field_range value = value:giga_eawaf_outer_strife_field_range } 
			#Actual 'in-game' Inner Field range
			set_variable = { which = giga_eawaf_inner_strife_field_range value = value:giga_eawaf_inner_strife_field_range }
			#How much the next level is going to cost
			set_variable = { which = giga_eawaf_strife_field_range_next_level_cost value = value:giga_eawaf_strife_field_range_next_level_cost }
			#How much the previous level would cost
			set_variable = { which = giga_eawaf_strife_field_range_prev_level_cost value = value:giga_eawaf_strife_field_range_prev_level_cost }
			#giga_eawaf_update_strife_field_gfx_size = yes
		}
	}
}

giga_eawaf_calculate_war_materials = {
	every_galaxy_planet = { #Add war materials from Toilers
		limit = {
			is_colony = yes
			owner = { is_country_type = giga_eawaf_sirens }
		}
		set_variable = { which = giga_eawaf_sirens_warmaterial_planet value = 0 }
		export_trigger_value_to_variable = {
			trigger = num_assigned_jobs
			parameters = { job = giga_eawaf_sirens_toiler }
			variable = giga_eawaf_sirens_warmaterial_planet
		}
		event_target:giga_eawaf_country = {
			change_variable = { which = giga_eawaf_sirens_warmaterial_count value = PREV.giga_eawaf_sirens_warmaterial_planet }
		}
	}
	round_variable = giga_eawaf_sirens_warmaterial_count
}

#A conventional fleet
giga_eawaf_create_standard_sirens_fleet = {
	create_fleet = {
		name = "Abyssal Task Force"
		settings = { spawn_debris = yes uses_naval_capacity = yes can_upgrade = yes }
		effect = {
			set_owner = ROOT
			while = { count = 4 create_ship = { name = random design = "Sonata" prefix = no } }
			while = { count = 12 create_ship = { name = random design = "Aria" prefix = no } }
			while = { count = 8 create_ship = { name = random design = "Addagio" prefix = no } }
			while = { count = 1 create_ship = { name = random design = "Panopticon" prefix = no } }
			while = { count = 2 create_ship = { name = random design = "Enthraller" prefix = no } }
			set_location = { target = event_target:giga_eawaf_planet distance = 150 angle = random }
			set_fleet_stance = aggressive
			set_formation_scale = 2
		}
	}
}

giga_eawaf_update_sirens_leader_modifiers = { #These scale with difficulty
	remove_modifier = giga_eawaf_aria_modifier
	remove_modifier = giga_eawaf_sonata_modifier
	remove_modifier = giga_eawaf_adagio_modifier
	if = {
		limit = { ruler = { has_leader_flag = giga_eawaf_aria_leader } }
		add_modifier = {
			modifier = giga_eawaf_aria_modifier
			days = -1
			mult = giga_eawaf_field_potency_multiplier
		}
	}
	if = {
		limit = { ruler = { has_leader_flag = giga_eawaf_sonata_leader } }
		add_modifier = {
			modifier = giga_eawaf_sonata_modifier
			days = -1
			mult = giga_eawaf_field_potency_multiplier
		}
	}
	if = {
		limit = { ruler = { has_leader_flag = giga_eawaf_adagio_leader } }
		add_modifier = {
			modifier = giga_eawaf_adagio_modifier
			days = -1
			mult = giga_eawaf_field_potency_multiplier
		}
	}
}

#Menu Stuff
reduce_sirens_spawn_date = {
	if = {
		limit = {
			event_target:global_event_country = {
				check_variable = {
					which = sirens_spawn_date
					value > 2250
				}
			}
		}
		event_target:global_event_country = {
			subtract_variable = {
				which = sirens_spawn_date
				value = 50
			}
		}
	}
	else_if = {
		limit = {
			event_target:global_event_country = {
				check_variable = {
					which = sirens_spawn_date
					value <= 2250
				}
			}
		}
		event_target:global_event_country = {
			set_variable = {
				which = sirens_spawn_date
				value = 2550
			}
		}
	}
}

create_sirens_splinter_state = {
	random_owned_pop = {
		species = { save_event_target_as = splinter_species }
	}
	solar_system = { #claim nearby systems
		every_neighbor_system = {
			limit = {
				exists = owner
				owner = { is_country_type = giga_eawaf_sirens }
				NOT = { has_star_flag = eawaf_system }
			}
			set_star_flag = splinter_state_claim
		}
	}
	every_system = { #claim further systems
		limit = {
			has_star_flag = splinter_state_claim
		}
		every_neighbor_system = {
			limit = {
				exists = owner
				owner = { is_country_type = giga_eawaf_sirens }
				NOT = { has_star_flag = eawaf_system }
			}
			random = {
				chance = 60
				set_star_flag = splinter_state_claim
			}
		}
	}
	if = {
		limit = {
			event_target:splinter_species = {
				is_hive_species = yes
			}
		}
		create_country = {
			species = event_target:splinter_species
			name = random
			authority = auth_hive_mind
			civics = random
			ethos = { ethic = ethic_gestalt_consciousness }
			flag = random
			origin = origin_katzen_splinter
			type = default
			effect = {
				set_country_flag = sirens_splinter_state
				save_global_event_target_as = sirens_splinter_country
				add_modifier = {
					modifier = katzenartig_splinter
					days = -1
				}
				every_country = {
					establish_communications_no_message = event_target:sirens_splinter_country
				}
				copy_techs_from = {
					target = event_target:giga_eawaf_country
				}
			}
		}
	}
	else_if = { 
		limit = {
			event_target:splinter_species = {
				giga_is_machine_species = yes
			}
		}
		create_country = {
			species = event_target:splinter_species
			name = random
			authority = auth_machine_intelligence
			civics = random
			ethos = { ethic = ethic_gestalt_consciousness }
			flag = random
			origin = origin_katzen_splinter
			type = default
			effect = {
				set_country_flag = sirens_splinter_state
				save_global_event_target_as = sirens_splinter_country
				add_modifier = {
					modifier = katzenartig_splinter
					days = -1
				}
				every_country = {
					establish_communications_no_message = event_target:sirens_splinter_country
				}
				copy_techs_from = {
					target = event_target:giga_eawaf_country
				}
			}
		}
	}
	else_if = {
		limit = {
			event_target:splinter_species = {
				giga_is_robot_species = yes
			}
		}
		create_country = {
			species = event_target:splinter_species
			name = random
			authority = random
			civics = random
			ethos = random
			flag = random
			origin = origin_katzen_splinter
			type = default
			effect = {
				set_country_flag = sirens_splinter_state
				save_global_event_target_as = sirens_splinter_country
				add_modifier = {
					modifier = katzenartig_splinter
					days = -1
				}
				every_country = {
					establish_communications_no_message = event_target:sirens_splinter_country
				}
				copy_techs_from = {
					target = event_target:giga_eawaf_country
				}
				# Check synthetic pieces
				set_country_flag = synthetic_empire
				set_policy = { 
					policy = artificial_intelligence_policy
					option = ai_full_rights
					cooldown = no
				}
				give_engineering_tech_tier_1_effect = yes
				give_engineering_tech_tier_2_effect = yes
				give_physics_tech_tier_1_effect = yes
				give_physics_tech_tier_2_effect = yes
				give_society_tech_tier_1_effect = yes
				give_society_tech_tier_2_effect = yes
				# Make sure they have the right tech
				give_technology = {
					tech = tech_robotic_workers
					message = no
				}
				give_technology = {
					tech = tech_droid_workers
					message = no
				}
				give_technology = {
					tech = tech_synthetic_workers
					message = no
				}
				give_technology = {
					tech = tech_synthetic_leaders
					message = no
				}
			}
		}
	}
	else = {
		create_country = {
			species = event_target:splinter_species
			name = random
			authority = random
			civics = random
			ethos = random
			flag = random
			origin = origin_katzen_splinter
			type = default
			effect = {
				set_country_flag = sirens_splinter_state
				save_global_event_target_as = sirens_splinter_country
				add_modifier = {
					modifier = katzenartig_splinter
					days = -1
				}
				every_country = {
					establish_communications_no_message = event_target:sirens_splinter_country
				}
				copy_techs_from = {
					target = event_target:giga_eawaf_country
				}
			}
		}
	}
	set_owner = event_target:sirens_splinter_country
	set_capital = yes
	check_planet_employment = yes
	every_system = { #transfer claims
		limit = {
			has_star_flag = splinter_state_claim
		}
		starbase = {
			set_owner = event_target:sirens_splinter_country
		}
		remove_star_flag = splinter_state_claim
	}
	solar_system = { #claim all other habitable planets in system
		every_system_colony = {
			limit = {
				is_capital = no
				owner = {
					is_country_type = giga_eawaf_sirens
				}
			}
			set_owner = event_target:sirens_splinter_country
		}
	}
	event_target:sirens_splinter_country = {
		every_planet_within_border = {
			limit = {
				is_colony = yes
				owner = { is_country_type = giga_eawaf_sirens }
			}
			set_owner = event_target:sirens_splinter_country
		}
		add_resource = {
			minerals = 50000
			alloys = 10000
			energy = 50000
			food = 50000
			consumer_goods = 25000
			exotic_gases = 5000
			volatile_motes = 5000
			rare_crystals = 5000
			influence = 250
		}
		every_system_within_border = { #claim all sirens fleets in borders
			every_fleet_in_system = {
				limit = { owner = { is_country_type = giga_eawaf_sirens } }
				set_owner = event_target:sirens_splinter_country
				every_owned_ship = { #Destroy enthrallers and panopticons
					limit = { OR = { is_ship_size = giga_eawaf_sirens_enthraller is_ship_size = giga_eawaf_sirens_panopticon } }
					destroy_ship = THIS
				}
			}
		}
	}
}

giga_eawaf_defeat_sirens = {
	set_global_flag = giga_eawaf_sirens_defeated
	event_target:giga_eawaf_country = {
		every_owned_fleet = { destroy_fleet = THIS }
		destroy_country = yes 
	}
	every_country = {
		limit = { has_event_chain = giga_eawaf_sirens_chain }
		end_event_chain = giga_eawaf_sirens_chain
	}
	every_country = {
		limit = { country_has_situation = { SITUATION = situation_eawaf_sirens_understanding } }
		random_situation = {
			limit = { is_situation_type = situation_eawaf_sirens_understanding }
			abort_situation = THIS
		}
	}
}

giga_eawaf_clear_outer_strife_field_modifier = {
	remove_modifier = giga_eawaf_outer_strife_field_modifier
	remove_modifier = giga_eawaf_outer_strife_field_modifier_halved
	remove_modifier = giga_eawaf_outer_strife_field_modifier_quartered
}

giga_eawaf_apply_outer_strife_field_modifier = {
	if = {
		limit = {
			NOR = {
				has_active_building = building_giga_eawaf_disenchanter_building_1
				has_active_building = building_giga_eawaf_disenchanter_building_2
			}
		}
		add_modifier = {
			modifier = giga_eawaf_outer_strife_field_modifier
			days = -1
			mult = event_target:giga_eawaf_country.giga_eawaf_field_potency_multiplier
		}
	}
	else_if = {
		limit = { has_active_building = building_giga_eawaf_disenchanter_building_1 }
		add_modifier = {
			modifier = giga_eawaf_outer_strife_field_modifier_halved
			days = -1
			mult = event_target:giga_eawaf_country.giga_eawaf_field_potency_multiplier
		}
	}
	else_if = {
		limit = { has_active_building = building_giga_eawaf_disenchanter_building_2 }
		add_modifier = {
			modifier = giga_eawaf_outer_strife_field_modifier_quartered
			days = -1
			mult = event_target:giga_eawaf_country.giga_eawaf_field_potency_multiplier
		}
	}
}

giga_eawaf_clear_sirens_research_modifiers = {
	remove_modifier = giga_eawaf_disenchanter_research_cost_1
	remove_modifier = giga_eawaf_disenchanter_research_cost_2
	remove_modifier = giga_eawaf_disenchanter_research_cost_3
}

giga_eawaf_update_sirens_research_modifier = {
	if = {
		limit = { has_modifier = giga_eawaf_disenchanter_research_cost_1 }
		remove_modifier = giga_eawaf_disenchanter_research_cost_1
		add_modifier = {
			modifier = giga_eawaf_disenchanter_research_cost_1
			days = -1
			mult = event_target:giga_eawaf_country.giga_eawaf_field_potency_multiplier
		}
	}
	else_if = {
		limit = { has_modifier = giga_eawaf_disenchanter_research_cost_2 }
		remove_modifier = giga_eawaf_disenchanter_research_cost_2
		add_modifier = {
			modifier = giga_eawaf_disenchanter_research_cost_2
			days = -1
			mult = event_target:giga_eawaf_country.giga_eawaf_field_potency_multiplier
		}
	}
	else_if = {
		limit = { has_modifier = giga_eawaf_disenchanter_research_cost_3 }
		remove_modifier = giga_eawaf_disenchanter_research_cost_3
		add_modifier = {
			modifier = giga_eawaf_disenchanter_research_cost_3
			days = -1
			mult = event_target:giga_eawaf_country.giga_eawaf_field_potency_multiplier
		}
	}
}

giga_eawaf_update_strife_field_gfx_size = {
	if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 1 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_1 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 2 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_2 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 3 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_3 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 4 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_4 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 5 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_5 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 6 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_6 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 7 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_7 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 8 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_8 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 9 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_9 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 10 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_10 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 11 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_11 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 12 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_12 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 13 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_13 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 14 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_14 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 15 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_15 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 16 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_16 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 17 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_17 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 18 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_18 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 19 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_19 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 20 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_20 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 21 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_21 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 22 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_22 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 23 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_23 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 24 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_24 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 25 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_25 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 26 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_26 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 27 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_27 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 28 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_28 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 29 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_29 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 30 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_30 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 31 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_31 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 32 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_32 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 33 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_33 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 34 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_34 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 35 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_35 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 36 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_36 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 37 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_37 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 38 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_38 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 39 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_39 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 40 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_40 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 41 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_41 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 42 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_42 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 43 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_43 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 44 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_44 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 45 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_45 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 46 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_46 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 47 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_47 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 48 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_48 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 49 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_49 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 50 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_50 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 51 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_51 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 52 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_52 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 53 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_53 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 54 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_54 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 55 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_55 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 56 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_56 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 57 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_57 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 58 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_58 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 59 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_59 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 60 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_60 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 61 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_61 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 62 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_62 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 63 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_63 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 64 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_64 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 65 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_65 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 66 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_66 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 67 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_67 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 68 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_68 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 69 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_69 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 70 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_70 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 71 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_71 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 72 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_72 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 73 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_73 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 74 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_74 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 75 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_75 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 76 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_76 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 77 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_77 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 78 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_78 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 79 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_79 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 80 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_80 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 81 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_81 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 82 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_82 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 83 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_83 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 84 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_84 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 85 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_85 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 86 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_86 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 87 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_87 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 88 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_88 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 89 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_89 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 90 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_90 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 91 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_91 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 92 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_92 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 93 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_93 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 94 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_94 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 95 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_95 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 96 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_96 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 97 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_97 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 98 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_98 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 99 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_99 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 100 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_100 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 101 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_101 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 102 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_102 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 103 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_103 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 104 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_104 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 105 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_105 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 106 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_106 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 107 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_107 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 108 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_108 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 109 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_109 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 110 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_110 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 111 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_111 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 112 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_112 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 113 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_113 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 114 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_114 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 115 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_115 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 116 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_116 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 117 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_117 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 118 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_118 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 119 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_119 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 120 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_120 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 121 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_121 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 122 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_122 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 123 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_123 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 124 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_124 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 125 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_125 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 126 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_126 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 127 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_127 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 128 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_128 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 129 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_129 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 130 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_130 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 131 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_131 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 132 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_132 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 133 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_133 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 134 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_134 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 135 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_135 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 136 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_136 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 137 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_137 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 138 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_138 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 139 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_139 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 140 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_140 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 141 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_141 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 142 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_142 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 143 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_143 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 144 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_144 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 145 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_145 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 146 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_146 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 147 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_147 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 148 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_148 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 149 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_149 } }
	else_if = { limit = { check_variable = { which = giga_eawaf_outer_strife_field_range_level value = 150 } } event_target:giga_eawaf_system = { set_star_class = sc_giga_eawaf_strife_field_150 } }
}