### Maginot functions, see also giga_maginot_init_effects for startup functions

# Creates defence fleet with appropriate number of platforms
# * call from planet scope (a Maginot World specifically)
maginot_create_orbital_defence_fleet = {
	save_event_target_as = maginot_world_location
	create_starbase = {
		size = giga_maginot_strategic_defence_command_starbase_tier_1
		owner = from
		#module = <starbase_module>
		#building = <starbase_building>
		effect = {
			fleet = {
				set_name = NAME_maginot_orbital_defence_fleet
				set_fleet_flag = maginot_orbital_defence
			}
			# pl*netcraft upgrade
			if = {
				limit = { owner = { has_technology = giga_tech_maginot_planetcraft_upgrade } }
				fleet = {
					add_modifier = {
						modifier = giga_maginot_planetcraft_upgrade
					}
				}
				#set_starbase_size = giga_maginot_strategic_defence_command_starbase_tier_2
			}
		}
	}
	create_fleet = {
		name = "NAME_maginot_orbital_defence_fleet"
		settings = {
			spawn_debris = no
			can_change_composition = no
			can_change_leader = no
			can_disband = no
		}
		effect = {
			set_formation_scale = 4 # keep distance between platforms
			set_owner = event_target:maginot_world_location.planet_owner
			create_ship = {
				name = "NAME_maginot_strategic_defence_command_platform"
				random_existing_design = giga_maginot_strategic_defence_command_platform
			}
			while = {
				count = event_target:maginot_world_location.giga_maginot_current_SD_platform_count
				create_ship = {
					name = "NAME_maginot_secondary_platform"
					random_existing_design = asteroid_artillery
				}
			}
			set_location = {
				target = event_target:maginot_world_location
				distance = 0.60
				angle = 0
			}
			set_fleet_flag = maginot_orbital_defence
			set_variable = {
				which = giga_maginot_fleet_id
				value = event_target:maginot_world_location.giga_maginot_id
			}
			# apply buffs from tech on creation
			every_owned_ship = {
				# firepower
				if = {
					limit = { owner = { has_technology = giga_tech_maginot_firepower_1 } }
					add_modifier = {
						modifier = giga_maginot_firepower_1
					}
				}
				# pl*netcraft upgrade
				if = {
					limit = { owner = { has_technology = giga_tech_maginot_planetcraft_upgrade } }
					add_modifier = {
						modifier = giga_maginot_planetcraft_upgrade
					}
				}
				# systemcraft upgrade
				if = {
					limit = { owner = { has_technology = giga_tech_maginot_systemcraft_upgrade } }
					add_modifier = {
						modifier = giga_maginot_systemcraft_upgrade
					}
				}
			}
		}
	}
}

# Stolen from the asteroid artillery script (with permission)
# This scripted effect gives every Maginot World in the system a very specific ID that can be used to "connect" 
# a ship with the corresponding ID to the planet (as in, when a ship with an ID of "1" is destroyed, we know 
# we have to alter the planet with the ID of "1")
# * call from system scope (with Maginot Worlds in it)
assign_giga_maginot_id = {
	if = {
		limit = {
			NOT = { any_system_planet = { has_planet_flag = has_giga_maginot_id } }
		}
		set_variable = {
			which = current_giga_maginot_id
			value = 1
		}
	}
	every_system_planet = {
		limit = {
			OR = {
				has_planet_flag = giga_maginot_world
				giga_is_maginot_world = yes
			}
			NOT = { has_planet_flag = has_giga_maginot_id }
		}
		set_planet_flag = doesnt_have_giga_maginot_id
	}
	while = {
		limit = {
			any_system_planet = {
				has_planet_flag = doesnt_have_giga_maginot_id
			}
		}
		random_system_planet = {
			limit = {
				OR = {
					has_planet_flag = giga_maginot_world
					giga_is_maginot_world = yes
				}
				has_planet_flag = doesnt_have_giga_maginot_id
			}
			set_variable = {
				which = giga_maginot_id
				value = THIS.solar_system.current_giga_maginot_id
			}
			set_planet_flag = has_giga_maginot_id
			remove_planet_flag = doesnt_have_giga_maginot_id
		}
		change_variable = {
			which = current_giga_maginot_id
			value = 1
		}
	}
}

# Checks Maginot World for possible upgrade points by checking modifiers from actively worked jobs (building districts is not enough),
# and then checks how many are used by orbiting defences (SD Platforms cost 2 offensive points each)
# * call from planet scope (a Maginot World specifically)
maginot_check_upgrade_points = {
	save_event_target_as = maginot_world_location
	## max points
	# offensive
	export_modifier_to_variable = {
		modifier = maginot_offensive_upgrade_point_add
		variable =  maginot_offensive_upgrade_points_max
	}

	# defensive
	export_modifier_to_variable = {
		modifier = maginot_defensive_upgrade_point_add
		variable =  maginot_defensive_upgrade_points_max
	}

	## used points
	# secondary platforms can die, so check how many there are
	if = {
		limit = { has_planet_flag = maginot_has_orbital_defence }
		# this doesnt work, for some reason
		# solar_system = {
		# 	random_fleet_in_system = {
		# 		limit = {
		# 			has_fleet_flag = maginot_orbital_defence
		# 			check_variable = {
		# 				which = giga_maginot_fleet_id
		# 				value = prevprev.giga_maginot_id
		# 			}
		# 		}
		# 		event_target:maginot_world_location = {
		# 			set_variable = {
		# 				which = giga_maginot_current_SD_platform_count
		# 				value = 0
		# 			}	
		# 		}
		# 		every_owned_ship = {
		# 			limit = { is_ship_size = asteroid_artillery }
		# 			# should run this code once per ship
		# 			event_target:maginot_world_location = {
		# 				change_variable = {
		# 					which = giga_maginot_current_SD_platform_count
		# 					value = 1
		# 				}
		# 			}
		# 		}
		# 	}
		# }
		# below is paradox math for
		# total_offensive_points = atk_upgrades + (2 * current_SD_platforms)
		set_variable = {
			which = current_SD_platform_point_use
			value = 0
		}
		set_variable = {
			which = current_SD_platform_point_use
			value = giga_maginot_current_SD_platform_count
		}
		multiply_variable = {
			which = current_SD_platform_point_use
			value = 2
		}
		# add up all types of offensive upgrades
		set_variable = {
			which = maginot_offensive_upgrade_points_used
			value = maginot_orbital_defence_atk_upgrades
		}
		change_variable = {
			which = maginot_offensive_upgrade_points_used
			value = current_SD_platform_point_use
		}
		# clear_variable = current_SD_platform_point_use
		# causes an error to log, thanks paradox
	}
	# other variable values should be fine

	## available points
	# points = max - used
	set_variable = {
		which = maginot_offensive_upgrade_points_current
		value = maginot_offensive_upgrade_points_max
	}
	subtract_variable = {
		which = maginot_offensive_upgrade_points_current
		value = maginot_offensive_upgrade_points_used
	}
	set_variable = {
		which = maginot_defensive_upgrade_points_current
		value = maginot_defensive_upgrade_points_max
	}
	subtract_variable = {
		which = maginot_defensive_upgrade_points_current
		value = maginot_defensive_upgrade_points_used
	}

	# count of bunkers on the world
	set_variable = {
		which = maginot_bunker_count
		value = value:maginot_bunker_count
	}
}

# Reapplies modifiers according to current upgrades bought on the Maginot World
# to the orbiting defence fleet
# * call from planet scope (a Maginot World specifically)
maginot_reapply_upgrades = {
	save_event_target_as = maginot_world_location
	solar_system = {
		random_fleet_in_system = {
			limit = {
				has_fleet_flag = maginot_orbital_defence
				check_variable = {
					which = giga_maginot_fleet_id
					value = event_target:maginot_world_location.giga_maginot_id
				}
			}
			# count for number of upgrades to apply
			# hp
			set_variable = {
				which = giga_maginot_orbital_defence_hp
				value = event_target:maginot_world_location.maginot_orbital_defence_hp_upgrades
			}
			# atk
			set_variable = {
				which = giga_maginot_orbital_defence_atk
				value = event_target:maginot_world_location.maginot_orbital_defence_atk_upgrades
			}
			# trg
			set_variable = {
				which = giga_maginot_orbital_defence_trg
				value = event_target:maginot_world_location.maginot_orbital_defence_trg_upgrades
			}
			# apply to the ships in fleet
			every_owned_ship = {
				# hp
				# clear previously applied modifier
				if = {
					limit = { has_modifier = giga_maginot_orbital_defence_hp }
					remove_modifier = giga_maginot_orbital_defence_hp
				}
				# apply
				add_modifier = {
					modifier = giga_maginot_orbital_defence_hp
					multiplier = prev.giga_maginot_orbital_defence_hp
				}
				# atk
				# clear previously applied modifier
				if = {
					limit = { has_modifier = giga_maginot_orbital_defence_atk }
					remove_modifier = giga_maginot_orbital_defence_atk
				}
				# apply
				add_modifier = {
					modifier = giga_maginot_orbital_defence_atk
					multiplier = prev.giga_maginot_orbital_defence_atk
				}
				# trg
				# clear previously applied modifier
				if = {
					limit = { has_modifier = giga_maginot_orbital_defence_trg }
					remove_modifier = giga_maginot_orbital_defence_trg
				}
				# apply
				add_modifier = {
					modifier = giga_maginot_orbital_defence_trg
					multiplier = prev.giga_maginot_orbital_defence_trg
				}
				## tech buffs
				# firepower
				if = {
					limit = { has_modifier = giga_maginot_firepower_1 }
					remove_modifier = giga_maginot_firepower_1
				}
				if = {
					limit = { owner = { has_technology = giga_tech_maginot_firepower_1 } }
					add_modifier = {
						modifier = giga_maginot_firepower_1
					}
				}
				# pl*netcraft upgrade
				if = {
					limit = { has_modifier = giga_maginot_planetcraft_upgrade }
					remove_modifier = giga_maginot_planetcraft_upgrade
				}
				if = {
					limit = { owner = { has_technology = giga_tech_maginot_planetcraft_upgrade } }
					add_modifier = {
						modifier = giga_maginot_planetcraft_upgrade
					}
				}
				# systemcraft upgrade
				if = {
					limit = { has_modifier = giga_maginot_systemcraft_upgrade }
					remove_modifier = giga_maginot_systemcraft_upgrade
				}
				if = {
					limit = { owner = { has_technology = giga_tech_maginot_systemcraft_upgrade } }
					add_modifier = {
						modifier = giga_maginot_systemcraft_upgrade
					}
				}
			}
		}
	}
}

# Counts and spawns proper number of armies for Maginot
# * call from planet scope (a Maginot World specifically)
maginot_refresh_ground_armies = {
	# basic
	if = {
		limit = { exists = planet_owner planet_owner = { is_machine_empire = no } }
		every_planet_army = {
			limit = {
				OR = {
					army_type = "heavy_defender"
					army_type = "robot_heavy_defender"
					army_type = "machine_heavy_defender"
				}
			}
			remove_army = yes
		}
		while = {
			count = 5
			create_army = { name = "NAME_heavy_defender"	owner = planet.owner species = planet.owner.species type = "heavy_defender"}
		}
	}
	else_if = {
		limit = { exists = planet_owner planet_owner = { is_machine_empire = yes } }
		every_planet_army = {
			limit = {
				OR = {
					army_type = "heavy_defender"
					army_type = "robot_heavy_defender"
					army_type = "machine_heavy_defender"
				}
			}
			remove_army = yes
		}
		while = {
			count = 5
			create_army = { name = "NAME_heavy_defender"	owner = planet.owner species = planet.owner.species type = "machine_heavy_defender"}
		}
	}

	# artillery
	if = {
		limit = { exists = planet_owner }
		every_planet_army = {
			limit = {
				army_type = "maginot_artillery_army" 
			}
			remove_army = yes
		}
		while = {
			count = value:maginot_artillery_army_count
			create_army = { name = "NAME_planetary_artillery"	owner = planet_owner type = "maginot_artillery_army"} 
		}
	}
	# shield
	if = {
		limit = { exists = planet_owner }
		every_planet_army = {
			limit = {
				army_type = "maginot_shield_army" 
			}
			remove_army = yes
		}
		while = {
			count = value:maginot_shield_army_count
			create_army = { name = "NAME_shield_battery"	owner = planet_owner type = "maginot_shield_army"} 
		}
	}
	# bunker
	if = {
		limit = { exists = planet_owner }
		every_planet_army = {
			limit = {
				army_type = "maginot_bunker_army" 
			}
			remove_army = yes
		}
		while = { 
			count = value:maginot_bunker_army_count	
			create_army = { name = "NAME_fortification_network"	owner = planet_owner type = "maginot_bunker_army"} 
		}
	}
}

