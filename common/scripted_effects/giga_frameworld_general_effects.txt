giga_frameworld_init_variables = {
	set_variable = {
		which = giga_frameworld_expansions
		value = 0
	}
	set_variable = {
		which = giga_frameworld_structure_expansions
		value = 0
	}

	giga_frameworld_reset_variables = yes
}

giga_frameworld_reset_variables = {
	
	set_variable = {
		which = giga_frameworld_expansion_cost_multiplier
		value = 1
	}
	set_variable = {
		which = giga_frameworld_expansion_bulk_5_cost_multiplier
		value = 1
	}
	set_variable = {
		which = giga_frameworld_expansion_bulk_10_cost_multiplier
		value = 1
	}
	set_variable = {
		which = giga_frameworld_expansion_cost_buffer
		value = 0
	}
	
	set_variable = {
		which = frameworld_science_districts
		value = 0
	}
	set_variable = {
		which = frameworld_industrial_districts
		value = 0
	}
	set_variable = {
		which = frameworld_advanced_industrial_districts
		value = 0
	}
	set_variable = {
		which = frameworld_simulation_districts
		value = 0
	}

	set_variable = {
		which = frameworld_unemployed
		value = 0
	}
}

# planet scope
giga_frameworld_recalculate_buffer = {
	set_variable = {
		which = giga_frameworld_expansion_cost_buffer
		value = @giga_frameworld_expansion_cost_base
	}
	multiply_variable = {
		which = giga_frameworld_expansion_cost_buffer
		value = giga_frameworld_expansion_cost_multiplier
	}
	multiply_variable = {
		which = giga_frameworld_expansion_cost_buffer
		value = 5
	}
}

# planet scope
giga_frameworld_recalculate_exponent = {
	# set to the base level
	set_variable = {
		which = giga_frameworld_expansion_cost_exponent
		value = @giga_frameworld_expansion_cost_exponent
	}
	
	if = {
		limit = {
			exists = owner
		}
		
		owner = {
			if = {
				limit = {
					has_technology = tech_habitat_1
				}
				prev = {
					change_variable = {
						which = giga_frameworld_expansion_cost_exponent
						value = @giga_frameworld_expansion_exponent_habitat
					}
				}
			}
			
			if = {
				limit = {
					has_ascension_perk = ap_voidborn
				}
				prev = {
					change_variable = {
						which = giga_frameworld_expansion_cost_exponent
						value = @giga_frameworld_expansion_exponent_voidborne
					}
				}
			}
			
			if = {
				limit = {
					has_technology = tech_ring_world
				}
				prev = {
					change_variable = {
						which = giga_frameworld_expansion_cost_exponent
						value = @giga_frameworld_expansion_exponent_ringworld
					}
				}
			}
		}
	}
}

# planet scope
giga_frameworld_recalculate_variables = {
	# cost mult to 1
	giga_frameworld_reset_variables = yes
	
	# recalculate the exponent
	giga_frameworld_recalculate_exponent = yes
	
	# deal with calculating base cost
	set_variable = { 
		which = giga_frameworld_expansion_cost_base
		value = @giga_frameworld_expansion_cost_base
	}
	
	if = {
		limit = {
			exists = owner
			owner = {
				has_technology = tech_habitat_2
			}
		}
		change_variable = {
			which = giga_frameworld_expansion_cost_base
			value = @giga_frameworld_expansion_cost_habitat_2
		}
	}
	
	if = {
		limit = {
			exists = owner
			owner = {
				has_technology = tech_habitat_3
			}
		}
		change_variable = {
			which = giga_frameworld_expansion_cost_base
			value = @giga_frameworld_expansion_cost_habitat_3
		}
	}

	# recalculate multiplier from expansion count
	if = {
		limit = {
			is_variable_set = giga_frameworld_structure_expansions
		}
		while = {
			count = giga_frameworld_structure_expansions

			multiply_variable = {
				which = giga_frameworld_expansion_cost_multiplier
				value = giga_frameworld_expansion_cost_exponent
			}
		}
	}
	
	# set up the bulk buy options
	set_variable = { 
		# temp value for our mult
		which = giga_frameworld_expansion_multiplier_bulk
		value = giga_frameworld_expansion_cost_multiplier
	}
	set_variable = {
		# +5 starts with the +1 cost
		which = giga_frameworld_expansion_bulk_5_cost_multiplier
		value = giga_frameworld_expansion_cost_multiplier
	}
	
	while = {
		count = 4 # the current mult is for +1 so for +5 we need 4 more
		multiply_variable = { 
			# increase our temp multiplier
			which = giga_frameworld_expansion_multiplier_bulk
			value = giga_frameworld_expansion_cost_exponent
		}
		change_variable = { 
			# add the cost to our bulk cost
			which = giga_frameworld_expansion_bulk_5_cost_multiplier
			value = giga_frameworld_expansion_multiplier_bulk
		}
	}
	
	set_variable = { 
		# +10 starts with the +5 cost
		which = giga_frameworld_expansion_bulk_10_cost_multiplier
		value = giga_frameworld_expansion_bulk_5_cost_multiplier
	}
	
	while = {
		count = 5 # increment 5 more times to get to +10
		multiply_variable = { 
			# increase temp multiplier
			which = giga_frameworld_expansion_multiplier_bulk
			value = giga_frameworld_expansion_cost_exponent
		}
		change_variable = { 
			# add to bulk cost
			which = giga_frameworld_expansion_bulk_10_cost_multiplier
			value = giga_frameworld_expansion_multiplier_bulk
		}
	}
	
	# tooltip variables
	set_variable = {
		which = giga_frameworld_expansion_cost_multiplier_tooltip
		value = giga_frameworld_expansion_cost_multiplier
	}
	round_variable_to_closest = {
		which = giga_frameworld_expansion_cost_multiplier_tooltip
		value = 0.01
	}
	
	set_variable = {
		which = giga_frameworld_expansion_bulk_5_cost_multiplier_tooltip
		value = giga_frameworld_expansion_bulk_5_cost_multiplier
	}
	round_variable_to_closest = {
		which = giga_frameworld_expansion_bulk_5_cost_multiplier_tooltip
		value = 0.01
	}
	
	set_variable = {
		which = giga_frameworld_expansion_bulk_10_cost_multiplier_tooltip
		value = giga_frameworld_expansion_bulk_10_cost_multiplier
	}
	round_variable_to_closest = {
		which = giga_frameworld_expansion_bulk_10_cost_multiplier_tooltip
		value = 0.01
	}
	
	# recalculate "we have lots of alloys AI buffer"
	giga_frameworld_recalculate_buffer = yes

	# recalculate maginot district cap
	giga_frameworld_update_maginot_deposits = yes
}

# planet scope
giga_frameworld_expand_deposit = {
	hidden_effect = {
		if = {
			limit = {
				has_deposit = $DEPOSIT$
			}

			change_variable = {
				which = $VAR$
				value = $COUNT|1$
			}
		}
		else = {
			add_deposit = $DEPOSIT$

			set_variable = {
				which = $VAR$
				value = $COUNT|1$
			}
		}
	}
	tooltip = {
		add_deposit = $DEPOSIT$_tooltip
	}
}

giga_frameworld_contract_deposit = {
	hidden_effect = {
		if = {
			limit = {
				has_deposit = $DEPOSIT$
			}

			subtract_variable = {
				which = $VAR$
				value = $COUNT|1$
			}

			if = {
				limit = {
					check_variable = {
						which = $VAR$
						value <= 0
					}
				}
				remove_deposit = $DEPOSIT$
			}
		}
	}
	tooltip = {
		remove_deposit = $DEPOSIT$_tooltip
	}
}

###############################################################################################################

# country scope
#giga_frameworld_recalculate_outpost_bonus = {
#	if = {
#		limit = {
#			giga_has_frameworld_origin = yes # check here for situations like systems changing hands so we don't need to know which side is frameworld
#		}
#
#		# move value to old value
#		if = {
#			limit = {
#				is_variable_set = giga_frameworld_outpost_count
#			}
#			set_variable = {
#				which = giga_frameworld_outpost_count_old
#				value = giga_frameworld_outpost_count
#			}
#		}
#		# or set it to 0 if it wasn't set before
#		else = {
#			set_variable = {
#				which = giga_frameworld_outpost_count_old
#				value = 0
#			}
#		}
#
#		# count up our number of outposts - shame we don't seem to be able to export this
#		set_variable = {
#			which = giga_frameworld_outpost_count
#			value = 0
#		}
#		every_owned_megastructure = {
#			limit = {
#				is_active_frameworld_outpost = yes
#			}
#			prev = {
#				change_variable = {
#					which = giga_frameworld_outpost_count
#					value = 1
#				}
#			}
#		}
#
#		# if the new and old numbers don't match, change things
#		if = {
#			limit = {
#				not = {
#					check_variable = {
#						which = giga_frameworld_outpost_count
#						value = giga_frameworld_outpost_count_old
#					}
#				}
#			}
#
#			if = {
#				limit = {
#					check_variable = {
#						which = giga_frameworld_outpost_count
#						value > 0
#					}
#					not = {
#						any_situation = {
#							is_situation_type = giga_situation_frameworld_outposts
#						}
#					}
#				}
#				random_owned_planet = {
#					limit = {
#						has_planet_flag = giga_frameworld@prev
#					}
#
#					prev = {
#						start_situation = {
#							type = giga_situation_frameworld_outposts
#							target = prev
#						}
#					}
#				}
#			}
#
#			# update outpost score
#
#			# set temp variable to -50 * old outposts
#			set_variable = {
#				which = frameworld_outpost_score
#				value = giga_frameworld_outpost_count_old
#			}
#			multiply_variable = {
#				which = frameworld_outpost_score
#				value = -50
#			}
#
#			# subtract old score
#			add_victory_score = {
#				source = giga_frameworld_outpost_score
#				score = frameworld_outpost_score
#			}
#
#			# set temp variable to 50 * current outposts
#			set_variable = {
#				which = frameworld_outpost_score
#				value = giga_frameworld_outpost_count
#			}
#			multiply_variable = {
#				which = frameworld_outpost_score
#				value = 50
#			}
#
#			# add new score
#			add_victory_score = {
#				source = giga_frameworld_outpost_score
#				score = frameworld_outpost_score
#			}
#		}
#
#	}
#}

###############################################################################################################

giga_frameworld_set_outpost_flags = {
	set_planet_flag = giga_frameworld_outpost
	giga_set_has_mega_flag = yes

	# if this is a world which should not be terravored by default
	if = {
		limit = {
			or = {
				has_modifier = holy_planet

				is_planet_class = pc_relic # dunno if this is even viable but just in case

				# rare resources
				has_resource = { type = minor_artifacts amount > 0 }
				has_resource = { type = sr_dark_matter amount > 0 }
				has_resource = { type = sr_zro amount > 0 }
				has_resource = { type = nanites amount > 0 }
			}
		}
		set_planet_flag = giga_frameworld_outpost_stripmine_mode_deny

	}
	if = {
		limit = {
			has_modifier = holy_planet
		}
		set_planet_flag = giga_frameworld_outpost_nanite_mode_deny
	}
}

giga_frameworld_clear_outpost_flags = {
	remove_planet_flag = giga_frameworld_outpost
	giga_clear_has_mega_flag = yes

	if = {
		limit = {
			has_planet_flag = giga_frameworld_outpost_stripmine_mode_deny
		}
		remove_planet_flag = giga_frameworld_outpost_stripmine_mode_deny
	}
	if = {
		limit = {
			has_planet_flag = giga_frameworld_outpost_nanite_mode_deny
		}
		remove_planet_flag = giga_frameworld_outpostnanite_mode_deny
	}
	clear_variable = giga_frameworld_outpost_pops
}

#giga_frameworld_remove_outpost_wrecks = {
#	solar_system = {
#		every_system_megastructure = {
#			limit = {
#				exists = planet
#				planet = {
#					is_same_value = prevprevprev
#				}
#
#				OR = {
#					is_megastructure_type = frameworld_outpost_wreck_0
#					is_megastructure_type = frameworld_outpost_wreck_1
#				}
#			}
#			delete_megastructure = this
#		}
#	}
#}

# this = megastructure
#giga_frameworld_wreck_outpost = {
#	[[WHO] set_owner = $WHO$ ]
#	upgrade_megastructure_to = frameworld_outpost_wreck_0
#	finish_upgrade = yes
#	[[CULTURE] set_graphical_culture = $CULTURE$ ]
#
#	[[NOCOLONY]]
#	[[!NOCOLONY]
#	planet = {
#		#remove_all_buildings = yes
#		remove_building = building_frameworld_outpost
#		every_owned_pop = {
#			kill_pop = yes
#		}
#		destroy_colony = yes
#	}
#	]
#}

giga_frameworld_create_outpost = {
	$planet$ = {
		save_event_target_as = outpost_planet
		giga_frameworld_set_outpost_flags = yes
	}
	$owner$ = { save_event_target_as = outpost_owner }

	create_fleet = {
		effect = {
			set_owner = event_target:outpost_owner
			create_ship = {
				random_existing_design = frameworld_planetary_outpost
				effect = {
					set_disable_at_health = 0.05
					set_name = {
						key = frameworld_planetary_outpost_name
						variable_string = "\\[outpost_planet.GetName]"
					}
				}
			}
			save_event_target_as = target_orbital
			fleet = {
				set_location = {
					target = event_target:outpost_planet
				}
				set_fleet_flag = @giga_frameworld_outpost_fleet_flag
				set_name = {
					key = frameworld_planetary_outpost_name
					variable_string = "\\[outpost_planet.GetName]"
				}
			}
		}
	}

	$planet$ = {
		giga_frameworld_outpost_set_planet_class = yes
	}
}

# this = planet
#giga_frameworld_create_outpost = {
#	[[WHO] if = { limit = { $WHO$ = { giga_has_frameworld_origin = yes } } ]
#
#	giga_frameworld_set_outpost_flags = yes
#	giga_frameworld_remove_outpost_wrecks = yes
#
#	solar_system = {
#		# create fresh outpost
#		spawn_megastructure = {
#			type = frameworld_outpost_0
#			owner = $WHO$
#			planet = prev
#			graphical_culture = $WHO$
#		}
#
#		# promote or demote to do system icons
#		giga_frameworld_update_system_icon = yes
#	}
#
#	giga_frameworld_create_outpost_holder_colony = [[RESETTLED] { RESETTLED = yes }] [[!RESETTLED] yes ]
#
#	[[WHO] } ]
#}

# this = planet
#giga_frameworld_create_outpost_holder_colony = {
#	giga_frameworld_create_outpost_country = yes
#
#	# god damn this bug where it eats the sector sucks, save whether we have a sector and a governor
#	#if = {
#	#	limit = {
#	#		exists = space_owner.capital_scope
#	#	}
#	#
#	#	space_owner.capital_scope = {
#	#		if = {
#	#			limit = {
#	#				exists = sector
#	#				exists = prev.sector
#	#				sector = {
#	#					is_same_value = prevprev.sector
#	#				}
#	#			}
#	#			set_planet_flag = frameworld_reassign_sector
#	#
#	#			if = {
#	#				limit = {
#	#					exists = sector.sector_capital.leader
#	#				}
#	#				sector.sector_capital.leader = {
#	#					save_event_target_as = frameworld_leader
#	#				}
#	#				set_planet_flag = frameworld_reassign_leader
#	#			}
#	#		}
#	#	}
#	#}
#
#	# count up cities
#	set_variable = {
#		which = frameworld_outpost_cities
#		value = value:giga_num_districts|district|district_city|
#	}
#	change_variable = {
#		which = frameworld_outpost_cities
#		value = value:giga_num_districts|district|district_hive|
#	}
#	change_variable = {
#		which = frameworld_outpost_cities
#		value = value:giga_num_districts|district|district_nexus|
#	}
#	change_variable = {
#		which = frameworld_outpost_cities
#		value = value:giga_num_districts|district|district_city_katzen|
#	}
#	change_variable = {
#		which = frameworld_outpost_cities
#		value = value:giga_num_districts|district|district_flusion_city|
#	}
#
#	add_modifier = {
#		modifier = frameworld_building_wreck_fix
#		days = 3
#	}
#
#	# do the actual colony lol
#	[[!RESETTLED]
#		create_colony = {
#			owner = space_owner
#			species = event_target:frameworld_outpost_species
#		}
#		create_pop = {
#			species = event_target:frameworld_outpost_species
#		}
#		# fire colonised actions for the frameworld nation
#		#fire_on_action = {
#		#	on_action = on_colonized
#		#}
#	]
#
#	# 3.6 means we need a pop on the planet or the colony gets deleted a day later
#	# even if the country type is allowed to have pop-less colonies... BUT only on habitable worlds...
#	every_owned_pop = {
#		kill_pop = yes
#	}
#	create_pop = {
#		species = event_target:frameworld_outpost_species
#	}
#
#	set_owner = event_target:frameworld_outpost_country
#	set_controller = event_target:frameworld_outpost_country
#	#remove_all_buildings = yes
#	add_building = building_frameworld_outpost
#	set_colony_type = col_frameworld_planetary_outpost
#
#	# fire colony started event for the OUTPOST nation, for compat stuff
#	fire_on_action = {
#		on_action = on_colonization_started
#	}
#
#	# add placeholder cities
#	while = {
#		count = frameworld_outpost_cities
#		add_district = district_giga_frameworld_outpost
#	}
#	clear_variable = frameworld_outpost_cities
#
#	validate_planet_buildings_and_districts = yes
#
#	remove_modifier = frameworld_building_wreck_fix
#
#	# fix the sector if it would've collapsed - most of this damn effect is working around the bug
#	#if = {
#	#	limit = {
#	#		exists = space_owner.capital_scope
#	#	}
#	#
#	#	space_owner.capital_scope = {
#	#		if = {
#	#			limit = {
#	#				has_planet_flag = frameworld_reassign_sector
#	#			}
#	#			set_sector_capital = yes
#	#			remove_planet_flag = frameworld_reassign_sector
#	#
#	#			if = {
#	#				limit = {
#	#					has_planet_flag = frameworld_reassign_leader
#	#				}
#	#				assign_leader = event_target:frameworld_leader
#	#				remove_planet_flag = frameworld_reassign_leader
#	#			}
#	#		}
#	#	}
#	#}
#}

#giga_frameworld_create_outpost_country = {
#	# create species first
#	if = {
#		limit = {
#			not = {
#				exists = event_target:frameworld_outpost_species
#			}
#		}
#
#		create_species = {
#			class = MACHINE
#			name = "NAME_frameworld_outpost_species"
#
#			portrait = robot1
#
#			traits = {
#				trait = trait_mechanical
#			}
#
#			effect = {
#				save_global_event_target_as = frameworld_outpost_species
#			}
#		}
#	}
#
#	# then the country, independently so we get the species in loaded saves
#	if = {
#		limit = {
#			not = {
#				exists = event_target:frameworld_outpost_country
#				#any_country = {
#				#	is_country_type = frameworld_outpost_country_type
#				#}
#			}
#		}
#
#		create_country = {
#			type = frameworld_outpost_country_type
#
#			species = event_target:frameworld_outpost_species
#
#			name = "NAME_frameworld_outpost_country"
#
#			flag = {
#				icon = {
#					category = "special"
#					file = "frameworld_outpost.dds"
#				}
#				background= {
#					category = "backgrounds"
#					file = "circle.dds"
#				}
#				colors={
#					"grey"
#					"dark_grey"
#					"null"
#					"null"
#				}
#			}
#
#			effect = {
#				save_global_event_target_as = frameworld_outpost_country
#
#				create_leader = {
#					name = "Outpost Leader"
#					class = governor
#					species = this
#					skill = 1
#					immortal = yes
#					traits = {
#						trait = leader_trait_ruler_hive_mind # just one which doesn't affect output
#					}
#				}
#
#				set_leader = last_created_leader
#
#				set_faction_hostility = {
#					set_friendly = yes
#				}
#
#				set_graphical_culture = ai_01
#			}
#		}
#	}
#}

# hand over any planetary outposts to the system's owner
# scope = system
#giga_frameworld_change_outposts_ownership = {
#	every_system_megastructure = {
#		limit = {
#			is_frameworld_outpost = yes
#			exists = owner
#			owner = {
#				not = {
#					is_same_value = prevprev.owner
#				}
#			}
#		}
#
#		set_owner = prev.owner
#	}
#}

# hand over ANY megas owned by the outpost country to system owner
# scope = system
#giga_frameworld_fix_outpost_country_megas = {
#	if = {
#		limit = {
#			exists = owner
#		}
#
#		every_system_megastructure = {
#			limit = {
#				exists = owner
#				owner = {
#					is_same_empire = event_target:frameworld_outpost_country
#				}
#			}
#
#			set_owner = solar_system.owner
#		}
#	}
#}

# promote or demote outposts to have the system icon so there's exactly one in system
# scope = system
#giga_frameworld_update_system_icon = {
#	if = {
#		limit = {
#			any_system_megastructure = {
#				is_megastructure_type = frameworld_outpost_icon
#			}
#		}
#		# if there is an icon and there aren't outposts, remove it
#		if = {
#			limit = {
#				not = {
#					any_fleet_in_system = {
#						has_fleet_flag = @giga_frameworld_outpost_fleet_flag
#					}
#				}
#			}
#
#			every_system_megastructure = {
#				limit = {
#					is_megastructure_type = frameworld_outpost_icon
#				}
#				remove_megastructure = this
#			}
#		}
#	}
#	else = {
#		# if there isn't an icon and there are outposts, add one
#		if = {
#			limit = {
#				any_fleet_in_system = {
#					has_fleet_flag = @giga_frameworld_outpost_fleet_flag
#				}
#			}
#
#			spawn_megastructure = {
#				type = frameworld_outpost_icon
#				#owner = space_owner
#			}
#		}
#	}
#}

#giga_frameworld_update_system_icon = {
#	# need to promote
#	if = {
#		limit = {
#			any_system_megastructure = {
#				is_megastructure_type = frameworld_outpost_0
#			}
#			not = {
#				any_system_megastructure = {
#					is_megastructure_type = frameworld_outpost_marked_0
#				}
#			}
#		}
#		# replace one normal with marked
#		random_system_megastructure = {
#			limit = {
#				is_megastructure_type = frameworld_outpost_0
#			}
#
#			#solar_system = {
#			#	spawn_megastructure = {
#			#		type = frameworld_outpost_marked_0
#			#		owner = prev.owner
#			#		graphical_culture = prev
#			#		planet = prev.planet
#			#	}
#			#}
#			#delete_megastructure = this
#
#			upgrade_megastructure_to = frameworld_outpost_marked_0
#			finish_upgrade = yes
#		}
#	}
#	# need to demote
#	while = {
#		limit = {
#			count_system_megastructure = {
#				count >= 2
#				limit = {
#					is_megastructure_type = frameworld_outpost_marked_0
#				}
#			}
#		}
#
#		# replace one marked with normal
#		random_system_megastructure = {
#			limit = {
#				is_megastructure_type = frameworld_outpost_marked_0
#			}
#
#			#solar_system = {
#			#	spawn_megastructure = {
#			#		type = frameworld_outpost_0
#			#		owner = prev.owner
#			#		graphical_culture = prev
#			#		planet = prev.planet
#			#	}
#			#}
#			#delete_megastructure = this
#
#			upgrade_megastructure_to = frameworld_outpost_0
#			finish_upgrade = yes
#		}
#	}
#}

@outpost_planet_modified = giga_frameworld_outpost_planet_type_modified
@outpost_planet_type_species = giga_frameworld_outpost_planet_type_species
giga_frameworld_outpost_set_planet_class = {
	if = {
		limit = {
			not = {
				has_planet_flag = giga_frameworld_outpost_planet_type
			}
		}

		set_planet_flag = @outpost_planet_modified

		save_event_target_as = outpost_planet
		if = {
			# if no holder species exists
			limit = {
				not = {
					any_galaxy_species = {
						has_species_flag = @outpost_planet_type_species
						ideal_planet_class = event_target:outpost_planet
					}
				}
			}

			# create a holder species
			create_species = {
				name = "giga_frameworld_outpost_planet_species"
				class = random_non_machine

				homeworld = event_target:outpost_planet

				traits = {
					ideal_planet_class = event_target:outpost_planet
				}
				effect = {
					set_species_flag = @outpost_planet_type_species
					# save it as our found species
					save_event_target_as = species
				}
			}

		}
		else = {
			# if one does exist, then get it
			random_galaxy_species = {
				limit = {
					has_species_flag = @outpost_planet_type_species
					ideal_planet_class = event_target:outpost_planet
				}

				# save it for later use
				save_event_target_as = species
			}
		}

		# set flag and associate species for planet type lookup later
		set_planet_flag = giga_frameworld_outpost_planet_type
		set_planet_flag = giga_frameworld_outpost_planet_type@event_target:species

		if = {
			limit = {
				can_have_habitable_deposits = yes
			}
			set_planet_flag = giga_frameworld_outpost_planet_type_edible
		}

		add_deposit = d_frameworld_outpost_mechanics

		switch = {
			trigger = is_planet_class

			pc_relic = { set_planet_flag = frameworld_outpost_pc_relic }
			pc_giga_planetary_computer = { set_planet_flag = frameworld_outpost_pc_giga_planetary_computer }
			pc_habitable_gas_giant = { set_planet_flag = frameworld_outpost_pc_habitable_gas_giant }
			pc_flusion_gaia_ecu = { set_planet_flag = frameworld_outpost_pc_flusion_gaia_ecu}
			pc_ringworld_habitable = { set_planet_flag = frameworld_outpost_pc_ringworld_habitable}
			pc_ringworld_machine = { set_planet_flag = frameworld_outpost_pc_ringworld_machine}
			pc_ringworld_hive = { set_planet_flag = frameworld_outpost_pc_ringworld_hive}
			pc_ringworld_city = { set_planet_flag = frameworld_outpost_pc_ringworld_city}
			pc_interstellar_ringworld_habitable = { set_planet_flag = frameworld_outpost_pc_interstellar_ringworld_habitable}
			pc_giga_penrose_habitable = { set_planet_flag = frameworld_outpost_pc_giga_penrose_habitable}
		}

		switch = {
			trigger = uses_district_set

			machine_world = { set_planet_flag = frameworld_outpost_machine_world}
			hive_world = { set_planet_flag = frameworld_outpost_hive_world}
			city_world = { set_planet_flag = frameworld_outpost_city_world}
			shattered_ring_world = { set_planet_flag = frameworld_outpost_shattered_ring_world}
		}

		# set planet type
		if = {
			limit = {
				is_ringworld = yes
			}
			change_pc = {
				class = pc_giga_frameworld_outpost_ringworld
				inherit_entity = yes
			}
		}
		else_if = {
			limit = {
				is_artificial = yes
			}
			change_pc = {
				class = pc_giga_frameworld_outpost_artificial
				inherit_entity = yes
			}
		}
		else = {
			change_pc = {
				class = pc_giga_frameworld_outpost_planet
				inherit_entity = yes
			}
		}

		add_modifier = {
			modifier = frameworld_outpost_planet
			clear_on_owner_change = yes
		}

		trigger_megastructure_icon = yes
		cancel_terraformation = yes

		remove_planet_flag = @outpost_planet_modified
	}
}

giga_frameworld_outpost_restore_planet_class = {
	if = {
		limit = {
			has_planet_flag = giga_frameworld_outpost_planet_type
		}

		set_planet_flag = @outpost_planet_modified

		save_event_target_as = outpost_planet

		# get matching holder species to be able to reference planet class
		# we are assuming one has been created by the "on" effect
		random_galaxy_species = {
			limit = {
				has_species_flag = @outpost_planet_type_species
				event_target:outpost_planet = {
					has_planet_flag = giga_frameworld_outpost_planet_type@prev
				}
			}
			save_event_target_as = species
		}

		remove_planet_flag = giga_frameworld_outpost_planet_type
		remove_planet_flag = giga_frameworld_outpost_planet_type@event_target:species

		remove_planet_flag = giga_frameworld_outpost_planet_type_edible

		remove_deposit = d_frameworld_outpost_mechanics

		change_pc = {
			class = event_target:species
			inherit_entity = yes
		}

		remove_modifier = frameworld_outpost_planet

		trigger_megastructure_icon = no # complains but seems to actually work

		remove_planet_flag = @outpost_planet_modified
	}
}

###############################################################################################################

giga_frameworld_remove_asteroid = {
	# remove mining stations etc
	if = { limit = { has_orbital_station = yes } orbital_station = { dismantle = yes } }
	
	# clear colony
	if = { limit = { is_colony = yes } destroy_colony = yes }

	#remove_planet = yes # seems removing here causes a crash, let's mark it unusable and change class instead
	# set_planet_flag = megastructure
	# giga_set_has_mega_flag = yes
	# change_pc = pc_giga_empty_space_asteroid
	# clear_planet_modifiers = yes
	# clear_deposits = yes
	# set_name = "pc_giga_empty_space"

	solar_system = {
		every_fleet_in_system = {
			limit = {
				any_owned_ship = {
					is_ship_class = shipclass_constructor
				}
				controller = {
					is_ai = yes
				}
				is_fleet_idle = yes
			}

			set_fleet_flag = giga_remove_planet
			every_owned_ship = {
				set_disabled = yes
			}
		}
	}

	remove_planet = yes

	solar_system = {
		every_fleet_in_system = {
			limit = {
				has_fleet_flag = giga_remove_planet
			}
			every_owned_ship = {
				set_disabled = no
			}
			remove_fleet_flag = giga_remove_planet
		}
	}
}

giga_frameworld_start_ai_build_cooldown = {
	owner = {
		add_modifier = {
			modifier = frameworld_ai_build_cooldown
			days = 33
		}
	}
}

###############################################################################################################

giga_frameworld_apply_expanded_maintenance_modifier = {
	if = {
		limit = {
			giga_frameworld_has_expanded_maintenance_modifier = no
		}
		if = {
			limit = {
				exists = owner
				owner = { is_gestalt = yes }
			}
			add_modifier = {
				modifier = frameworld_expanded_maintenance_protocol_gestalt
				clear_on_owner_change = yes
			}
		}
		else = {
			add_modifier = {
				modifier = frameworld_expanded_maintenance_protocol
				clear_on_owner_change = yes
			}
		}
	}
	hidden_effect = {
		if = {
			limit = {
				not = {
					has_deposit = d_frameworld_expanded_maintenance_protocol
				}
			}
			add_deposit = d_frameworld_expanded_maintenance_protocol
		}
		check_planet_employment = yes
	}
}

giga_frameworld_remove_expanded_maintenance_modifier = {
	if = {
		limit = {
			has_modifier = frameworld_expanded_maintenance_protocol
		}
		remove_modifier = frameworld_expanded_maintenance_protocol
	}
	else_if = {
		limit = {
			has_modifier = frameworld_expanded_maintenance_protocol_gestalt
		}
		remove_modifier = frameworld_expanded_maintenance_protocol_gestalt
	}

	hidden_effect = {
		remove_deposit = d_frameworld_expanded_maintenance_protocol
		check_planet_employment = yes
	}
}

giga_frameworld_apply_ai_artisan_modifier = {
	
	# adjust up and down once per month
	if = {
		limit = {
			planet_resource_compare = {
				resource = consumer_goods
				value > 100
			}
		}
		change_variable = {
			which = frameworld_ai_artisan_modifier
			value = 1
		}
	}
	else_if = {
		limit = {
			planet_resource_compare = {
				resource = consumer_goods
				value < 0
			}
		}
		change_variable = {
			which = frameworld_ai_artisan_modifier
			value = -1
		}
	}
	
	# make sure we don't send the variable negative by being in deficit
	if = {
		limit = {
			check_variable = {
				which = frameworld_ai_artisan_modifier
				value < 0
			}
		}
		set_variable = {
			which = frameworld_ai_artisan_modifier
			value = 0
		}
	}
	
	# apply the modifier
	remove_modifier = frameworld_ai_artisans
	if = {
		limit = {
			check_variable = {
				which = frameworld_ai_artisan_modifier
				value > 0
			}
		}
		
		add_modifier = {
			modifier = frameworld_ai_artisans
			multiplier = this.frameworld_ai_artisan_modifier
		}
	}
}

###############################################################################################################

giga_frameworld_outpost_pops_and_message = {
	from.planet = {
		set_variable = {
			which = giga_frameworld_outpost_pops
			value = value:giga_frameworld_outpost_pops|WHO|prev|WHERE|this|
		}
	}

	if = {
		limit = {
			giga_has_frameworld_origin = yes
			from.planet = {
				check_variable = {
					which = giga_frameworld_outpost_pops
					value > 0
				}
			}
		}

		random_owned_planet = {
			limit = { has_planet_flag = giga_frameworld@prev }
			save_event_target_as = giga_frameworld
		}

		event_target:giga_frameworld = {
			create_pop = {
				count = from.planet.giga_frameworld_outpost_pops
				species = event_target:outpost_owner.species
			}
		}

		if = {
			limit = {
				from.planet = {
					check_variable = {
						which = giga_frameworld_outpost_pops
						value = 1
					}
				}
			}

			# SINGULAR

			create_message = {
				type = GIGA_FRAMEWORLD_MESSAGE_TYPE_OUTPOST_POPS
				localization = GIGA_FRAMEWORLD_MESSAGE_OUTPOST_POPS
				days = 30
				target = from.planet
	
				variable = {
					type = name
					localization = PLANET
					scope = from.planet
				}
				variable = {
					type = name
					localization = FRAME
					scope = event_target:giga_frameworld
				}
				variable = {
					type = name
					localization = SPECIES
					scope = event_target:outpost_owner.species
				}
			}
		}
		else = {
			# PLURAL

			create_message = {
				type = GIGA_FRAMEWORLD_MESSAGE_TYPE_OUTPOST_POPS
				localization = GIGA_FRAMEWORLD_MESSAGE_OUTPOST_POPS_PLURAL
				days = 30
				target = from.planet
	
				variable = {
					type = name
					localization = PLANET
					scope = from.planet
				}
				variable = {
					type = name
					localization = FRAME
					scope = event_target:giga_frameworld
				}
				variable = {
					type = name
					localization = SPECIES
					scope = event_target:outpost_owner.species
				}
				variable = {
					type = variable
					varname = giga_frameworld_outpost_pops
					localization = COUNT
					scope = from.planet
				}
			}
		}
	}
}

giga_frameworld_update_maginot_deposits = {
	set_update_modifiers_batch = begin

	# SHIELD DEPOSITS ######################################################
	while = {
		count = value:giga_frameworld_remove_max_maginot_shield_districts
		remove_deposit = d_frameworld_maginot_max_shields
	}
	while = {
		count = value:giga_frameworld_add_max_maginot_shield_districts
		add_deposit = d_frameworld_maginot_max_shields
	}

	# GUN DEPOSITS ######################################################
	while = {
		count = value:giga_frameworld_remove_max_maginot_gun_districts
		remove_deposit = d_frameworld_maginot_max_guns
	}
	while = {
		count = value:giga_frameworld_add_max_maginot_gun_districts
		add_deposit = d_frameworld_maginot_max_guns
	}

	set_update_modifiers_batch = end
}
giga_frameworld_start_maginot_shield = {
	change_variable = {
		which = frameworld_building_maginot_shield
		value = 1
	}
	giga_frameworld_update_maginot_deposits = yes
}
giga_frameworld_stop_maginot_shield = {
	change_variable = {
		which = frameworld_building_maginot_shield
		value = -1
	}
	giga_frameworld_update_maginot_deposits = yes
}
giga_frameworld_start_maginot_gun = {
	change_variable = {
		which = frameworld_building_maginot_gun
		value = 1
	}
	giga_frameworld_update_maginot_deposits = yes
}
giga_frameworld_stop_maginot_gun = {
	change_variable = {
		which = frameworld_building_maginot_gun
		value = -1
	}
	giga_frameworld_update_maginot_deposits = yes
}

# update frameworld entity with graphical culture fallback
giga_frameworld_update_entity_with_fallback = {
	[[WHO] $WHO$ = { save_event_target_as = giga_frame_country } ]
	[[!WHO] owner = { save_event_target_as = giga_frame_country } ]

	if = {
		limit = {
			# cwtools please, be reasonable here
			#$WHO|owner$ = {
			event_target:giga_frame_country = {
				NOR = {
					graphical_culture = aquatic_01
					graphical_culture = arthropoid_01
					graphical_culture = avian_01
					graphical_culture = fungoid_01
					graphical_culture = humanoid_01
					graphical_culture = mammalian_01
					graphical_culture = molluscoid_01
					graphical_culture = nemesis_01
					graphical_culture = plantoid_01
					graphical_culture = reptilian_01
					graphical_culture = lithoid_01
					graphical_culture = necroid_01
					graphical_culture = toxoid_01
					graphical_culture = cybernetics_01
					graphical_culture = synthetics_01

				}
			}
		}
		giga_frameworld_update_entity = { CULTURE = mammalian_01 }
	}
	else = {
		giga_frameworld_update_entity = { CULTURE = event_target:giga_frame_country }
	}
}

###############################################################################################################
###############################################################################################################
#          AUDIT
###############################################################################################################
###############################################################################################################

frameworld_conduct_audit_check_ai = {
	if = {
		limit = {
			exists = owner
			owner = {
				is_ai = yes
			}
		}
		frameworld_conduct_audit = yes
	}
}

frameworld_conduct_audit = {
	# update megastructure cost variable
	hidden_effect = {
		if = {
			limit = {
				exists = owner
			}
			owner = {
				# start with 1 for our multiplier
				set_variable = {
					which = giga_frameworld_megastructure_cost
					value = 1
				}
				set_variable = {
					which = giga_frameworld_megastructure_cost_mod
					value = 0
				}
				# get the base megas cost mult
				export_modifier_to_variable = {
					modifier = megastructures_cost_mult
					variable = giga_frameworld_megastructure_cost_mod
				}
				change_variable = {
					which = giga_frameworld_megastructure_cost
					value = giga_frameworld_megastructure_cost_mod
				}
			}
		}
	}
	
	### buildings
	if = { limit = { frameworld_audit_foundry1 = yes } frameworld_audit_foundry1_effect = yes }
	else_if = { limit = { frameworld_audit_foundry2 = yes } frameworld_audit_foundry2_effect = yes }
	
	else_if = { limit = { frameworld_audit_energygrid1 = yes } frameworld_audit_energygrid1_effect = yes }
	else_if = { limit = { frameworld_audit_mineralhub1 = yes } frameworld_audit_mineralhub1_effect = yes }
	else_if = { limit = { frameworld_audit_energygrid2 = yes } frameworld_audit_energygrid2_effect = yes }
	else_if = { limit = { frameworld_audit_mineralhub2 = yes } frameworld_audit_mineralhub2_effect = yes }
	
	else_if = { limit = { frameworld_audit_crime = yes } frameworld_audit_crime_effect = yes }
	
	else_if = { limit = { frameworld_audit_sanctuary1 = yes } frameworld_audit_sanctuary1_effect = yes }
	else_if = { limit = { frameworld_audit_sanctuary2 = yes } frameworld_audit_sanctuary2_effect = yes }
	else_if = { limit = { frameworld_audit_sanctuary3 = yes } frameworld_audit_sanctuary3_effect = yes }
	
	else_if = { limit = { frameworld_audit_supercomputer = yes } frameworld_audit_supercomputer_effect = yes }
	
	else_if = { limit = { frameworld_audit_refinery = yes } frameworld_audit_refinery_effect = yes }
	
	else_if = { limit = { frameworld_audit_science2 = yes } frameworld_audit_science2_effect = yes }
	else_if = { limit = { frameworld_audit_science3 = yes } frameworld_audit_science3_effect = yes }
	else_if = { limit = { frameworld_audit_science1 = yes } frameworld_audit_science1_effect = yes } # 1 after 2 and 3 because it costs gas upkeep
	
	else_if = { limit = { frameworld_audit_unity2 = yes } frameworld_audit_unity2_effect = yes }
	else_if = { limit = { frameworld_audit_unity3 = yes } frameworld_audit_unity3_effect = yes }
	else_if = { limit = { frameworld_audit_unity1 = yes } frameworld_audit_unity1_effect = yes } # 1 after 2 and 3 because it costs crystal upkeep

	else_if = { limit = { frameworld_audit_trade1 = yes } frameworld_audit_trade1_effect = yes }
	else_if = { limit = { frameworld_audit_trade2 = yes } frameworld_audit_trade2_effect = yes }
	
	else_if = { limit = { frameworld_audit_hydroponics = yes } frameworld_audit_hydroponics_effect = yes }
	
	### upgrades
	if = { limit = { frameworld_audit_upgrade_advanced_city  = yes } frameworld_audit_upgrade_advanced_city_effect = yes }
	else_if = { limit = { frameworld_audit_upgrade_advanced_industrial = yes } frameworld_audit_upgrade_advanced_industrial_effect = yes }
	else_if = { limit = { frameworld_audit_upgrade_advanced_sanctuary  = yes } frameworld_audit_upgrade_advanced_sanctuary_effect = yes }
	
	else_if = { limit = { frameworld_audit_upgrade_gaia  = yes } frameworld_audit_upgrade_gaia_effect = yes }
	
	else_if = { limit = { frameworld_audit_upgrade_penrose = yes } frameworld_audit_upgrade_penrose_effect = yes }
	else_if = { limit = { frameworld_audit_upgrade_decompressor  = yes } frameworld_audit_upgrade_decompressor_effect = yes }
	
	else_if = { limit = { frameworld_audit_upgrade_expanded_infrastructure  = yes } frameworld_audit_upgrade_expanded_infrastructure_effect = yes }
	else_if = { limit = { frameworld_audit_upgrade_computing_complex  = yes } frameworld_audit_upgrade_computing_complex_effect = yes }
	else_if = { limit = { frameworld_audit_upgrade_maginot  = yes } frameworld_audit_upgrade_maginot = yes }
	
	### count up industrial districts
	# hidden_effect = {
	# 	export_trigger_value_to_variable = {
	# 		trigger = num_districts
	# 		parameters = {
	# 			type = district_giga_frameworld_industrial
	# 		}
	# 		variable = frameworld_industrial_districts
	# 	}
	# 	export_trigger_value_to_variable = {
	# 		trigger = num_districts
	# 		parameters = {
	# 			type = district_giga_frameworld_industrial_advanced
	# 		}
	# 		variable = frameworld_advanced_industrial_districts
	# 	}
	# 	change_variable = {
	# 		which = frameworld_industrial_districts
	# 		value = frameworld_advanced_industrial_districts
	# 	}
		
	# 	### count up sceince districts
	# 	export_trigger_value_to_variable = {
	# 		trigger = num_districts
	# 		parameters = {
	# 			type = district_giga_frameworld_science
	# 		}
	# 		variable = frameworld_science_districts
	# 	}
		
	# 	### count up unity districts
	# 	export_trigger_value_to_variable = {
	# 		trigger = num_districts
	# 		parameters = {
	# 			type = district_giga_frameworld_simulation
	# 		}
	# 		variable = frameworld_simulation_districts
	# 	}
	# }
}

###############################################################################################################
### buildings

frameworld_audit_foundry1_effect = {
	owner = {
		add_resource = {
			minerals = -600
			volatile_motes = -100
		}
	}
	
	remove_building = building_foundry_1
	add_building = building_foundry_2
}

frameworld_audit_foundry2_effect = {
	owner = {
		add_resource = {
			minerals = -800
			volatile_motes = -200
		}
	}
	
	remove_building = building_foundry_2
	add_building = building_foundry_3
}

frameworld_audit_crime_effect = {
	remove_building = building_sentinel_posts
	remove_building = building_sentinel_posts
	add_district = district_giga_frameworld_anticrime
}

frameworld_audit_science1_effect = {
	owner = {
		add_resource = {
			exotic_gases = -50
		}
	}
	
	remove_building = building_research_lab_1
	remove_building = building_research_lab_1
	add_district = district_giga_frameworld_science
}

frameworld_audit_science2_effect = {
	remove_building = building_research_lab_2
	add_district = district_giga_frameworld_science
}

frameworld_audit_science3_effect = {
	remove_building = building_research_lab_3
	add_district = district_giga_frameworld_science
	add_district = district_giga_frameworld_science
}

frameworld_audit_trade1_effect = {
	owner = {
		add_resource = {
			rare_crystals = -50
		}
	}

	remove_building = building_commercial_zone
	remove_building = building_commercial_zone
	add_district = district_giga_frameworld_trade
}

frameworld_audit_trade2_effect = {
	remove_building = building_commercial_megaplex
	add_district = district_giga_frameworld_trade
}

frameworld_audit_unity1_effect = {
	owner = {
		add_resource = {
			rare_crystals = -50
		}
	}

	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		remove_building = building_uplink_node
		remove_building = building_uplink_node
		add_district = district_giga_frameworld_simulation
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		remove_building = building_hive_node
		remove_building = building_hive_node
		add_district = district_giga_frameworld_synapse
	}
	else = {
		remove_building = building_bureaucratic_1
		remove_building = building_bureaucratic_1
		add_district = district_giga_frameworld_administrative
	}
}

frameworld_audit_unity2_effect = {
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		remove_building = building_network_junction
		add_district = district_giga_frameworld_simulation
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		remove_building = building_hive_cluster
		add_district = district_giga_frameworld_synapse
	}
	else = {
		remove_building = building_bureaucratic_2
		add_district = district_giga_frameworld_administrative
	}
}

frameworld_audit_unity3_effect = {
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		remove_building = building_system_conflux
		add_district = district_giga_frameworld_simulation
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		remove_building = building_hive_confluence
		add_district = district_giga_frameworld_synapse
		add_district = district_giga_frameworld_synapse
	}
	else = {
		remove_building = building_bureaucratic_3
		add_district = district_giga_frameworld_administrative
		add_district = district_giga_frameworld_administrative
	}
}

frameworld_audit_energygrid1_effect = {
	owner = {
		add_resource = {
			minerals = -200
		}
		if ={
			limit = {
				is_machine_empire = yes
			}
			add_resource = {
				minerals = -100
				alloys = -100
			}
		}
	}
	
	frameworld_audit_remove_housing_building = yes
	add_building = building_energy_grid
}

frameworld_audit_energygrid2_effect = {
	owner = {
		add_resource = {
			minerals = -600
			exotic_gases = -50
		}
		if ={
			limit = {
				is_machine_empire = yes
			}
			add_resource = {
				minerals = -300
				alloys = -150
			}
		}
	}
	
	remove_building = building_energy_grid
	add_building = building_energy_nexus
}

frameworld_audit_mineralhub1_effect = {
	owner = {
		add_resource = {
			minerals = -200
		}
		if ={
			limit = {
				is_machine_empire = yes
			}
			add_resource = {
				minerals = -100
				alloys = -100
			}
		}
	}
	
	frameworld_audit_remove_housing_building = yes
	add_building = building_mineral_purification_plant
}

frameworld_audit_mineralhub2_effect = {
	owner = {
		add_resource = {
			minerals = -600
			volatile_motes = -50
		}
		if ={
			limit = {
				is_machine_empire = yes
			}
			add_resource = {
				minerals = -300
				alloys = -150
			}
		}
	}
	
	remove_building = building_mineral_purification_plant
	add_building = building_mineral_purification_hub
}

frameworld_audit_supercomputer_effect = {
	owner = {
		add_resource = {
			minerals = -600
		}
	}
	
	frameworld_audit_remove_housing_building = yes
	if = {
		limit = {
			owner = {
				is_gestalt = yes
			}
		}
		add_building = building_supercomputer
	}
	else = {
		add_building = building_institute
	}
}

frameworld_audit_hydroponics_effect = {
	remove_building = building_hydroponics_farm
	add_district = district_giga_frameworld_farming
}

frameworld_audit_refinery_effect = {
	remove_building = building_refinery
	remove_building = building_chemical_plant
	remove_building = building_crystal_plant
	add_district = district_giga_frameworld_refinery
}

frameworld_audit_sanctuary1_effect = {
	if = {
		limit = {
			has_planet_flag = frameworld_advanced_sanctuary
		}
		
		remove_building = building_organic_sanctuary
		remove_building = building_organic_sanctuary
		remove_building = building_organic_sanctuary
		remove_building = building_organic_sanctuary
		add_district = district_giga_frameworld_sanctuary_advanced
	}
	else = {
		remove_building = building_organic_sanctuary
		remove_building = building_organic_sanctuary
		add_district = district_giga_frameworld_sanctuary
	}
}

frameworld_audit_sanctuary2_effect = {
	if = {
		limit = {
			has_planet_flag = frameworld_advanced_sanctuary
		}
		
		remove_building = building_organic_paradise
		remove_building = building_organic_paradise
		add_district = district_giga_frameworld_sanctuary_advanced
	}
	else = {
		remove_building = building_organic_paradise
		add_district = district_giga_frameworld_sanctuary
	}
}

frameworld_audit_sanctuary3_effect = {
	hidden_effect = {
		export_trigger_value_to_variable = {
			trigger = num_buildings
			variable = frameworld_organic_sanctuary_jobs
			parameters = {
				type = building_organic_sanctuary
			}
		}
		
		multiply_variable = {
			which = frameworld_organic_sanctuary_jobs
			value = 10
		}
		
		export_trigger_value_to_variable = {
			trigger = num_buildings
			variable = frameworld_organic_paradise_jobs
			parameters = {
				type = building_organic_paradise
			}
		}
		
		multiply_variable = {
			which = frameworld_organic_paradise_jobs
			value = 20
		}
		
		export_trigger_value_to_variable = {
			trigger = num_districts
			variable = frameworld_sanctuary_district_jobs
			parameters = {
				type = district_giga_frameworld_sanctuary
			}
		}
		
		multiply_variable = {
			which = frameworld_sanctuary_district_jobs
			value = 20
		}
		
		export_trigger_value_to_variable = {
			trigger = num_districts
			variable = frameworld_advanced_sanctuary_district_jobs
			parameters = {
				type = district_giga_frameworld_sanctuary_advanced
			}
		}
		
		multiply_variable = {
			which = frameworld_advanced_sanctuary_district_jobs
			value = 40
		}
		
		set_variable = {
			which = frameworld_biotrophy_jobs 
			value = frameworld_organic_sanctuary_jobs
		}
		change_variable = {
			which = frameworld_biotrophy_jobs 
			value = frameworld_organic_paradise_jobs
		}
		change_variable = {
			which = frameworld_biotrophy_jobs 
			value = frameworld_sanctuary_district_jobs
		}
		change_variable = {
			which = frameworld_biotrophy_jobs 
			value = frameworld_advanced_sanctuary_district_jobs
		}
	}
	
	if = {
		limit = {
			has_building = building_organic_paradise
			check_variable_arithmetic = {
				which = frameworld_biotrophy_jobs
				subtract = 30
				value > giga_biotrophy_count
			}
		}
		remove_building = building_organic_paradise
	}
	else_if = {
		limit = {
			has_building = building_organic_sanctuary
			check_variable_arithmetic = {
				which = frameworld_biotrophy_jobs
				subtract = 20
				value > giga_biotrophy_count
			}
		}
		remove_building = building_organic_sanctuary
	}
}

###############################################################################################################
### clearing

frameworld_audit_remove_housing_building = {
	if = {
		limit = {
			free_building_slots = 0
		}
		if = {
			limit = {
				exists = owner
				owner = {
					is_machine_empire = yes
				}
			}

			if = {
				limit = {
					has_building = building_drone_storage
				}
				remove_building = building_drone_storage
			}
			else = {
				if = {
					limit = {
						has_building = building_drone_megastorage
					}
					remove_building = building_drone_megastorage
				}
			}

		}
		else_if = {
			limit = {
				exists = owner
				owner = {
					is_hive_empire = yes
				}
			}

			if = {
				limit = {
					has_building = building_hive_warren
				}
				remove_building = building_hive_warren
			}
			else = {
				if = {
					limit = {
						has_building = building_expanded_warren
					}
					remove_building = building_expanded_warren
				}
			}

		}
		else = {
			if = {
				limit = {
					or = {
						has_building = building_luxury_residence
						has_building = building_communal_housing
					}
				}
				remove_building = building_luxury_residence
				remove_building = building_communal_housing
			}
			else = {
				if = {
					limit = {
						or = {
							has_building = building_paradise_dome
							has_building = building_communal_housing_large
						}
					}
					remove_building = building_paradise_dome
					remove_building = building_communal_housing_large
				}
			}
		}
	}
}

###############################################################################################################
### upgrades

frameworld_audit_upgrade_penrose_effect = {
	owner = {
		add_resource = {
			alloys = -2500
			influence = -150
			mult = giga_frameworld_megastructure_cost
		}
	}
	
	set_planet_flag = frameworld_upgrade
	set_planet_flag = frameworld_penrose
	
	solar_system = {
		spawn_megastructure = {
			type = frameworld_penrose_0
			owner = owner
			planet = star
		}
	}
}

frameworld_audit_upgrade_decompressor_effect = {
	owner = {
		add_resource = {
			alloys = -2500
			influence = -150
			mult = giga_frameworld_megastructure_cost
		}
	}
	
	set_planet_flag = frameworld_upgrade
	set_planet_flag = frameworld_decompressor
	
	solar_system = {
		spawn_megastructure = {
			type = frameworld_decompressor_0
			owner = owner
			planet = star
		}
	}
}

frameworld_audit_upgrade_advanced_city_effect = {
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_deposit = d_frameworld_advanced_nexus
		owner = {
			add_resource = {
				minerals = -10000
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		add_deposit = d_frameworld_advanced_hive
		owner = {
			add_resource = {
				minerals = -10000
			}
		}
	}
	else = {
		add_deposit = d_frameworld_advanced_city
		owner = {
			add_resource = {
				minerals = -20000
			}
		}
	}

	add_modifier = {
		modifier = frameworld_building_wreck_fix
	}
	set_planet_flag = frameworld_advanced_city
	validate_planet_buildings_and_districts = yes
	remove_modifier = frameworld_building_wreck_fix

	set_timed_planet_flag = {
		flag = frameworld_ai_upgrade_cooldown
		days = 2000
	}
}

frameworld_audit_upgrade_advanced_industrial_effect = {
	owner = {
		add_resource = {
			minerals = -10000
		}
	}
	
	add_deposit = d_frameworld_advanced_industrial
	set_planet_flag = frameworld_advanced_industrial
	validate_planet_buildings_and_districts = yes
	set_timed_planet_flag = {
		flag = frameworld_ai_upgrade_cooldown
		days = 2000
	}
}

frameworld_audit_upgrade_advanced_sanctuary_effect = {
	owner = {
		add_resource = {
			minerals = -10000
		}
	}
	
	add_deposit = d_frameworld_advanced_sanctuary
	set_planet_flag = frameworld_advanced_sanctuary
	validate_planet_buildings_and_districts = yes
	set_timed_planet_flag = {
		flag = frameworld_ai_upgrade_cooldown
		days = 2000
	}
}

frameworld_audit_upgrade_gaia_effect = {
	owner = {
		add_resource = {
			minerals = -5000
			energy = -20000
			exotic_gases = -1000
		}
	}
	
	add_deposit = d_frameworld_gaia
	set_planet_flag = frameworld_gaia
	set_timed_planet_flag = {
		flag = frameworld_ai_upgrade_cooldown
		days = 3000
	}
}

frameworld_audit_upgrade_computing_complex_effect = {
	owner = {
		add_resource = {
			alloys = -25000
			rare_crystals = -1000
			mult = giga_frameworld_megastructure_cost
		}
	}
	
	add_deposit = d_frameworld_computing_complex
	set_planet_flag = frameworld_computing_complex
	set_timed_planet_flag = {
		flag = frameworld_ai_upgrade_cooldown
		days = 3000
	}
}

frameworld_audit_upgrade_expanded_infrastructure_effect = {
	owner = {
		add_resource = {
			alloys = -15000
			mult = giga_frameworld_megastructure_cost
		}
	}
	
	add_deposit = d_frameworld_expanded_infrastructure
	if = {
		limit = {
			has_planet_flag = frameworld_expanded_infrastructure_1
		}
		set_planet_flag = frameworld_expanded_infrastructure_2
	}
	else = {
		set_planet_flag = frameworld_expanded_infrastructure_1
	}

	set_timed_planet_flag = {
		flag = frameworld_ai_upgrade_cooldown
		days = 3000
	}
}

frameworld_audit_upgrade_maginot = {
	owner = {
		add_resource = {
			alloys = -25000
			mult = giga_frameworld_megastructure_cost
		}
	}

	# replaces effects below to avoid recursive depth warning
	planet_event = {
		id = giga_frameworld_origin.1002
	}
	set_planet_flag = frameworld_maginot

	# add_deposit = d_frameworld_maginot
	# giga_frameworld_spawn_maginot_defensive_stations = {
	# 	WHO = owner
	# }
	# init_giga_maginot = yes
	# giga_frameworld_update_maginot_deposits = yes

	set_timed_planet_flag = {
		flag = frameworld_ai_upgrade_cooldown
		days = 3000
	}
}