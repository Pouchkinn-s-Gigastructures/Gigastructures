#################################
### Planet Effects ##############
#################################
# Setup Katzenland
setup_katzenland_planet = {
	add_deposit = d_arid_highlands
	add_deposit = d_searing_desert
	add_deposit = d_searing_desert
	add_deposit = d_searing_desert
	add_deposit = d_tempestous_mountain
	add_deposit = d_geothermal_vent
	add_deposit = d_mineral_fields
	add_deposit = d_mineral_fields
	add_deposit = d_ore_rich_caverns
	add_deposit = d_mineral_fields
	add_deposit = d_ore_rich_caverns
	add_deposit = d_rich_mountain
	add_deposit = d_dust_desert
	add_deposit = d_bubbling_swamp
	add_deposit = d_city_ruins
	add_deposit = d_radioactive_wasteland
	add_deposit = d_radioactive_wasteland
	add_deposit = d_bomb_crater
	add_deposit = d_bomb_crater
	add_deposit = d_bomb_crater
}

create_katzenland_deposits = {
	random_list = {
		30 = {
			add_deposit = d_radioactive_wasteland
			add_deposit = d_bomb_crater
		}
		20 = {
			add_deposit = d_searing_desert
			add_deposit = d_bomb_crater
		}
		20 = {
			add_deposit = d_city_ruins
			add_deposit = d_radioactive_wasteland
		}
		20 = {
			add_deposit = d_ore_rich_caverns
			add_deposit = d_tempestous_mountain
		}
		20 = {
			add_deposit = d_arid_highlands
			add_deposit = d_tempestous_mountain
		}
		20 = {
			add_deposit = d_betharian_deposit
			add_deposit = d_ore_rich_caverns
		}
		20 = {
			add_deposit = d_bubbling_swamp
			add_deposit = d_ore_rich_caverns
		}
		20 = {
			add_deposit = d_dust_caverns
			add_deposit = d_radioactive_wasteland
		}
		20 = {
			add_deposit = d_crystalline_caverns
		}
		15 = {
			add_deposit = d_arid_highlands
			add_deposit = d_rich_mountain
		}
		10 = {
			add_deposit = d_dust_desert
		}
	}
}

katzenland_clear_districts = {
	while = {
		count = 30
		remove_district = district_generator
	}
	while = {
		count = 30
		remove_district = district_mining
	}
	while = {
		count = 30
		remove_district = district_city
	}
	while = {
		count = 30
		remove_district = district_farming
	}
}

# since 3.3 removing a planet which has a colony on it causes a crash
# so here's a little effect to shorten stuff - TTFTCUTS
giga_remove_planet = {
	set_planet_flag = giga_remove_planet
	if = { 
		limit = { is_colony = yes }
		every_owned_pop = { kill_pop = yes }
		destroy_colony = yes

		set_planet_flag = has_megastructure
		set_planet_flag = megastructure

		change_pc = pc_giga_empty_space_asteroid

		planet_event = { id = giga_mega.8500 days = 1 }
	}
	else = {
		solar_system = {
			every_fleet_in_system = {
				limit = {
					any_owned_ship = {
						is_ship_class = shipclass_constructor
					}
					controller = {
						is_ai = yes
					}
					is_fleet_idle = yes
				}

				set_fleet_flag = giga_remove_planet
				every_owned_ship = {
					set_disabled = yes
				}
			}
		}

		remove_planet = yes

		solar_system = {
			every_fleet_in_system = {
				limit = {
					has_fleet_flag = giga_remove_planet
				}
				every_owned_ship = {
					set_disabled = no
				}
				remove_fleet_flag = giga_remove_planet
			}
		}
	}
}

#################################
### Create Ship Effects #########
#################################
giga_moon_cold_barren = {	create_fleet = { name = "Attack Moon" settings = { spawn_debris = no } effect = { set_owner = prev create_ship = { name = "Cold Barren Attack Moon" design = "Cold Barren Planetoid"	effect = { set_ship_flag = giga_moon_cold_barren } } } } }
giga_moon_frozen = {		create_fleet = { name = "Attack Moon" settings = { spawn_debris = no } effect = { set_owner = prev create_ship = { name = "Frozen Attack Moon"		design = "Frozen Planetoid"			effect = { set_ship_flag = giga_moon_frozen } } } } }
giga_moon_barren = {		create_fleet = { name = "Attack Moon" settings = { spawn_debris = no } effect = { set_owner = prev create_ship = { name = "Barren Attack Moon"		design = "Barren Planetoid"			effect = { set_ship_flag = giga_moon_barren } } } } }
giga_moon_molten = {		create_fleet = { name = "Attack Moon" settings = { spawn_debris = no } effect = { set_owner = prev create_ship = { name = "Molten Attack Moon"		design = "Molten Planetoid"			effect = { set_ship_flag = giga_moon_molten } } } } }
giga_moon_disco = {			create_fleet = { name = "Attack Moon" settings = { spawn_debris = no } effect = { set_owner = prev create_ship = { name = "Party Attack Moon"		design = "Disco Planetoid"			effect = { set_ship_flag = giga_moon_disco } } } } }
giga_moon_luna = {			create_fleet = { name = "Attack Moon" settings = { spawn_debris = no } effect = { set_owner = prev create_ship = { name = "Luna"					design = "Luna"						effect = { set_ship_flag = giga_moon_luna } } } } }

giga_war_moon = {
	create_fleet = { 
		name = "Attack Moon" 
		settings = { spawn_debris = no } 
		effect = { 
			set_owner = prev 
			create_ship = { 
				name = "Attack Moon" 
				random_existing_design = giga_massive_planet
				effect = { 
					set_ship_flag = random 
					[[ship_name]
						set_name = {
							key = $ship_name$
							]
							[[ship_name_variables]
							variable_string = $ship_name_variables$
							]
							[[ship_name]
						}
					]
				} 
			}
			set_formation_scale = 5

			[[fleet_name]
				set_name = {
					key = $fleet_name$
					]
					[[fleet_name_variables]
					variable_string = $fleet_name_variables$
					]
					[[fleet_name]
				}
			]
		}
	} 
}

giga_planet_craft = {
	create_fleet = {
		name = "Behemoth Planetcraft"
		settings = {
			spawn_debris = no
			can_change_composition = no #yes
			#is_boss = yes
		}
		effect = {
			set_owner = prev
			create_ship = {
				name = "Behemoth Planetcraft"
				graphical_culture = root.from
				random_existing_design = giga_planet_behemoth
				effect = { 
					set_ship_flag = giga_planet 

					[[ship_name]
						set_name = {
							key = $ship_name$
							]
							[[ship_name_variables]
							variable_string = $ship_name_variables$
							]
							[[ship_name]
						}
					]
				}
			}
			set_formation_scale = 10

			[[fleet_name]
				set_name = {
					key = $fleet_name$
					]
					[[fleet_name_variables]
					variable_string = $fleet_name_variables$
					]
					[[fleet_name]
				}
			]
		}
	}
}

giga_system_craft = {
	create_fleet = {
		name = "The Stellar Systemcraft"
		settings = {
			spawn_debris = no
			can_change_composition = no #yes
			is_boss = yes
		}
		effect = {
			set_owner = prev
			create_ship = {
				name = "The Stellar Systemcraft"
				graphical_culture = root.from
				random_existing_design = giga_systemcraft
				effect = {

					[[ship_name]
						set_name = {
							key = $ship_name$
							]
							[[ship_name_variables]
							variable_string = $ship_name_variables$
							]
							[[ship_name]
						}
					]
				}
			}
			set_formation_scale = 20

			[[fleet_name]
				set_name = {
					key = $fleet_name$
					]
					[[fleet_name_variables]
					variable_string = $fleet_name_variables$
					]
					[[fleet_name]
				}
			]
		}
	}
}

giga_war_moon_debris_mega = {
	random_system = {
		limit = {
			NOR = {
				has_star_flag = empire_cluster
				has_star_flag = war_moon_planet_here
			}
		}
		set_star_flag = war_moon_planet_here
		random_list = {
			1 = { spawn_megastructure = { type = war_moon_debris_cold_barren	random_pos = yes orbit_angle = 360 orbit_distance = 200 } }
			1 = { spawn_megastructure = { type = war_moon_debris_barren			random_pos = yes orbit_angle = 360 orbit_distance = 200 } }
			1 = { spawn_megastructure = { type = war_moon_debris_molten			random_pos = yes orbit_angle = 360 orbit_distance = 200 } }
			1 = { spawn_megastructure = { type = war_moon_debris_luna			random_pos = yes orbit_angle = 360 orbit_distance = 200 } }
			1 = { spawn_megastructure = { type = war_moon_debris_disco			random_pos = yes orbit_angle = 360 orbit_distance = 200 } }
			1 = { spawn_megastructure = { type = war_moon_debris_frozen			random_pos = yes orbit_angle = 360 orbit_distance = 200 } }
		}
	}
}

giga_war_planet_debris_mega = {
	random_system = {
		limit = {
			NOR = {
				has_star_flag = empire_cluster
				has_star_flag = war_moon_planet_here
			}
		}
		set_star_flag = war_moon_planet_here
		spawn_megastructure = {
			type = war_planet_debris
			random_pos = yes
			orbit_angle = 360
			orbit_distance = 200
		}
	}
}

##########################
### Debris ###############
##########################
giga_singular_debris = {
	random_list = {
		1 = { create_ambient_object = { type = "large_debris_object"		location = this } }
		1 = { create_ambient_object = { type = "medium_debris_01_object"	location = this } }
		1 = { create_ambient_object = { type = "medium_debris_02_object"	location = this } }
		1 = { create_ambient_object = { type = "small_debris_object"		location = this } }
		1 = { create_ambient_object = { type = "large_debris_object"		entity_offset_height = { min = -0 max = -20 } location = this } }
		1 = { create_ambient_object = { type = "medium_debris_01_object"	entity_offset_height = { min = -0 max = -20 } location = this } }
		1 = { create_ambient_object = { type = "medium_debris_02_object"	entity_offset_height = { min = -0 max = -20 } location = this } }
		1 = { create_ambient_object = { type = "small_debris_object"		entity_offset_height = { min = -0 max = -20 } location = this } }
	}
	random_list = {
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 20 angle = random } } }
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 30 angle = random } } }
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 40 angle = random } } }
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 50 angle = random } } }
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 60 angle = random } } }
	}
}

giga_singular_system_debris = {
	random_list = {
		1 = { create_ambient_object = { type = "large_debris_object"		location = solar_system } }
		1 = { create_ambient_object = { type = "medium_debris_01_object"	location = solar_system } }
		1 = { create_ambient_object = { type = "medium_debris_02_object"	location = solar_system } }
		1 = { create_ambient_object = { type = "small_debris_object"		location = solar_system } }
		1 = { create_ambient_object = { type = "large_debris_object"		entity_offset_height = { min = -0 max = -20 } location = solar_system } }
		1 = { create_ambient_object = { type = "medium_debris_01_object"	entity_offset_height = { min = -0 max = -20 } location = solar_system } }
		1 = { create_ambient_object = { type = "medium_debris_02_object"	entity_offset_height = { min = -0 max = -20 } location = solar_system } }
		1 = { create_ambient_object = { type = "small_debris_object"		entity_offset_height = { min = -0 max = -20 } location = solar_system } }
	}
}

giga_singular_battlefield = {
	random_list = {
		1 = { create_ambient_object = { type = "abandoned_starbase_01_object"	location = this } }
		1 = { create_ambient_object = { type = "ehof_damaged_star_rail"			location = this } }
		1 = { create_ambient_object = { type = "ehof_d_dreadnought"				location = this } }
		1 = { create_ambient_object = { type = "ancient_battlefield_02_object"	location = this } }
		1 = { create_ambient_object = { type = "abandoned_starbase_01_object"	entity_offset_height = { min = -0 max = -20 } location = this } }
		1 = { create_ambient_object = { type = "ehof_damaged_star_rail"			entity_offset_height = { min = -0 max = -20 } location = this } }
		1 = { create_ambient_object = { type = "ehof_d_dreadnought"				entity_offset_height = { min = -0 max = -20 } location = this } }
		1 = { create_ambient_object = { type = "ancient_battlefield_02_object"	entity_offset_height = { min = -0 max = -20 } location = this } }
	}
	random_list = {
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 4 angle = random } } }
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 8 angle = random } } }
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 12 angle = random } } }
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 16 angle = random } } }
		1 = { last_created_ambient_object = { set_location = { target = prev distance = 20 angle = random } } }
	}
}

giga_singular_system_battlefield = {
	random_list = {
		1 = { create_ambient_object = { type = "abandoned_starbase_01_object"	location = solar_system } }
		1 = { create_ambient_object = { type = "ehof_damaged_star_rail"			location = solar_system } }
		1 = { create_ambient_object = { type = "ehof_d_dreadnought"				location = solar_system } }
		1 = { create_ambient_object = { type = "ancient_battlefield_02_object"	location = solar_system } }
		1 = { create_ambient_object = { type = "abandoned_starbase_01_object"	entity_offset_height = { min = -0 max = -20 } location = solar_system } }
		1 = { create_ambient_object = { type = "ehof_damaged_star_rail"			entity_offset_height = { min = -0 max = -20 } location = solar_system } }
		1 = { create_ambient_object = { type = "ehof_d_dreadnought"				entity_offset_height = { min = -0 max = -20 } location = solar_system } }
		1 = { create_ambient_object = { type = "ancient_battlefield_02_object"	entity_offset_height = { min = -0 max = -20 } location = solar_system } }
	}
}

giga_field_debris = {
	random_list = {
		1 = { while = { count = 4 giga_singular_debris = yes } }
		1 = { while = { count = 8 giga_singular_debris = yes } }
		1 = { while = { count = 12 giga_singular_debris = yes } }
		1 = { while = { count = 16 giga_singular_debris = yes } }
		1 = { while = { count = 20 giga_singular_debris = yes } }
	}
}

giga_field_system_debris = {
	random_list = {
		1 = { while = { count = 8 giga_singular_system_debris = yes } }
		1 = { while = { count = 16 giga_singular_system_debris = yes } }
		1 = { while = { count = 24 giga_singular_system_debris = yes } }
		1 = { while = { count = 32 giga_singular_system_debris = yes } }
		1 = { while = { count = 40 giga_singular_system_debris = yes } }
	}
}

giga_field_battlefield = {
	random_list = {
		1 = { while = { count = 2 giga_singular_battlefield = yes } }
		1 = { while = { count = 4 giga_singular_battlefield = yes } }
		1 = { while = { count = 6 giga_singular_battlefield = yes } }
		1 = { while = { count = 8 giga_singular_battlefield = yes } }
		1 = { while = { count = 10 giga_singular_battlefield = yes } }
	}
}

giga_field_system_battlefield = {
	random_list = {
		1 = { while = { count = 6 giga_singular_system_battlefield = yes } }
		1 = { while = { count = 12 giga_singular_system_battlefield = yes } }
		1 = { while = { count = 18 giga_singular_system_battlefield = yes } }
		1 = { while = { count = 24 giga_singular_system_battlefield = yes } }
		1 = { while = { count = 30 giga_singular_system_battlefield = yes } }
	}
}

giga_remove_system_debris = {
	every_system_ambient_object = {
		limit = {
			OR = {
				is_ambient_object_type = large_debris_object
				is_ambient_object_type = medium_debris_01_object
				is_ambient_object_type = medium_debris_02_object
				is_ambient_object_type = small_debris_object
			}
		}
		destroy_ambient_object = this
	}
}

giga_remove_system_planets = {
	every_system_megastructure = {
		limit = { giga_is_megastructure_that_needs_planet = yes }
		remove_megastructure = THIS
	}
	every_system_planet = {
		limit = { 
			is_star = no
			is_astral_scar = no
			NOT = { is_planet_class = pc_giga_asteroid_artillery }
		}
		if = {
			limit = {
				is_colony = yes
			}
			destroy_colony = yes
		}
		remove_planet = yes
	}
	every_system_ambient_object = {
		limit = {
			NOR = {
				ehof_any_amb_object = yes
				is_ambient_object_type = NAME_Syzygy_Remains
				is_ambient_object_type = abandoned_observation_outpost
				is_ambient_object_type = abandoned_ship_2_object
				is_ambient_object_type = abandoned_ship_object
				is_ambient_object_type = abandoned_starbase_01_object
				is_ambient_object_type = abandoned_station_object
				is_ambient_object_type = abandoned_wormhole_station
				is_ambient_object_type = aeternum_planetcraft_debris_field_object
				is_ambient_object_type = alderson_frame
				is_ambient_object_type = ancient_battlefield_02_object
				is_ambient_object_type = ancient_battlefield_object
				is_ambient_object_type = attack_ship_01_object
				is_ambient_object_type = blue_sun_grow_particle_object
				is_ambient_object_type = broken_holy_world_outpost
				is_ambient_object_type = broken_star_lifting_platform
				is_ambient_object_type = caravaneer_billboard_1
				is_ambient_object_type = caravaneer_billboard_2
				is_ambient_object_type = caravaneer_billboard_3
				is_ambient_object_type = contingency_1
				is_ambient_object_type = contingency_2
				is_ambient_object_type = crystal_manufactory_object
				is_ambient_object_type = dead_enigmatic_fortress_object
				is_ambient_object_type = dead_swarm_large_object
				is_ambient_object_type = dead_swarm_small_object
				is_ambient_object_type = derelict_particle_accelerator
				is_ambient_object_type = derelict_ship_object
				is_ambient_object_type = dormant_hive_base_2_object
				is_ambient_object_type = dormant_hive_base_object
				is_ambient_object_type = dreadnought_object
				is_ambient_object_type = droppod_01_object
				is_ambient_object_type = droppod_02_object
				is_ambient_object_type = eeloo_broken_object
				is_ambient_object_type = ehof_d_dreadnought
				is_ambient_object_type = ehof_damaged_star_rail
				is_ambient_object_type = ehof_galactic_market
				is_ambient_object_type = elderly_tiyanki_dead_object
				is_ambient_object_type = eventship_01_object
				is_ambient_object_type = eventship_02_object
				is_ambient_object_type = eventship_03_object
				is_ambient_object_type = eventship_04_blue_object
				is_ambient_object_type = eventship_04_green_object
				is_ambient_object_type = eventship_04_red_object
				is_ambient_object_type = eventship_04_yellow_green_object
				is_ambient_object_type = eventship_04_yellow_object
				is_ambient_object_type = eventship_05_object
				is_ambient_object_type = eventship_06_object
				is_ambient_object_type = eventship_07_object
				is_ambient_object_type = explosion_particle_object
				is_ambient_object_type = extradimensional_1
				is_ambient_object_type = extradimensional_2
				is_ambient_object_type = fake_cplanet
				is_ambient_object_type = fake_pgate
				is_ambient_object_type = fake_pstone
				is_ambient_object_type = fake_sphere
				is_ambient_object_type = federation_hegemony_monument
				is_ambient_object_type = fusion_drive_trail_object
				is_ambient_object_type = galactic_market_station
				is_ambient_object_type = giga_psychic_beacon_p3_effects
				is_ambient_object_type = giga_ringworld_upgrade_behemoth
				is_ambient_object_type = giga_ringworld_upgrade_gargantuan
				is_ambient_object_type = giga_ringworld_upgrade_titanic
				is_ambient_object_type = giga_ringworld_upgrade_vanilla
				is_ambient_object_type = giga_size_13_ring
				is_ambient_object_type = giga_size_21_ring
				is_ambient_object_type = giga_size_25_ring
				is_ambient_object_type = grunur_research_facility
				is_ambient_object_type = habitat_cracker_object
				is_ambient_object_type = habitat_divine_object
				is_ambient_object_type = habitat_nanobot_object
				is_ambient_object_type = habitat_neutron_object
				is_ambient_object_type = habitat_pacifier_object
				is_ambient_object_type = hive_asteroid_01_object
				is_ambient_object_type = hive_asteroid_02_object
				is_ambient_object_type = hive_asteroid_03_object
				is_ambient_object_type = horror_energy_object
				is_ambient_object_type = horror_spawn_object
				is_ambient_object_type = hyacinth_object
				is_ambient_object_type = injured_queen_object
				is_ambient_object_type = kaiser_moon_broken_object
				is_ambient_object_type = kohtalo_object
				is_ambient_object_type = large_debris_object
				is_ambient_object_type = loop_debris_01_object
				is_ambient_object_type = loop_debris_02_object
				is_ambient_object_type = medium_debris_01_object
				is_ambient_object_type = medium_debris_02_object
				is_ambient_object_type = mysterious_space_station_object
				is_ambient_object_type = mysterious_tanker_object
				is_ambient_object_type = nebula_1
				is_ambient_object_type = nebula_2
				is_ambient_object_type = nebula_3
				is_ambient_object_type = nebula_4
				is_ambient_object_type = nebula_L10_entity
				is_ambient_object_type = nebula_L3_entity
				is_ambient_object_type = nebula_L4_entity
				is_ambient_object_type = nebula_L6_entity
				is_ambient_object_type = nebula_L7_entity
				is_ambient_object_type = nebula_L8_entity
				is_ambient_object_type = nebula_planet_smoke
				is_ambient_object_type = nicoll_beam_1
				is_ambient_object_type = nicoll_beam_10
				is_ambient_object_type = nicoll_beam_11
				is_ambient_object_type = nicoll_beam_12
				is_ambient_object_type = nicoll_beam_13
				is_ambient_object_type = nicoll_beam_2
				is_ambient_object_type = nicoll_beam_3
				is_ambient_object_type = nicoll_beam_4
				is_ambient_object_type = nicoll_beam_5
				is_ambient_object_type = nicoll_beam_6
				is_ambient_object_type = nicoll_beam_7
				is_ambient_object_type = nicoll_beam_8
				is_ambient_object_type = nicoll_beam_9
				is_ambient_object_type = nicoll_beam_side_gate_closed
				is_ambient_object_type = nicoll_beam_side_gate_open
				is_ambient_object_type = nicoll_target_beam_planet_1
				is_ambient_object_type = nicoll_target_beam_planet_2
				is_ambient_object_type = nicoll_target_beam_planet_3
				is_ambient_object_type = nicoll_target_beam_planet_4
				is_ambient_object_type = nicoll_target_beam_portal
				is_ambient_object_type = nicoll_target_beam_system
				is_ambient_object_type = old_fleet_parking_lot_object
				is_ambient_object_type = penrose_sphere_explosion_object
				is_ambient_object_type = planet_heat_up_particle_object
				is_ambient_object_type = psi_storm_1
				is_ambient_object_type = rare_nebula_1
				is_ambient_object_type = rare_nebula_2
				is_ambient_object_type = red_sun_grow_particle_object
				is_ambient_object_type = ringworld_cracker_object
				is_ambient_object_type = ringworld_divine_object
				is_ambient_object_type = ringworld_nanobot_object
				is_ambient_object_type = ringworld_neutron_object
				is_ambient_object_type = ringworld_pacifier_object
				is_ambient_object_type = sa_fired_at_sphere
				is_ambient_object_type = sa_firing_at_sphere
				is_ambient_object_type = shrine_object
				is_ambient_object_type = silent_freighter_object
				# is_ambient_object_type = sm_forge_p2
				# is_ambient_object_type = sm_forge_p3
				# is_ambient_object_type = sm_forge_p4
				is_ambient_object_type = small_debris_object
				is_ambient_object_type = space_storm_1
				is_ambient_object_type = space_storm_2
				is_ambient_object_type = star_lifting_platform
				is_ambient_object_type = stellarite_object
				is_ambient_object_type = sublight_probe_object
				is_ambient_object_type = swarm_1
				is_ambient_object_type = tannhauser_gate_object
				is_ambient_object_type = test_object_1
				is_ambient_object_type = test_object_1
				is_ambient_object_type = test_object_2
				is_ambient_object_type = test_object_2
				is_ambient_object_type = turbulent_nebula_1
				is_ambient_object_type = turbulent_nebula_2
				is_ambient_object_type = voidspawn_spawn_animation_object
				is_ambient_object_type = wenkwort_keeper
				is_ambient_object_type = yellow_sun_grow_particle_object
			}
		}
		destroy_ambient_object = this
	}
}

giga_achievement_sound = {
	if = {
		limit = {
			is_ai = no
			is_multiplayer = no
		}
		play_sound = event_lootbox_galatron
	}
}

giga_event_target_list_clear = {
	if = { limit = { etl_001 = yes } clear_global_event_target = etl_001 }
	if = { limit = { etl_002 = yes } clear_global_event_target = etl_002 }
	if = { limit = { etl_003 = yes } clear_global_event_target = etl_003 }
	if = { limit = { etl_004 = yes } clear_global_event_target = etl_004 }
	if = { limit = { etl_005 = yes } clear_global_event_target = etl_005 }
	if = { limit = { etl_006 = yes } clear_global_event_target = etl_006 }
	if = { limit = { etl_007 = yes } clear_global_event_target = etl_007 }
	if = { limit = { etl_008 = yes } clear_global_event_target = etl_008 }
	if = { limit = { etl_009 = yes } clear_global_event_target = etl_009 }
	if = { limit = { etl_010 = yes } clear_global_event_target = etl_010 }
	if = { limit = { etl_011 = yes } clear_global_event_target = etl_011 }
	if = { limit = { etl_012 = yes } clear_global_event_target = etl_012 }
	if = { limit = { etl_013 = yes } clear_global_event_target = etl_013 }
	if = { limit = { etl_014 = yes } clear_global_event_target = etl_014 }
	if = { limit = { etl_015 = yes } clear_global_event_target = etl_015 }
	if = { limit = { etl_016 = yes } clear_global_event_target = etl_016 }
	if = { limit = { etl_017 = yes } clear_global_event_target = etl_017 }
	if = { limit = { etl_018 = yes } clear_global_event_target = etl_018 }
	if = { limit = { etl_019 = yes } clear_global_event_target = etl_019 }
	if = { limit = { etl_020 = yes } clear_global_event_target = etl_020 }
	if = { limit = { etl_021 = yes } clear_global_event_target = etl_021 }
	if = { limit = { etl_022 = yes } clear_global_event_target = etl_022 }
	if = { limit = { etl_023 = yes } clear_global_event_target = etl_023 }
	if = { limit = { etl_024 = yes } clear_global_event_target = etl_024 }
	if = { limit = { etl_025 = yes } clear_global_event_target = etl_025 }
	if = { limit = { etl_026 = yes } clear_global_event_target = etl_026 }
	if = { limit = { etl_027 = yes } clear_global_event_target = etl_027 }
	if = { limit = { etl_028 = yes } clear_global_event_target = etl_028 }
	if = { limit = { etl_029 = yes } clear_global_event_target = etl_029 }
	if = { limit = { etl_030 = yes } clear_global_event_target = etl_030 }
	if = { limit = { etl_031 = yes } clear_global_event_target = etl_031 }
	if = { limit = { etl_032 = yes } clear_global_event_target = etl_032 }
	if = { limit = { etl_033 = yes } clear_global_event_target = etl_033 }
	if = { limit = { etl_034 = yes } clear_global_event_target = etl_034 }
	if = { limit = { etl_035 = yes } clear_global_event_target = etl_035 }
	if = { limit = { etl_036 = yes } clear_global_event_target = etl_036 }
	if = { limit = { etl_037 = yes } clear_global_event_target = etl_037 }
	if = { limit = { etl_038 = yes } clear_global_event_target = etl_038 }
	if = { limit = { etl_039 = yes } clear_global_event_target = etl_039 }
	if = { limit = { etl_040 = yes } clear_global_event_target = etl_040 }
	if = { limit = { etl_041 = yes } clear_global_event_target = etl_041 }
	if = { limit = { etl_042 = yes } clear_global_event_target = etl_042 }
	if = { limit = { etl_043 = yes } clear_global_event_target = etl_043 }
	if = { limit = { etl_044 = yes } clear_global_event_target = etl_044 }
	if = { limit = { etl_045 = yes } clear_global_event_target = etl_045 }
	if = { limit = { etl_046 = yes } clear_global_event_target = etl_046 }
	if = { limit = { etl_047 = yes } clear_global_event_target = etl_047 }
	if = { limit = { etl_048 = yes } clear_global_event_target = etl_048 }
	if = { limit = { etl_049 = yes } clear_global_event_target = etl_049 }
	if = { limit = { etl_050 = yes } clear_global_event_target = etl_050 }
	if = { limit = { etl_051 = yes } clear_global_event_target = etl_051 }
	if = { limit = { etl_052 = yes } clear_global_event_target = etl_052 }
	if = { limit = { etl_053 = yes } clear_global_event_target = etl_053 }
	if = { limit = { etl_054 = yes } clear_global_event_target = etl_054 }
	if = { limit = { etl_055 = yes } clear_global_event_target = etl_055 }
	if = { limit = { etl_056 = yes } clear_global_event_target = etl_056 }
	if = { limit = { etl_057 = yes } clear_global_event_target = etl_057 }
	if = { limit = { etl_058 = yes } clear_global_event_target = etl_058 }
	if = { limit = { etl_059 = yes } clear_global_event_target = etl_059 }
	if = { limit = { etl_060 = yes } clear_global_event_target = etl_060 }
	if = { limit = { etl_061 = yes } clear_global_event_target = etl_061 }
	if = { limit = { etl_062 = yes } clear_global_event_target = etl_062 }
	if = { limit = { etl_063 = yes } clear_global_event_target = etl_063 }
	if = { limit = { etl_064 = yes } clear_global_event_target = etl_064 }
	if = { limit = { etl_065 = yes } clear_global_event_target = etl_065 }
	if = { limit = { etl_066 = yes } clear_global_event_target = etl_066 }
	if = { limit = { etl_067 = yes } clear_global_event_target = etl_067 }
	if = { limit = { etl_068 = yes } clear_global_event_target = etl_068 }
	if = { limit = { etl_069 = yes } clear_global_event_target = etl_069 }
	if = { limit = { etl_070 = yes } clear_global_event_target = etl_070 }
	if = { limit = { etl_071 = yes } clear_global_event_target = etl_071 }
	if = { limit = { etl_072 = yes } clear_global_event_target = etl_072 }
	if = { limit = { etl_073 = yes } clear_global_event_target = etl_073 }
	if = { limit = { etl_074 = yes } clear_global_event_target = etl_074 }
	if = { limit = { etl_075 = yes } clear_global_event_target = etl_075 }
	if = { limit = { etl_076 = yes } clear_global_event_target = etl_076 }
	if = { limit = { etl_077 = yes } clear_global_event_target = etl_077 }
	if = { limit = { etl_078 = yes } clear_global_event_target = etl_078 }
	if = { limit = { etl_079 = yes } clear_global_event_target = etl_079 }
	if = { limit = { etl_080 = yes } clear_global_event_target = etl_080 }
	if = { limit = { etl_081 = yes } clear_global_event_target = etl_081 }
	if = { limit = { etl_082 = yes } clear_global_event_target = etl_082 }
	if = { limit = { etl_083 = yes } clear_global_event_target = etl_083 }
	if = { limit = { etl_084 = yes } clear_global_event_target = etl_084 }
	if = { limit = { etl_085 = yes } clear_global_event_target = etl_085 }
	if = { limit = { etl_086 = yes } clear_global_event_target = etl_086 }
	if = { limit = { etl_087 = yes } clear_global_event_target = etl_087 }
	if = { limit = { etl_088 = yes } clear_global_event_target = etl_088 }
	if = { limit = { etl_089 = yes } clear_global_event_target = etl_089 }
	if = { limit = { etl_090 = yes } clear_global_event_target = etl_090 }
	if = { limit = { etl_091 = yes } clear_global_event_target = etl_091 }
	if = { limit = { etl_092 = yes } clear_global_event_target = etl_092 }
	if = { limit = { etl_093 = yes } clear_global_event_target = etl_093 }
	if = { limit = { etl_094 = yes } clear_global_event_target = etl_094 }
	if = { limit = { etl_095 = yes } clear_global_event_target = etl_095 }
	if = { limit = { etl_096 = yes } clear_global_event_target = etl_096 }
	if = { limit = { etl_097 = yes } clear_global_event_target = etl_097 }
	if = { limit = { etl_098 = yes } clear_global_event_target = etl_098 }
	if = { limit = { etl_099 = yes } clear_global_event_target = etl_099 }
	if = { limit = { etl_100 = yes } clear_global_event_target = etl_100 }
	if = { limit = { etl_101 = yes } clear_global_event_target = etl_101 }
	if = { limit = { etl_102 = yes } clear_global_event_target = etl_102 }
	if = { limit = { etl_103 = yes } clear_global_event_target = etl_103 }
	if = { limit = { etl_104 = yes } clear_global_event_target = etl_104 }
	if = { limit = { etl_105 = yes } clear_global_event_target = etl_105 }
	if = { limit = { etl_106 = yes } clear_global_event_target = etl_106 }
	if = { limit = { etl_107 = yes } clear_global_event_target = etl_107 }
	if = { limit = { etl_108 = yes } clear_global_event_target = etl_108 }
	if = { limit = { etl_109 = yes } clear_global_event_target = etl_109 }
	if = { limit = { etl_110 = yes } clear_global_event_target = etl_110 }
	if = { limit = { etl_111 = yes } clear_global_event_target = etl_111 }
	if = { limit = { etl_112 = yes } clear_global_event_target = etl_112 }
	if = { limit = { etl_113 = yes } clear_global_event_target = etl_113 }
	if = { limit = { etl_114 = yes } clear_global_event_target = etl_114 }
	if = { limit = { etl_115 = yes } clear_global_event_target = etl_115 }
	if = { limit = { etl_116 = yes } clear_global_event_target = etl_116 }
	if = { limit = { etl_117 = yes } clear_global_event_target = etl_117 }
	if = { limit = { etl_118 = yes } clear_global_event_target = etl_118 }
	if = { limit = { etl_119 = yes } clear_global_event_target = etl_119 }
	if = { limit = { etl_120 = yes } clear_global_event_target = etl_120 }
	if = { limit = { etl_121 = yes } clear_global_event_target = etl_121 }
	if = { limit = { etl_122 = yes } clear_global_event_target = etl_122 }
	if = { limit = { etl_123 = yes } clear_global_event_target = etl_123 }
	if = { limit = { etl_124 = yes } clear_global_event_target = etl_124 }
	if = { limit = { etl_125 = yes } clear_global_event_target = etl_125 }
	if = { limit = { etl_126 = yes } clear_global_event_target = etl_126 }
	if = { limit = { etl_127 = yes } clear_global_event_target = etl_127 }
	if = { limit = { etl_128 = yes } clear_global_event_target = etl_128 }
	if = { limit = { etl_129 = yes } clear_global_event_target = etl_129 }
	if = { limit = { etl_130 = yes } clear_global_event_target = etl_130 }
	if = { limit = { etl_131 = yes } clear_global_event_target = etl_131 }
	if = { limit = { etl_132 = yes } clear_global_event_target = etl_132 }
	if = { limit = { etl_133 = yes } clear_global_event_target = etl_133 }
	if = { limit = { etl_134 = yes } clear_global_event_target = etl_134 }
	if = { limit = { etl_135 = yes } clear_global_event_target = etl_135 }
	if = { limit = { etl_136 = yes } clear_global_event_target = etl_136 }
	if = { limit = { etl_137 = yes } clear_global_event_target = etl_137 }
	if = { limit = { etl_138 = yes } clear_global_event_target = etl_138 }
	if = { limit = { etl_139 = yes } clear_global_event_target = etl_139 }
	if = { limit = { etl_140 = yes } clear_global_event_target = etl_140 }
	if = { limit = { etl_141 = yes } clear_global_event_target = etl_141 }
	if = { limit = { etl_142 = yes } clear_global_event_target = etl_142 }
	if = { limit = { etl_143 = yes } clear_global_event_target = etl_143 }
	if = { limit = { etl_144 = yes } clear_global_event_target = etl_144 }
	if = { limit = { etl_145 = yes } clear_global_event_target = etl_145 }
	if = { limit = { etl_146 = yes } clear_global_event_target = etl_146 }
	if = { limit = { etl_147 = yes } clear_global_event_target = etl_147 }
	if = { limit = { etl_148 = yes } clear_global_event_target = etl_148 }
	if = { limit = { etl_149 = yes } clear_global_event_target = etl_149 }
	if = { limit = { etl_150 = yes } clear_global_event_target = etl_150 }
	if = { limit = { etl_151 = yes } clear_global_event_target = etl_151 }
	if = { limit = { etl_152 = yes } clear_global_event_target = etl_152 }
	if = { limit = { etl_153 = yes } clear_global_event_target = etl_153 }
	if = { limit = { etl_154 = yes } clear_global_event_target = etl_154 }
	if = { limit = { etl_155 = yes } clear_global_event_target = etl_155 }
	if = { limit = { etl_156 = yes } clear_global_event_target = etl_156 }
	if = { limit = { etl_157 = yes } clear_global_event_target = etl_157 }
	if = { limit = { etl_158 = yes } clear_global_event_target = etl_158 }
	if = { limit = { etl_159 = yes } clear_global_event_target = etl_159 }
	if = { limit = { etl_160 = yes } clear_global_event_target = etl_160 }
	if = { limit = { etl_161 = yes } clear_global_event_target = etl_161 }
	if = { limit = { etl_162 = yes } clear_global_event_target = etl_162 }
	if = { limit = { etl_163 = yes } clear_global_event_target = etl_163 }
	if = { limit = { etl_164 = yes } clear_global_event_target = etl_164 }
	if = { limit = { etl_165 = yes } clear_global_event_target = etl_165 }
	if = { limit = { etl_166 = yes } clear_global_event_target = etl_166 }
	if = { limit = { etl_167 = yes } clear_global_event_target = etl_167 }
	if = { limit = { etl_168 = yes } clear_global_event_target = etl_168 }
	if = { limit = { etl_169 = yes } clear_global_event_target = etl_169 }
	if = { limit = { etl_170 = yes } clear_global_event_target = etl_170 }
	if = { limit = { etl_171 = yes } clear_global_event_target = etl_171 }
	if = { limit = { etl_172 = yes } clear_global_event_target = etl_172 }
	if = { limit = { etl_173 = yes } clear_global_event_target = etl_173 }
	if = { limit = { etl_174 = yes } clear_global_event_target = etl_174 }
	if = { limit = { etl_175 = yes } clear_global_event_target = etl_175 }
	if = { limit = { etl_176 = yes } clear_global_event_target = etl_176 }
	if = { limit = { etl_177 = yes } clear_global_event_target = etl_177 }
	if = { limit = { etl_178 = yes } clear_global_event_target = etl_178 }
	if = { limit = { etl_179 = yes } clear_global_event_target = etl_179 }
	if = { limit = { etl_180 = yes } clear_global_event_target = etl_180 }
	if = { limit = { etl_181 = yes } clear_global_event_target = etl_181 }
	if = { limit = { etl_182 = yes } clear_global_event_target = etl_182 }
	if = { limit = { etl_183 = yes } clear_global_event_target = etl_183 }
	if = { limit = { etl_184 = yes } clear_global_event_target = etl_184 }
	if = { limit = { etl_185 = yes } clear_global_event_target = etl_185 }
	if = { limit = { etl_186 = yes } clear_global_event_target = etl_186 }
	if = { limit = { etl_187 = yes } clear_global_event_target = etl_187 }
	if = { limit = { etl_188 = yes } clear_global_event_target = etl_188 }
	if = { limit = { etl_189 = yes } clear_global_event_target = etl_189 }
	if = { limit = { etl_190 = yes } clear_global_event_target = etl_190 }
	if = { limit = { etl_191 = yes } clear_global_event_target = etl_191 }
	if = { limit = { etl_192 = yes } clear_global_event_target = etl_192 }
	if = { limit = { etl_193 = yes } clear_global_event_target = etl_193 }
	if = { limit = { etl_194 = yes } clear_global_event_target = etl_194 }
	if = { limit = { etl_195 = yes } clear_global_event_target = etl_195 }
	if = { limit = { etl_196 = yes } clear_global_event_target = etl_196 }
	if = { limit = { etl_197 = yes } clear_global_event_target = etl_197 }
	if = { limit = { etl_198 = yes } clear_global_event_target = etl_198 }
	if = { limit = { etl_199 = yes } clear_global_event_target = etl_199 }
	if = { limit = { etl_200 = yes } clear_global_event_target = etl_200 }
	if = { limit = { etl_201 = yes } clear_global_event_target = etl_201 }
	if = { limit = { etl_202 = yes } clear_global_event_target = etl_202 }
	if = { limit = { etl_203 = yes } clear_global_event_target = etl_203 }
	if = { limit = { etl_204 = yes } clear_global_event_target = etl_204 }
	if = { limit = { etl_205 = yes } clear_global_event_target = etl_205 }
	if = { limit = { etl_206 = yes } clear_global_event_target = etl_206 }
	if = { limit = { etl_207 = yes } clear_global_event_target = etl_207 }
	if = { limit = { etl_208 = yes } clear_global_event_target = etl_208 }
	if = { limit = { etl_209 = yes } clear_global_event_target = etl_209 }
	if = { limit = { etl_210 = yes } clear_global_event_target = etl_210 }
	if = { limit = { etl_211 = yes } clear_global_event_target = etl_211 }
	if = { limit = { etl_212 = yes } clear_global_event_target = etl_212 }
	if = { limit = { etl_213 = yes } clear_global_event_target = etl_213 }
	if = { limit = { etl_214 = yes } clear_global_event_target = etl_214 }
	if = { limit = { etl_215 = yes } clear_global_event_target = etl_215 }
	if = { limit = { etl_216 = yes } clear_global_event_target = etl_216 }
	if = { limit = { etl_217 = yes } clear_global_event_target = etl_217 }
	if = { limit = { etl_218 = yes } clear_global_event_target = etl_218 }
	if = { limit = { etl_219 = yes } clear_global_event_target = etl_219 }
	if = { limit = { etl_220 = yes } clear_global_event_target = etl_220 }
	if = { limit = { etl_221 = yes } clear_global_event_target = etl_221 }
	if = { limit = { etl_222 = yes } clear_global_event_target = etl_222 }
	if = { limit = { etl_223 = yes } clear_global_event_target = etl_223 }
	if = { limit = { etl_224 = yes } clear_global_event_target = etl_224 }
	if = { limit = { etl_225 = yes } clear_global_event_target = etl_225 }
	if = { limit = { etl_226 = yes } clear_global_event_target = etl_226 }
	if = { limit = { etl_227 = yes } clear_global_event_target = etl_227 }
	if = { limit = { etl_228 = yes } clear_global_event_target = etl_228 }
	if = { limit = { etl_229 = yes } clear_global_event_target = etl_229 }
	if = { limit = { etl_230 = yes } clear_global_event_target = etl_230 }
	if = { limit = { etl_231 = yes } clear_global_event_target = etl_231 }
	if = { limit = { etl_232 = yes } clear_global_event_target = etl_232 }
	if = { limit = { etl_233 = yes } clear_global_event_target = etl_233 }
	if = { limit = { etl_234 = yes } clear_global_event_target = etl_234 }
	if = { limit = { etl_235 = yes } clear_global_event_target = etl_235 }
	if = { limit = { etl_236 = yes } clear_global_event_target = etl_236 }
	if = { limit = { etl_237 = yes } clear_global_event_target = etl_237 }
	if = { limit = { etl_238 = yes } clear_global_event_target = etl_238 }
	if = { limit = { etl_239 = yes } clear_global_event_target = etl_239 }
	if = { limit = { etl_240 = yes } clear_global_event_target = etl_240 }
	if = { limit = { etl_241 = yes } clear_global_event_target = etl_241 }
	if = { limit = { etl_242 = yes } clear_global_event_target = etl_242 }
	if = { limit = { etl_243 = yes } clear_global_event_target = etl_243 }
	if = { limit = { etl_244 = yes } clear_global_event_target = etl_244 }
	if = { limit = { etl_245 = yes } clear_global_event_target = etl_245 }
	if = { limit = { etl_246 = yes } clear_global_event_target = etl_246 }
	if = { limit = { etl_247 = yes } clear_global_event_target = etl_247 }
	if = { limit = { etl_248 = yes } clear_global_event_target = etl_248 }
	if = { limit = { etl_249 = yes } clear_global_event_target = etl_249 }
	if = { limit = { etl_250 = yes } clear_global_event_target = etl_250 }
}

giga_event_target_list_save = {
	if = {		limit = { NOT = { exists = event_target:etl_001 } } save_global_event_target_as = etl_001 }
	else_if = {	limit = { NOT = { exists = event_target:etl_002 } } save_global_event_target_as = etl_002 }
	else_if = {	limit = { NOT = { exists = event_target:etl_003 } } save_global_event_target_as = etl_003 }
	else_if = {	limit = { NOT = { exists = event_target:etl_004 } } save_global_event_target_as = etl_004 }
	else_if = {	limit = { NOT = { exists = event_target:etl_005 } } save_global_event_target_as = etl_005 }
	else_if = {	limit = { NOT = { exists = event_target:etl_006 } } save_global_event_target_as = etl_006 }
	else_if = {	limit = { NOT = { exists = event_target:etl_007 } } save_global_event_target_as = etl_007 }
	else_if = {	limit = { NOT = { exists = event_target:etl_008 } } save_global_event_target_as = etl_008 }
	else_if = {	limit = { NOT = { exists = event_target:etl_009 } } save_global_event_target_as = etl_009 }
	else_if = {	limit = { NOT = { exists = event_target:etl_010 } } save_global_event_target_as = etl_010 }
	else_if = {	limit = { NOT = { exists = event_target:etl_011 } } save_global_event_target_as = etl_011 }
	else_if = {	limit = { NOT = { exists = event_target:etl_012 } } save_global_event_target_as = etl_012 }
	else_if = {	limit = { NOT = { exists = event_target:etl_013 } } save_global_event_target_as = etl_013 }
	else_if = {	limit = { NOT = { exists = event_target:etl_014 } } save_global_event_target_as = etl_014 }
	else_if = {	limit = { NOT = { exists = event_target:etl_015 } } save_global_event_target_as = etl_015 }
	else_if = {	limit = { NOT = { exists = event_target:etl_016 } } save_global_event_target_as = etl_016 }
	else_if = {	limit = { NOT = { exists = event_target:etl_017 } } save_global_event_target_as = etl_017 }
	else_if = {	limit = { NOT = { exists = event_target:etl_018 } } save_global_event_target_as = etl_018 }
	else_if = {	limit = { NOT = { exists = event_target:etl_019 } } save_global_event_target_as = etl_019 }
	else_if = {	limit = { NOT = { exists = event_target:etl_020 } } save_global_event_target_as = etl_020 }
	else_if = {	limit = { NOT = { exists = event_target:etl_021 } } save_global_event_target_as = etl_021 }
	else_if = {	limit = { NOT = { exists = event_target:etl_022 } } save_global_event_target_as = etl_022 }
	else_if = {	limit = { NOT = { exists = event_target:etl_023 } } save_global_event_target_as = etl_023 }
	else_if = {	limit = { NOT = { exists = event_target:etl_024 } } save_global_event_target_as = etl_024 }
	else_if = {	limit = { NOT = { exists = event_target:etl_025 } } save_global_event_target_as = etl_025 }
	else_if = {	limit = { NOT = { exists = event_target:etl_026 } } save_global_event_target_as = etl_026 }
	else_if = {	limit = { NOT = { exists = event_target:etl_027 } } save_global_event_target_as = etl_027 }
	else_if = {	limit = { NOT = { exists = event_target:etl_028 } } save_global_event_target_as = etl_028 }
	else_if = {	limit = { NOT = { exists = event_target:etl_029 } } save_global_event_target_as = etl_029 }
	else_if = {	limit = { NOT = { exists = event_target:etl_030 } } save_global_event_target_as = etl_030 }
	else_if = {	limit = { NOT = { exists = event_target:etl_031 } } save_global_event_target_as = etl_031 }
	else_if = {	limit = { NOT = { exists = event_target:etl_032 } } save_global_event_target_as = etl_032 }
	else_if = {	limit = { NOT = { exists = event_target:etl_033 } } save_global_event_target_as = etl_033 }
	else_if = {	limit = { NOT = { exists = event_target:etl_034 } } save_global_event_target_as = etl_034 }
	else_if = {	limit = { NOT = { exists = event_target:etl_035 } } save_global_event_target_as = etl_035 }
	else_if = {	limit = { NOT = { exists = event_target:etl_036 } } save_global_event_target_as = etl_036 }
	else_if = {	limit = { NOT = { exists = event_target:etl_037 } } save_global_event_target_as = etl_037 }
	else_if = {	limit = { NOT = { exists = event_target:etl_038 } } save_global_event_target_as = etl_038 }
	else_if = {	limit = { NOT = { exists = event_target:etl_039 } } save_global_event_target_as = etl_039 }
	else_if = {	limit = { NOT = { exists = event_target:etl_040 } } save_global_event_target_as = etl_040 }
	else_if = {	limit = { NOT = { exists = event_target:etl_041 } } save_global_event_target_as = etl_041 }
	else_if = {	limit = { NOT = { exists = event_target:etl_042 } } save_global_event_target_as = etl_042 }
	else_if = {	limit = { NOT = { exists = event_target:etl_043 } } save_global_event_target_as = etl_043 }
	else_if = {	limit = { NOT = { exists = event_target:etl_044 } } save_global_event_target_as = etl_044 }
	else_if = {	limit = { NOT = { exists = event_target:etl_045 } } save_global_event_target_as = etl_045 }
	else_if = {	limit = { NOT = { exists = event_target:etl_046 } } save_global_event_target_as = etl_046 }
	else_if = {	limit = { NOT = { exists = event_target:etl_047 } } save_global_event_target_as = etl_047 }
	else_if = {	limit = { NOT = { exists = event_target:etl_048 } } save_global_event_target_as = etl_048 }
	else_if = {	limit = { NOT = { exists = event_target:etl_049 } } save_global_event_target_as = etl_049 }
	else_if = {	limit = { NOT = { exists = event_target:etl_050 } } save_global_event_target_as = etl_050 }
	else_if = {	limit = { NOT = { exists = event_target:etl_051 } } save_global_event_target_as = etl_051 }
	else_if = {	limit = { NOT = { exists = event_target:etl_052 } } save_global_event_target_as = etl_052 }
	else_if = {	limit = { NOT = { exists = event_target:etl_053 } } save_global_event_target_as = etl_053 }
	else_if = {	limit = { NOT = { exists = event_target:etl_054 } } save_global_event_target_as = etl_054 }
	else_if = {	limit = { NOT = { exists = event_target:etl_055 } } save_global_event_target_as = etl_055 }
	else_if = {	limit = { NOT = { exists = event_target:etl_056 } } save_global_event_target_as = etl_056 }
	else_if = {	limit = { NOT = { exists = event_target:etl_057 } } save_global_event_target_as = etl_057 }
	else_if = {	limit = { NOT = { exists = event_target:etl_058 } } save_global_event_target_as = etl_058 }
	else_if = {	limit = { NOT = { exists = event_target:etl_059 } } save_global_event_target_as = etl_059 }
	else_if = {	limit = { NOT = { exists = event_target:etl_060 } } save_global_event_target_as = etl_060 }
	else_if = {	limit = { NOT = { exists = event_target:etl_061 } } save_global_event_target_as = etl_061 }
	else_if = {	limit = { NOT = { exists = event_target:etl_062 } } save_global_event_target_as = etl_062 }
	else_if = {	limit = { NOT = { exists = event_target:etl_063 } } save_global_event_target_as = etl_063 }
	else_if = {	limit = { NOT = { exists = event_target:etl_064 } } save_global_event_target_as = etl_064 }
	else_if = {	limit = { NOT = { exists = event_target:etl_065 } } save_global_event_target_as = etl_065 }
	else_if = {	limit = { NOT = { exists = event_target:etl_066 } } save_global_event_target_as = etl_066 }
	else_if = {	limit = { NOT = { exists = event_target:etl_067 } } save_global_event_target_as = etl_067 }
	else_if = {	limit = { NOT = { exists = event_target:etl_068 } } save_global_event_target_as = etl_068 }
	else_if = {	limit = { NOT = { exists = event_target:etl_069 } } save_global_event_target_as = etl_069 }
	else_if = {	limit = { NOT = { exists = event_target:etl_070 } } save_global_event_target_as = etl_070 }
	else_if = {	limit = { NOT = { exists = event_target:etl_071 } } save_global_event_target_as = etl_071 }
	else_if = {	limit = { NOT = { exists = event_target:etl_072 } } save_global_event_target_as = etl_072 }
	else_if = {	limit = { NOT = { exists = event_target:etl_073 } } save_global_event_target_as = etl_073 }
	else_if = {	limit = { NOT = { exists = event_target:etl_074 } } save_global_event_target_as = etl_074 }
	else_if = {	limit = { NOT = { exists = event_target:etl_075 } } save_global_event_target_as = etl_075 }
	else_if = {	limit = { NOT = { exists = event_target:etl_076 } } save_global_event_target_as = etl_076 }
	else_if = {	limit = { NOT = { exists = event_target:etl_077 } } save_global_event_target_as = etl_077 }
	else_if = {	limit = { NOT = { exists = event_target:etl_078 } } save_global_event_target_as = etl_078 }
	else_if = {	limit = { NOT = { exists = event_target:etl_079 } } save_global_event_target_as = etl_079 }
	else_if = {	limit = { NOT = { exists = event_target:etl_080 } } save_global_event_target_as = etl_080 }
	else_if = {	limit = { NOT = { exists = event_target:etl_081 } } save_global_event_target_as = etl_081 }
	else_if = {	limit = { NOT = { exists = event_target:etl_082 } } save_global_event_target_as = etl_082 }
	else_if = {	limit = { NOT = { exists = event_target:etl_083 } } save_global_event_target_as = etl_083 }
	else_if = {	limit = { NOT = { exists = event_target:etl_084 } } save_global_event_target_as = etl_084 }
	else_if = {	limit = { NOT = { exists = event_target:etl_085 } } save_global_event_target_as = etl_085 }
	else_if = {	limit = { NOT = { exists = event_target:etl_086 } } save_global_event_target_as = etl_086 }
	else_if = {	limit = { NOT = { exists = event_target:etl_087 } } save_global_event_target_as = etl_087 }
	else_if = {	limit = { NOT = { exists = event_target:etl_088 } } save_global_event_target_as = etl_088 }
	else_if = {	limit = { NOT = { exists = event_target:etl_089 } } save_global_event_target_as = etl_089 }
	else_if = {	limit = { NOT = { exists = event_target:etl_090 } } save_global_event_target_as = etl_090 }
	else_if = {	limit = { NOT = { exists = event_target:etl_091 } } save_global_event_target_as = etl_091 }
	else_if = {	limit = { NOT = { exists = event_target:etl_092 } } save_global_event_target_as = etl_092 }
	else_if = {	limit = { NOT = { exists = event_target:etl_093 } } save_global_event_target_as = etl_093 }
	else_if = {	limit = { NOT = { exists = event_target:etl_094 } } save_global_event_target_as = etl_094 }
	else_if = {	limit = { NOT = { exists = event_target:etl_095 } } save_global_event_target_as = etl_095 }
	else_if = {	limit = { NOT = { exists = event_target:etl_096 } } save_global_event_target_as = etl_096 }
	else_if = {	limit = { NOT = { exists = event_target:etl_097 } } save_global_event_target_as = etl_097 }
	else_if = {	limit = { NOT = { exists = event_target:etl_098 } } save_global_event_target_as = etl_098 }
	else_if = {	limit = { NOT = { exists = event_target:etl_099 } } save_global_event_target_as = etl_099 }
	else_if = {	limit = { NOT = { exists = event_target:etl_100 } } save_global_event_target_as = etl_100 }
	else_if = {	limit = { NOT = { exists = event_target:etl_101 } } save_global_event_target_as = etl_101 }
	else_if = {	limit = { NOT = { exists = event_target:etl_102 } } save_global_event_target_as = etl_102 }
	else_if = {	limit = { NOT = { exists = event_target:etl_103 } } save_global_event_target_as = etl_103 }
	else_if = {	limit = { NOT = { exists = event_target:etl_104 } } save_global_event_target_as = etl_104 }
	else_if = {	limit = { NOT = { exists = event_target:etl_105 } } save_global_event_target_as = etl_105 }
	else_if = {	limit = { NOT = { exists = event_target:etl_106 } } save_global_event_target_as = etl_106 }
	else_if = {	limit = { NOT = { exists = event_target:etl_107 } } save_global_event_target_as = etl_107 }
	else_if = {	limit = { NOT = { exists = event_target:etl_108 } } save_global_event_target_as = etl_108 }
	else_if = {	limit = { NOT = { exists = event_target:etl_109 } } save_global_event_target_as = etl_109 }
	else_if = {	limit = { NOT = { exists = event_target:etl_110 } } save_global_event_target_as = etl_110 }
	else_if = {	limit = { NOT = { exists = event_target:etl_111 } } save_global_event_target_as = etl_111 }
	else_if = {	limit = { NOT = { exists = event_target:etl_112 } } save_global_event_target_as = etl_112 }
	else_if = {	limit = { NOT = { exists = event_target:etl_113 } } save_global_event_target_as = etl_113 }
	else_if = {	limit = { NOT = { exists = event_target:etl_114 } } save_global_event_target_as = etl_114 }
	else_if = {	limit = { NOT = { exists = event_target:etl_115 } } save_global_event_target_as = etl_115 }
	else_if = {	limit = { NOT = { exists = event_target:etl_116 } } save_global_event_target_as = etl_116 }
	else_if = {	limit = { NOT = { exists = event_target:etl_117 } } save_global_event_target_as = etl_117 }
	else_if = {	limit = { NOT = { exists = event_target:etl_118 } } save_global_event_target_as = etl_118 }
	else_if = {	limit = { NOT = { exists = event_target:etl_119 } } save_global_event_target_as = etl_119 }
	else_if = {	limit = { NOT = { exists = event_target:etl_120 } } save_global_event_target_as = etl_120 }
	else_if = {	limit = { NOT = { exists = event_target:etl_121 } } save_global_event_target_as = etl_121 }
	else_if = {	limit = { NOT = { exists = event_target:etl_122 } } save_global_event_target_as = etl_122 }
	else_if = {	limit = { NOT = { exists = event_target:etl_123 } } save_global_event_target_as = etl_123 }
	else_if = {	limit = { NOT = { exists = event_target:etl_124 } } save_global_event_target_as = etl_124 }
	else_if = {	limit = { NOT = { exists = event_target:etl_125 } } save_global_event_target_as = etl_125 }
	else_if = {	limit = { NOT = { exists = event_target:etl_126 } } save_global_event_target_as = etl_126 }
	else_if = {	limit = { NOT = { exists = event_target:etl_127 } } save_global_event_target_as = etl_127 }
	else_if = {	limit = { NOT = { exists = event_target:etl_128 } } save_global_event_target_as = etl_128 }
	else_if = {	limit = { NOT = { exists = event_target:etl_129 } } save_global_event_target_as = etl_129 }
	else_if = {	limit = { NOT = { exists = event_target:etl_130 } } save_global_event_target_as = etl_130 }
	else_if = {	limit = { NOT = { exists = event_target:etl_131 } } save_global_event_target_as = etl_131 }
	else_if = {	limit = { NOT = { exists = event_target:etl_132 } } save_global_event_target_as = etl_132 }
	else_if = {	limit = { NOT = { exists = event_target:etl_133 } } save_global_event_target_as = etl_133 }
	else_if = {	limit = { NOT = { exists = event_target:etl_134 } } save_global_event_target_as = etl_134 }
	else_if = {	limit = { NOT = { exists = event_target:etl_135 } } save_global_event_target_as = etl_135 }
	else_if = {	limit = { NOT = { exists = event_target:etl_136 } } save_global_event_target_as = etl_136 }
	else_if = {	limit = { NOT = { exists = event_target:etl_137 } } save_global_event_target_as = etl_137 }
	else_if = {	limit = { NOT = { exists = event_target:etl_138 } } save_global_event_target_as = etl_138 }
	else_if = {	limit = { NOT = { exists = event_target:etl_139 } } save_global_event_target_as = etl_139 }
	else_if = {	limit = { NOT = { exists = event_target:etl_140 } } save_global_event_target_as = etl_140 }
	else_if = {	limit = { NOT = { exists = event_target:etl_141 } } save_global_event_target_as = etl_141 }
	else_if = {	limit = { NOT = { exists = event_target:etl_142 } } save_global_event_target_as = etl_142 }
	else_if = {	limit = { NOT = { exists = event_target:etl_143 } } save_global_event_target_as = etl_143 }
	else_if = {	limit = { NOT = { exists = event_target:etl_144 } } save_global_event_target_as = etl_144 }
	else_if = {	limit = { NOT = { exists = event_target:etl_145 } } save_global_event_target_as = etl_145 }
	else_if = {	limit = { NOT = { exists = event_target:etl_146 } } save_global_event_target_as = etl_146 }
	else_if = {	limit = { NOT = { exists = event_target:etl_147 } } save_global_event_target_as = etl_147 }
	else_if = {	limit = { NOT = { exists = event_target:etl_148 } } save_global_event_target_as = etl_148 }
	else_if = {	limit = { NOT = { exists = event_target:etl_149 } } save_global_event_target_as = etl_149 }
	else_if = {	limit = { NOT = { exists = event_target:etl_150 } } save_global_event_target_as = etl_150 }
	else_if = {	limit = { NOT = { exists = event_target:etl_151 } } save_global_event_target_as = etl_151 }
	else_if = {	limit = { NOT = { exists = event_target:etl_152 } } save_global_event_target_as = etl_152 }
	else_if = {	limit = { NOT = { exists = event_target:etl_153 } } save_global_event_target_as = etl_153 }
	else_if = {	limit = { NOT = { exists = event_target:etl_154 } } save_global_event_target_as = etl_154 }
	else_if = {	limit = { NOT = { exists = event_target:etl_155 } } save_global_event_target_as = etl_155 }
	else_if = {	limit = { NOT = { exists = event_target:etl_156 } } save_global_event_target_as = etl_156 }
	else_if = {	limit = { NOT = { exists = event_target:etl_157 } } save_global_event_target_as = etl_157 }
	else_if = {	limit = { NOT = { exists = event_target:etl_158 } } save_global_event_target_as = etl_158 }
	else_if = {	limit = { NOT = { exists = event_target:etl_159 } } save_global_event_target_as = etl_159 }
	else_if = {	limit = { NOT = { exists = event_target:etl_160 } } save_global_event_target_as = etl_160 }
	else_if = {	limit = { NOT = { exists = event_target:etl_161 } } save_global_event_target_as = etl_161 }
	else_if = {	limit = { NOT = { exists = event_target:etl_162 } } save_global_event_target_as = etl_162 }
	else_if = {	limit = { NOT = { exists = event_target:etl_163 } } save_global_event_target_as = etl_163 }
	else_if = {	limit = { NOT = { exists = event_target:etl_164 } } save_global_event_target_as = etl_164 }
	else_if = {	limit = { NOT = { exists = event_target:etl_165 } } save_global_event_target_as = etl_165 }
	else_if = {	limit = { NOT = { exists = event_target:etl_166 } } save_global_event_target_as = etl_166 }
	else_if = {	limit = { NOT = { exists = event_target:etl_167 } } save_global_event_target_as = etl_167 }
	else_if = {	limit = { NOT = { exists = event_target:etl_168 } } save_global_event_target_as = etl_168 }
	else_if = {	limit = { NOT = { exists = event_target:etl_169 } } save_global_event_target_as = etl_169 }
	else_if = {	limit = { NOT = { exists = event_target:etl_170 } } save_global_event_target_as = etl_170 }
	else_if = {	limit = { NOT = { exists = event_target:etl_171 } } save_global_event_target_as = etl_171 }
	else_if = {	limit = { NOT = { exists = event_target:etl_172 } } save_global_event_target_as = etl_172 }
	else_if = {	limit = { NOT = { exists = event_target:etl_173 } } save_global_event_target_as = etl_173 }
	else_if = {	limit = { NOT = { exists = event_target:etl_174 } } save_global_event_target_as = etl_174 }
	else_if = {	limit = { NOT = { exists = event_target:etl_175 } } save_global_event_target_as = etl_175 }
	else_if = {	limit = { NOT = { exists = event_target:etl_176 } } save_global_event_target_as = etl_176 }
	else_if = {	limit = { NOT = { exists = event_target:etl_177 } } save_global_event_target_as = etl_177 }
	else_if = {	limit = { NOT = { exists = event_target:etl_178 } } save_global_event_target_as = etl_178 }
	else_if = {	limit = { NOT = { exists = event_target:etl_179 } } save_global_event_target_as = etl_179 }
	else_if = {	limit = { NOT = { exists = event_target:etl_180 } } save_global_event_target_as = etl_180 }
	else_if = {	limit = { NOT = { exists = event_target:etl_181 } } save_global_event_target_as = etl_181 }
	else_if = {	limit = { NOT = { exists = event_target:etl_182 } } save_global_event_target_as = etl_182 }
	else_if = {	limit = { NOT = { exists = event_target:etl_183 } } save_global_event_target_as = etl_183 }
	else_if = {	limit = { NOT = { exists = event_target:etl_184 } } save_global_event_target_as = etl_184 }
	else_if = {	limit = { NOT = { exists = event_target:etl_185 } } save_global_event_target_as = etl_185 }
	else_if = {	limit = { NOT = { exists = event_target:etl_186 } } save_global_event_target_as = etl_186 }
	else_if = {	limit = { NOT = { exists = event_target:etl_187 } } save_global_event_target_as = etl_187 }
	else_if = {	limit = { NOT = { exists = event_target:etl_188 } } save_global_event_target_as = etl_188 }
	else_if = {	limit = { NOT = { exists = event_target:etl_189 } } save_global_event_target_as = etl_189 }
	else_if = {	limit = { NOT = { exists = event_target:etl_190 } } save_global_event_target_as = etl_190 }
	else_if = {	limit = { NOT = { exists = event_target:etl_191 } } save_global_event_target_as = etl_191 }
	else_if = {	limit = { NOT = { exists = event_target:etl_192 } } save_global_event_target_as = etl_192 }
	else_if = {	limit = { NOT = { exists = event_target:etl_193 } } save_global_event_target_as = etl_193 }
	else_if = {	limit = { NOT = { exists = event_target:etl_194 } } save_global_event_target_as = etl_194 }
	else_if = {	limit = { NOT = { exists = event_target:etl_195 } } save_global_event_target_as = etl_195 }
	else_if = {	limit = { NOT = { exists = event_target:etl_196 } } save_global_event_target_as = etl_196 }
	else_if = {	limit = { NOT = { exists = event_target:etl_197 } } save_global_event_target_as = etl_197 }
	else_if = {	limit = { NOT = { exists = event_target:etl_198 } } save_global_event_target_as = etl_198 }
	else_if = {	limit = { NOT = { exists = event_target:etl_199 } } save_global_event_target_as = etl_199 }
	else_if = {	limit = { NOT = { exists = event_target:etl_200 } } save_global_event_target_as = etl_200 }
	else_if = {	limit = { NOT = { exists = event_target:etl_201 } } save_global_event_target_as = etl_201 }
	else_if = {	limit = { NOT = { exists = event_target:etl_202 } } save_global_event_target_as = etl_202 }
	else_if = {	limit = { NOT = { exists = event_target:etl_203 } } save_global_event_target_as = etl_203 }
	else_if = {	limit = { NOT = { exists = event_target:etl_204 } } save_global_event_target_as = etl_204 }
	else_if = {	limit = { NOT = { exists = event_target:etl_205 } } save_global_event_target_as = etl_205 }
	else_if = {	limit = { NOT = { exists = event_target:etl_206 } } save_global_event_target_as = etl_206 }
	else_if = {	limit = { NOT = { exists = event_target:etl_207 } } save_global_event_target_as = etl_207 }
	else_if = {	limit = { NOT = { exists = event_target:etl_208 } } save_global_event_target_as = etl_208 }
	else_if = {	limit = { NOT = { exists = event_target:etl_209 } } save_global_event_target_as = etl_209 }
	else_if = {	limit = { NOT = { exists = event_target:etl_210 } } save_global_event_target_as = etl_210 }
	else_if = {	limit = { NOT = { exists = event_target:etl_211 } } save_global_event_target_as = etl_211 }
	else_if = {	limit = { NOT = { exists = event_target:etl_212 } } save_global_event_target_as = etl_212 }
	else_if = {	limit = { NOT = { exists = event_target:etl_213 } } save_global_event_target_as = etl_213 }
	else_if = {	limit = { NOT = { exists = event_target:etl_214 } } save_global_event_target_as = etl_214 }
	else_if = {	limit = { NOT = { exists = event_target:etl_215 } } save_global_event_target_as = etl_215 }
	else_if = {	limit = { NOT = { exists = event_target:etl_216 } } save_global_event_target_as = etl_216 }
	else_if = {	limit = { NOT = { exists = event_target:etl_217 } } save_global_event_target_as = etl_217 }
	else_if = {	limit = { NOT = { exists = event_target:etl_218 } } save_global_event_target_as = etl_218 }
	else_if = {	limit = { NOT = { exists = event_target:etl_219 } } save_global_event_target_as = etl_219 }
	else_if = {	limit = { NOT = { exists = event_target:etl_220 } } save_global_event_target_as = etl_220 }
	else_if = {	limit = { NOT = { exists = event_target:etl_221 } } save_global_event_target_as = etl_221 }
	else_if = {	limit = { NOT = { exists = event_target:etl_222 } } save_global_event_target_as = etl_222 }
	else_if = {	limit = { NOT = { exists = event_target:etl_223 } } save_global_event_target_as = etl_223 }
	else_if = {	limit = { NOT = { exists = event_target:etl_224 } } save_global_event_target_as = etl_224 }
	else_if = {	limit = { NOT = { exists = event_target:etl_225 } } save_global_event_target_as = etl_225 }
	else_if = {	limit = { NOT = { exists = event_target:etl_226 } } save_global_event_target_as = etl_226 }
	else_if = {	limit = { NOT = { exists = event_target:etl_227 } } save_global_event_target_as = etl_227 }
	else_if = {	limit = { NOT = { exists = event_target:etl_228 } } save_global_event_target_as = etl_228 }
	else_if = {	limit = { NOT = { exists = event_target:etl_229 } } save_global_event_target_as = etl_229 }
	else_if = {	limit = { NOT = { exists = event_target:etl_230 } } save_global_event_target_as = etl_230 }
	else_if = {	limit = { NOT = { exists = event_target:etl_231 } } save_global_event_target_as = etl_231 }
	else_if = {	limit = { NOT = { exists = event_target:etl_232 } } save_global_event_target_as = etl_232 }
	else_if = {	limit = { NOT = { exists = event_target:etl_233 } } save_global_event_target_as = etl_233 }
	else_if = {	limit = { NOT = { exists = event_target:etl_234 } } save_global_event_target_as = etl_234 }
	else_if = {	limit = { NOT = { exists = event_target:etl_235 } } save_global_event_target_as = etl_235 }
	else_if = {	limit = { NOT = { exists = event_target:etl_236 } } save_global_event_target_as = etl_236 }
	else_if = {	limit = { NOT = { exists = event_target:etl_237 } } save_global_event_target_as = etl_237 }
	else_if = {	limit = { NOT = { exists = event_target:etl_238 } } save_global_event_target_as = etl_238 }
	else_if = {	limit = { NOT = { exists = event_target:etl_239 } } save_global_event_target_as = etl_239 }
	else_if = {	limit = { NOT = { exists = event_target:etl_240 } } save_global_event_target_as = etl_240 }
	else_if = {	limit = { NOT = { exists = event_target:etl_241 } } save_global_event_target_as = etl_241 }
	else_if = {	limit = { NOT = { exists = event_target:etl_242 } } save_global_event_target_as = etl_242 }
	else_if = {	limit = { NOT = { exists = event_target:etl_243 } } save_global_event_target_as = etl_243 }
	else_if = {	limit = { NOT = { exists = event_target:etl_244 } } save_global_event_target_as = etl_244 }
	else_if = {	limit = { NOT = { exists = event_target:etl_245 } } save_global_event_target_as = etl_245 }
	else_if = {	limit = { NOT = { exists = event_target:etl_246 } } save_global_event_target_as = etl_246 }
	else_if = {	limit = { NOT = { exists = event_target:etl_247 } } save_global_event_target_as = etl_247 }
	else_if = {	limit = { NOT = { exists = event_target:etl_248 } } save_global_event_target_as = etl_248 }
	else_if = {	limit = { NOT = { exists = event_target:etl_249 } } save_global_event_target_as = etl_249 }
	else_if = {	limit = { NOT = { exists = event_target:etl_250 } } save_global_event_target_as = etl_250 }
}

giga_dominate = {
	save_event_target_as = giga_planet_illuminated
	if = {
		limit = {
			NOR = {
				any_system_planet = {
					has_planet_flag = gigaflusion
					NOT = { has_planet_flag = katown_psi_shield_down }
					NOR = {
						has_planet_flag = nonkatzen_unification
						event_target:flusion_primitives_country = {
							check_variable = {
								which = katown_res
								value = 3
							}
						}
					}
					owner = {
						OR = {
							is_country_type = katzenartig_imperium
							is_country_type = primitive
						}
					}
				}
				any_system_planet = {
					has_planet_flag = paluushia
					owner = { is_country_type = primitive }
				}
			}
		}
		root = { country_event = { id = giga_psychic_beacon.004 days = 2 } }
		every_system_planet = {
			limit = {  is_colony = yes }
			set_owner = ROOT
			every_owned_pop = {
				if = {
					limit = {
						is_gestalt = no
						is_robot_pop = yes
					}
					kill_pop = yes
				}
				else = {
					modify_species = { species = this add_trait = trait_psionic add_traits_at_start_of_list = yes }
					modify_species = { species = this add_trait = trait_enthralled }
				}
			}
		}
		starbase = {
			set_owner = ROOT
		}
	}
	else_if = {
		limit = {
			any_system_planet = {
				has_planet_flag = gigaflusion
				NOT = { has_planet_flag = nonkatzen_unification }
				OR = {
					owner = { is_country_type = primitive }
					owner = { is_country_type = katzenartig_imperium }
				}
			}
		}
		root = { country_event = { id = giga_psychic_beacon.0041 days = 2 } } #tried dominating flusion
	}
	else_if = {
		limit = {
			any_system_planet = {
				has_planet_flag = paluushia
				owner = { is_country_type = primitive }
			}
		}
		every_system_planet = {
			limit = {
				is_colony = yes
				NOR = {
					has_planet_flag = paluushia
					owner = { is_country_type = primitive }
				}
			}
			set_owner = ROOT
			every_owned_pop = {
				if = {
					limit = {
						is_gestalt = no
						is_robot_pop = yes
					}
					kill_pop = yes
				}
				else = {
					modify_species = { species = this add_trait = trait_psionic add_traits_at_start_of_list = yes }
					modify_species = { species = this add_trait = trait_enthralled }
				}
			}
		}
		starbase = {
			set_owner = ROOT
		}
		event_target:paluushia = {
			owner = {
				add_modifier = {
					modifier = paluush_psionic_beacon_buff
					days = -1
				}
			}
		}
		root = { country_event = { id = giga_psychic_beacon.0042 days = 2 } } #tried dominating paluush
	}
}

giga_imprison = {
	save_event_target_as = giga_planet_illuminated
	if = {
		limit = {
			has_planet_flag = gigaflusion
			NOT = { has_planet_flag = katown_psi_shield_down }
			NOR = {
				has_planet_flag = nonkatzen_unification
				event_target:flusion_primitives_country = {
					check_variable = {
						which = katown_res
						value = 3
					}
				}
			}
			OR = {
				owner = { is_country_type = primitive }
				owner = { is_country_type = katzenartig_imperium }
			}
		}
		root = { country_event = { id = giga_psychic_beacon.0061 days = 2 } } #tried shrouding flusion
		if = {
			limit = {
				NOT = { has_planet_flag = ezics_mutated }
			}
			root = { country_event = { id = giga_psychic_beacon.00611 days = 30 } } #ezics mutate to infused
			set_planet_flag = ezics_mutated
		}
	}
	else_if = {
		limit = {
			has_planet_flag = paluushia
			owner = { is_country_type = primitive }
		}
		owner = {
			add_modifier = {
				modifier = paluush_psionic_beacon_buff
				days = -1
			}
		}
		root = { country_event = { id = giga_psychic_beacon.0062 days = 2 } } #tried shrouding paluush
	}
	# replaces below
	else = {
		giga_shroud_planet = yes
		save_event_target_as = giga_planet_illuminated
		root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	}
	#else_if = {
	#	limit = {
	#		habitable_structure = yes
	#	}
	#	if = {
	#		limit = { is_planet_class = pc_habitat }
	#		every_owned_pop = { kill_pop = yes }
	#		remove_planet = yes
	#		root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	#	}
	#	else_if = {
	#		limit = {
	#			is_giga_standard_ringworld = yes
	#		}
	#		every_owned_pop = { kill_pop = yes }
	#		change_pc = pc_ringworld_habitable_shrouded
	#		if = {
	#			limit = { has_planet_flag = giga_ringworld_gar }
	#			giga_set_ringworld_graphical_culture = {
	#				TARGET = this
	#				SOURCE = solar_system.starbase.owner
	#				SIZE = gargantuan
	#				TYPE = shrouded_habitable
	#			}
	#		}
	#		else_if = {
	#			limit = { has_planet_flag = giga_ringworld_beh }
	#			giga_set_ringworld_graphical_culture = {
	#				TARGET = this
	#				SOURCE = solar_system.starbase.owner
	#				SIZE = behemoth
	#				TYPE = shrouded_habitable
	#			}
	#		}
	#		else_if = {
	#			limit = { has_planet_flag = giga_ringworld_tit }
	#			giga_set_ringworld_graphical_culture = {
	#				TARGET = this
	#				SOURCE = solar_system.starbase.owner
	#				SIZE = titanic
	#				TYPE = shrouded_habitable
	#			}
	#		}
	#		else = {
	#			giga_set_ringworld_graphical_culture = {
	#				TARGET = this
	#				SOURCE = solar_system.starbase.owner
	#				SIZE = vanilla
	#				TYPE = shrouded_habitable
	#				VANILLA_TYPE = habitable #Unfortunate but if a proper version isn't included it probably doesn't have shrouded support
	#			}
	#		}
	#		save_event_target_as = giga_planet_illuminated
	#		root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	#	}
	#	else_if = {
	#		limit = {
	#			is_planet_class = pc_squareworld_habitable
	#		}
	#		change_pc = pc_squareworld_shrouded_habitable #Not even the funny square is safe from me
	#		every_owned_pop = { kill_pop = yes }
	#		save_event_target_as = giga_planet_illuminated
	#		root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	#	}
	#	else_if = {
	#		limit = {
	#			is_planet_class = pc_giga_penrose_habitable
	#		}
	#		change_pc = pc_giga_penrose_shrouded_habitable
	#		every_owned_pop = { kill_pop = yes }
	#		save_event_target_as = giga_planet_illuminated
	#		root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	#	}
	#	else_if = {
	#		limit = {
	#			is_planet_class = pc_equatorial_shipyard
	#		}
	#		change_pc = pc_shrouded_equatorial_shipyard
	#		every_owned_pop = { kill_pop = yes }
	#		save_event_target_as = giga_planet_illuminated
	#		root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	#	}
	#	else_if = {
	#		limit = {
	#			is_planet_class = pc_interstellar_ringworld_habitable
	#		}
	#		change_pc = pc_interstellar_shrouded_ringworld_habitable
	#		every_owned_pop = { kill_pop = yes }
	#		save_event_target_as = giga_planet_illuminated
	#		root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	#	}
	#	else = {
	#		add_modifier = {
	#			modifier = beacon_shrouded_habitable_structure
	#			days = 5400
	#		}
	#		create_ambient_object = {
	#			type = aeternum_consecrated_shroud
	#			location = this
	#			use_3d_location = yes
	#			entity_scale_to_size = yes
	#		}
	#		every_owned_pop = { kill_pop = yes }
	#		save_event_target_as = giga_planet_illuminated
	#		root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	#	}
	#}
	#else = {
	#	every_owned_pop = { kill_pop = yes }
	#	change_pc = pc_shrouded
	#	clear_planet_modifiers = yes
	#	clear_deposits = yes
	#	save_event_target_as = giga_planet_illuminated
	#	root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
	#}
}

# change a planet to its equivalent shrouded version, or apply a debuff to structures which don't have one
giga_shroud_planet = {
	if = {
		limit = {
			habitable_structure = yes
		}
		if = {
			limit = { is_planet_class = pc_habitat }
			every_owned_pop = { kill_pop = yes }
		}
		else_if = {
			limit = {
				giga_is_standard_ringworld = yes
			}
			every_owned_pop = { kill_pop = yes }
			change_pc = pc_ringworld_habitable_shrouded
			if = {
				limit = { has_planet_flag = giga_ringworld_gar }
				giga_set_ringworld_graphical_culture = {
					TARGET = this
					SOURCE = solar_system.starbase.owner
					SIZE = gargantuan
					TYPE = shrouded_habitable
				}
			}
			else_if = {
				limit = { has_planet_flag = giga_ringworld_beh }
				giga_set_ringworld_graphical_culture = {
					TARGET = this
					SOURCE = solar_system.starbase.owner
					SIZE = behemoth
					TYPE = shrouded_habitable
				}
			}
			else_if = {
				limit = { has_planet_flag = giga_ringworld_tit }
				giga_set_ringworld_graphical_culture = {
					TARGET = this
					SOURCE = solar_system.starbase.owner
					SIZE = titanic
					TYPE = shrouded_habitable
				}
			}
			else = {
				giga_set_ringworld_graphical_culture = {
					TARGET = this
					SOURCE = solar_system.starbase.owner
					SIZE = vanilla
					TYPE = shrouded_habitable
					VANILLA_TYPE = habitable #Unfortunate but if a proper version isn't included it probably doesn't have shrouded support
				}
			}
		}
		else_if = {
			limit = {
				is_planet_class = pc_squareworld_habitable
			}
			change_pc = pc_squareworld_shrouded_habitable #Not even the funny square is safe from me
			every_owned_pop = { kill_pop = yes }
		}
		else_if = {
			limit = {
				is_planet_class = pc_giga_penrose_habitable
			}
			change_pc = pc_giga_penrose_shrouded_habitable
			every_owned_pop = { kill_pop = yes }
		}
		else_if = {
			limit = {
				is_planet_class = pc_equatorial_shipyard
			}
			change_pc = pc_shrouded_equatorial_shipyard
			every_owned_pop = { kill_pop = yes }
		}
		else_if = {
			limit = {
				is_planet_class = pc_interstellar_ringworld_habitable
			}
			change_pc = pc_interstellar_shrouded_ringworld_habitable
			every_owned_pop = { kill_pop = yes }
		}
		else = {
			add_modifier = {
				modifier = beacon_shrouded_habitable_structure
				#days = 5400 # meant to be forever
			}
			create_ambient_object = {
				type = aeternum_consecrated_shroud
				location = this
				use_3d_location = yes
				entity_scale_to_size = yes
			}
			every_owned_pop = { kill_pop = yes }
		}
	}
	else = {
		every_owned_pop = { kill_pop = yes }
		change_pc = pc_shrouded
		clear_planet_modifiers = yes
		clear_deposits = yes
	}
}

giga_conjure = {
	save_event_target_as = giga_planet_illuminated
	if = { #Kaiser captures them
		limit = {
			has_planet_flag = gigaflusion
			NOT = { has_planet_flag = katown_psi_shield_down }
			NOR = {
				has_planet_flag = nonkatzen_unification
				event_target:flusion_primitives_country = {
					check_variable = {
						which = katown_res
						value = 3
					}
				}
			}
			OR = {
				owner = { is_country_type = primitive }
				owner = { is_country_type = katzenartig_imperium }
			}
		}
		while = {
			count = 4
			create_army = {
				name = NAME_katzenpsionic_army
				owner = event_target:flusion_primitives_country
				species = event_target:flusion_katzens
				type = "beacon_shroud_army_defensive"
				land_army = yes
			}
		}
		root = { country_event = { id = giga_psychic_beacon.012 days = 2 } }
	}
	else_if = { #Paluushia flings em back
		limit = {
			has_planet_flag = paluushia
			owner = { is_country_type = primitive }
		}
		root.capital_scope = {
			add_modifier = {
				modifier = paluushia_curses_beacon
				days = 360
			}
		}
		root = { country_event = { id = giga_psychic_beacon.013 days = 2 } }
	}
	else = {
		set_planet_flag = beacon_armies_conjured
		while = {
			count = 4
			create_army = {
				name = NAME_katzenpsionic_defense
				owner = root
				species = root
				type = "beacon_shroud_army_defensive"
				land_army = yes
			}
		}
		root = { country_event = { id = giga_psychic_beacon.011 days = 2 } }
	}
}

giga_imprint = {
	save_global_event_target_as = giga_leader_imprinted
	if = {
		limit = {
			has_skill = 1
		}
		random_list = {
			63 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			37 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else_if = {
		limit = {
			has_skill = 2
		}
		random_list = {
			56 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			44 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else_if = {
		limit = {
			has_skill = 3
		}
		random_list = {
			49 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			51 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else_if = {
		limit = {
			has_skill = 4
		}
		random_list = {
			42 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			58 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else_if = {
		limit = { has_skill = 5 }
		random_list = {
			35 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			65 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else_if = {
		limit = { has_skill = 6 }
		random_list = {
			28 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			72 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else_if = {
		limit = { has_skill = 7 }
		random_list = {
			21 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			79 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else_if = {
		limit = { has_skill = 8 }
		random_list = {
			14 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			86 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else_if = {
		limit = { has_skill = 9 }
		random_list = {
			7 = {
				owner = { country_event = { id = giga_psychic_beacon.0151 days = 5 } }
			}
			93 = {
				owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
			}
		}
	}
	else = {
		owner = { country_event = { id = giga_psychic_beacon.0152 days = 5 } }
	}
}

giga_generate_moons_on_planet = {
	solar_system = {
		random = {
			chance = 50
			spawn_planet = {
				class = rl_no_atmosphere_planets
				location = prev
				size = 6
				orbit_location = yes
				orbit_angle_offset = 37
				orbit_distance_offset = 7
				init_effect = {
					set_name = { key = penrose_rename_moon1 variable_string = "\\[prevprev.GetName\\]"} 
					set_planet_flag = gpm_has_planet_rings
				}
			}
		}
		random = {
			chance = 35
			spawn_planet = {
				class = rl_no_atmosphere_planets
				location = prev
				size = 5
				orbit_location = yes
				orbit_angle_offset = 164
				orbit_distance_offset = 10
				init_effect = {
					set_name = { key = penrose_rename_moon2 variable_string = "\\[prevprev.GetName\\]"} 
					set_planet_flag = gpm_has_planet_rings
				}
			}
		}
		random = {
			chance = 20
			spawn_planet = {
				class = rl_no_atmosphere_planets
				location = prev
				size = 7
				orbit_location = yes
				orbit_angle_offset = 283
				orbit_distance_offset = 13
				init_effect = {
					set_name = { key = penrose_rename_moon3 variable_string = "\\[prevprev.GetName\\]"} 
					set_planet_flag = gpm_has_planet_rings
				}
			}
		}
		random = {
			chance = 10
			spawn_planet = {
				class = rl_no_atmosphere_planets
				location = prev
				size = 5
				orbit_location = yes
				orbit_angle_offset = 203
				orbit_distance_offset = 16
				init_effect = {
					set_name = { key = penrose_rename_moon4 variable_string = "\\[prevprev.GetName\\]"} 
					set_planet_flag = gpm_has_planet_rings
				}
			}
		}
		random = {
			chance = 5
			spawn_planet = {
				class = rl_no_atmosphere_planets
				location = prev
				size = 9
				orbit_location = yes
				orbit_angle_offset = 203
				orbit_distance_offset = 19
				init_effect = {
					set_name = { key = penrose_rename_moon5 variable_string = "\\[prevprev.GetName\\]"} 
					set_planet_flag = gpm_has_planet_rings
				}
			}
		}
	}
}

giga_reset_ai_start = {
	set_origin = origin_default
	remove_country_flag = custom_start_screen
	capital_scope = {
		set_planet_flag = gpm_has_planet_rings
		set_planet_size = 18
		if = {
			limit = { NOT = { solar_system = { has_star_flag = ehof_ai_reset } } } #already ideal planet class for EHOF reset
			random_list = {
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_tropical } }	change_pc = pc_tropical }
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_arid } }		change_pc = pc_arid }
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_continental } }	change_pc = pc_continental }
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_ocean } }		change_pc = pc_ocean }
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_tundra } }		change_pc = pc_tundra }
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_arctic } }		change_pc = pc_arctic }
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_alpine } }		change_pc = pc_alpine }
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_savannah } }	change_pc = pc_savannah }
				1 = { every_owned_pop = { limit = { is_robot_pop = no is_sapient = yes } modify_species = { ideal_planet_class = pc_desert } }		change_pc = pc_desert }
			}
		}
		generate_start_deposits_and_blockers = yes
		remove_all_buildings = yes
		remove_all_districts = yes
		generate_start_buildings_and_districts = yes
		giga_generate_moons_on_planet = yes
		owner = {
			if = {
				limit = {
					is_gestalt = no
				}
				capital_scope = {
					add_modifier = { modifier = prosp_uni_mod days = 7200 }
				}
			}
			else = {
				capital_scope = {
					add_modifier = { modifier = prosp_uni_mod_gestalt days = 7200 }
				}
			}
		}	
		solar_system = {
			if ={
				limit = {
					star = {
						OR = {
							giga_black_hole = yes
							is_planet_class = pc_giga_empty_space
						}	
					}
				}
				star = {
					change_pc = pc_g_star
				}
				set_star_class = sc_g
			}
			if = {
				limit = { has_star_flag = ehof_ai_reset }
				every_system_megastructure = {
					limit = {
						OR = {
							is_megastructure_type = ehof_pgate_gateway
							is_megastructure_type = ehof_pgate_unknown
						}
					}
					remove_megastructure = this
				}
				every_system_ambient_object = {
					limit = { is_ambient_object_type = fake_pstone }
					destroy_ambient_object = this
				}
			}
			if = {
				limit = { has_star_flag = gigas_new_planets }
				# Create planet on same orbit for orbit lines
				spawn_planet = {
					class = rl_no_atmosphere_planets
					size = 12
					location = star
					orbit_angle_offset = 124
					orbit_distance_offset = 45
					orbit_location = yes
					init_effect = {
						set_planet_flag = gpm_has_planet_rings
						giga_generate_moons_on_planet = yes
					}
				}
				if = {
					limit = { NOT = { has_star_flag = birch_reset } } 
					spawn_planet = {
						class = pc_gas_giant
						size = 30
						location = star
						orbit_angle_offset = 234
						orbit_distance_offset = 57
						orbit_location = yes
						has_ring = yes
						init_effect = {
						}
					}
				}

				spawn_planet = {
					class = pc_gas_giant
					size = 20
					location = star
					orbit_angle_offset = 281
					orbit_distance_offset = 92
					orbit_location = yes
					has_ring = no
					init_effect = {
					}
				}

				spawn_planet = {
					class = rl_unhabitable_planets
					size = 21
					location = star
					orbit_angle_offset = 93
					orbit_distance_offset = 105
					orbit_location = yes
					init_effect = {
						set_planet_flag = gpm_has_planet_rings
						giga_generate_moons_on_planet = yes
					}
				}

				spawn_planet = {
					class = rl_unhabitable_planets
					size = 13
					location = star
					orbit_angle_offset = 164
					orbit_distance_offset = 146
					orbit_location = yes
					init_effect = {
						set_planet_flag = gpm_has_planet_rings
						giga_generate_moons_on_planet = yes
					}
				}
				if = { #These 2 orbitals are already filled
					limit = { NOR = { has_star_flag = ehof_ai_reset has_star_flag = birch_reset} }
					spawn_planet = {
						class = pc_toxic
						size = 16
						location = star
						orbit_angle_offset = 32
						orbit_distance_offset = 78
						orbit_location = yes
						init_effect = {
							set_planet_flag = gpm_has_planet_rings
							giga_generate_moons_on_planet = yes
						}
					}
	
					spawn_planet = {
						class = pc_gas_giant
						size = 18
						location = star
						orbit_angle_offset = 325
						orbit_distance_offset = 123
						orbit_location = yes
						has_ring = no
						init_effect = {
						}
					}
				}
			}
			generate_home_system_resources = yes

			# Create mining stations
			every_system_planet = {
				if = {
					limit = {
						has_deposit_for = shipclass_mining_station
						has_mining_station = no
					}
					create_mining_station = { owner = root }
				}
				else_if = {
					limit = {
						has_deposit_for = shipclass_research_station
						has_research_station = no
					}
					create_research_station = { owner = root }
				}
			}
		}
		giga_rename_system = yes
	}
}

giga_ndb_system = {
	every_system = {
		limit = { has_star_flag = giga_ndb_target@root }
		remove_star_flag = giga_ndb_target@root
	}
	set_star_flag = giga_ndb_target@root
	root = {
		set_country_flag = giga_ndb_firing_system
		country_event = { id = giga_ndb.201 days = 2 }
	}
}

giga_ndb_planet = {
	every_system = {
		limit = { has_star_flag = giga_ndb_target@root }
		remove_star_flag = giga_ndb_target@root
		every_system_planet = {
			limit = { has_planet_flag = giga_ndb_target@root }
			remove_planet_flag = giga_ndb_target@root
		}
	}
	solar_system = { set_star_flag = giga_ndb_target@root }
	set_planet_flag = giga_ndb_target@root
	root = { country_event = { id = giga_ndb.008 } }	# Select intensity
}

giga_ndb_close_gate = {
	if = {
		limit = { any_system_ambient_object = { is_ambient_object_type = nicoll_beam_side_gate_open } }
		every_system_ambient_object = {
			limit = { is_ambient_object_type = nicoll_beam_side_gate_open }
			destroy_ambient_object = this
		}
	}
	create_ambient_object = {
		type = "nicoll_beam_side_gate_closed"
		location = star
		use_3d_location = yes
		entity_face_object = star

		entity_offset = { min = 220 max = 220 }
		entity_offset_angle = { min = 270 max = 270 }
	}
}

giga_ndb_open_gate = {
	if = {
		limit = { any_system_ambient_object = { is_ambient_object_type = nicoll_beam_side_gate_closed } }
		every_system_ambient_object = {
			limit = { is_ambient_object_type = nicoll_beam_side_gate_closed }
			destroy_ambient_object = this
		}
	}
	create_ambient_object = {
		type = "nicoll_beam_side_gate_open"
		location = star
		use_3d_location = yes
		entity_face_object = star

		entity_offset = { min = 220 max = 220 }
		entity_offset_angle = { min = 270 max = 270 }
	}
}

giga_ndb_beam_1 = { solar_system = { create_ambient_object = { type = "nicoll_beam_1" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_2 = { solar_system = { create_ambient_object = { type = "nicoll_beam_2" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_3 = { solar_system = { create_ambient_object = { type = "nicoll_beam_3" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_4 = { solar_system = { create_ambient_object = { type = "nicoll_beam_4" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_5 = { solar_system = { create_ambient_object = { type = "nicoll_beam_5" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_6 = { solar_system = { create_ambient_object = { type = "nicoll_beam_6" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_7 = { solar_system = { create_ambient_object = { type = "nicoll_beam_7" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_8 = { solar_system = { create_ambient_object = { type = "nicoll_beam_8" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_9 = { solar_system = { create_ambient_object = { type = "nicoll_beam_9" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_10 = { solar_system = { create_ambient_object = { type = "nicoll_beam_10" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_11 = { solar_system = { create_ambient_object = { type = "nicoll_beam_11" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_12 = { solar_system = { create_ambient_object = { type = "nicoll_beam_12" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_beam_13 = { solar_system = { create_ambient_object = { type = "nicoll_beam_13" location = star use_3d_location = yes entity_face_object = star } } }
giga_ndb_target_beam_portal = { create_ambient_object = { type = "nicoll_target_beam_portal" location = this use_3d_location = yes entity_face_object = star } }
giga_ndb_target_beam_planet_1 = { create_ambient_object = { type = "nicoll_target_beam_planet_1" location = this use_3d_location = yes entity_face_object = star } }
giga_ndb_target_beam_planet_2 = { create_ambient_object = { type = "nicoll_target_beam_planet_2" location = this use_3d_location = yes entity_face_object = star } }
giga_ndb_target_beam_planet_3 = { create_ambient_object = { type = "nicoll_target_beam_planet_3" location = this use_3d_location = yes entity_face_object = star } }
giga_ndb_target_beam_planet_4 = { create_ambient_object = { type = "nicoll_target_beam_planet_4" location = this use_3d_location = yes entity_face_object = star } }
giga_ndb_target_beam_system = { create_ambient_object = { type = "nicoll_target_beam_system" location = this use_3d_location = yes entity_face_object = star } }


#################################
### Planet Effects ##############
#################################
giga_reroll_lifeless = {
	# just in case
	if = { limit = { has_orbital_station = yes } orbital_station = { dismantle = yes } }

	# mineral and energy multipliers
	set_variable = { which = giga_lifeless_minerals value = value:giga_count_resource|resource|minerals| }
	multiply_variable = { which = giga_lifeless_minerals value = 0.2 }
	change_variable = { which = giga_lifeless_minerals value = 1 }

	set_variable = { which = giga_lifeless_energy value = value:giga_count_resource|resource|energy| }
	multiply_variable = { which = giga_lifeless_energy value = 0.2 }
	change_variable = { which = giga_lifeless_energy value = 1 }

	# count up rare resources on the planet
	set_variable = { which = giga_lifeless_volatile_motes value = value:giga_count_resource|resource|volatile_motes| }
	set_variable = { which = giga_lifeless_rare_crystals value = value:giga_count_resource|resource|rare_crystals| }
	set_variable = { which = giga_lifeless_exotic_gases value = value:giga_count_resource|resource|exotic_gases| }

	set_variable = { which = giga_lifeless_zro value = value:giga_count_resource|resource|sr_zro| }
	set_variable = { which = giga_lifeless_dark_matter value = value:giga_count_resource|resource|sr_dark_matter| }
	set_variable = { which = giga_lifeless_living_metal value = value:giga_count_resource|resource|sr_living_metal| }
	set_variable = { which = giga_lifeless_nanites value = value:giga_count_resource|resource|nanites| }
	set_variable = { which = giga_lifeless_iodizium value = value:giga_count_resource|resource|sr_iodizium| }
	set_variable = { which = giga_lifeless_supertensiles value = value:giga_count_resource|resource|giga_sr_amb_megaconstruction| }

	# generate random deposits

	clear_deposits = yes
	while = {
		count = 14
		random_list = {
			50 = {}
			20 = { 
				add_deposit = d_geothermal_vent 		# Energy
				modifier = { factor = giga_lifeless_energy always = yes }
			}	
			20 = {
				add_deposit = d_underwater_vent			# Energy
				modifier = { factor = 0 is_planet_class = pc_ll_torrid }
				modifier = { factor = 0 is_planet_class = pc_ll_foggy }
				modifier = { factor = giga_lifeless_energy always = yes }
			}
			20 = {
				add_deposit = d_tempestous_mountain		# Energy
				modifier = { factor = 0 is_planet_class = pc_ll_torrid }
				modifier = { factor = giga_lifeless_energy always = yes }
			}
			10 = { 
				add_deposit = d_veiny_cliffs 			# Minerals
				modifier = { factor = giga_lifeless_minerals always = yes }
			}		
			10 = { 
				add_deposit = d_mineral_fields 			# Minerals
				modifier = { factor = giga_lifeless_minerals always = yes }
			}
			10 = { 
				add_deposit = d_prosperous_mesa 		# Minerals
				modifier = { factor = giga_lifeless_minerals always = yes }
			}
			10 = { 
				add_deposit = d_ore_rich_caverns 		# Minerals
				modifier = { factor = giga_lifeless_minerals always = yes }
			}
			10 = { 
				add_deposit = d_rich_mountain 			# Minerals
				modifier = { factor = giga_lifeless_minerals always = yes }
			}
			10 = {
				add_deposit = d_submerged_ore_veins		# Minerals
				modifier = { factor = 0 is_planet_class = pc_ll_torrid }
				modifier = { factor = giga_lifeless_minerals always = yes }
			}
			5 = {
				add_deposit = d_forgiving_tundra		# Food
				#modifier = { factor = 0 is_planet_class = pc_ll_temperate }
				modifier = { factor = 0 is_planet_class = pc_ll_torrid }
			}
			5 = {
				add_deposit = d_black_soil				# Food
				#modifier = { factor = 0 is_planet_class = pc_ll_foggy }
				#modifier = { factor = 0 is_planet_class = pc_ll_temperate }
			}
			5 = {
				add_deposit = d_nutritious_mudland		# Food
				#modifier = { factor = 0 is_planet_class = pc_ll_foggy }
				#modifier = { factor = 0 is_planet_class = pc_ll_torrid }
			}

			##########################
			### Rare #################
			##########################
			2 = {
				modifier = { factor = 0 is_planet_class = pc_ll_temperate }
				modifier = { factor = 0 is_planet_class = pc_ll_foggy }

				random_list = {
					1 = { add_deposit = d_dust_caverns }
					1 = { add_deposit = d_dust_desert }
				}
			}
			2 = {
				modifier = { factor = 0 is_planet_class = pc_ll_temperate }
				modifier = { factor = 0 is_planet_class = pc_ll_torrid }
				
				random_list = {
					1 = { add_deposit = d_bubbling_swamp }
					1 = { add_deposit = d_fuming_bog }
				}
			}
			2 = {
				modifier = { factor = 0 is_planet_class = pc_ll_foggy }
				modifier = { factor = 0 is_planet_class = pc_ll_torrid }
				
				random_list = {
					1 = { add_deposit = d_crystalline_caverns }
					# 1 = { add_deposit = d_crystal_forest }
					# 1 = { add_deposit = d_crystal_reef }
					1 = { 
						add_deposit = d_crystalline_caverns 
						add_deposit = d_crystalline_caverns 
					}
				}
			}

			2 = {
				add_deposit = d_betharian_deposit
				modifier = { factor = giga_lifeless_energy always = yes }
			}
		}
	}

	# generate deposits for the rare space resources

	# motes
	while = { limit = { check_variable = { which = giga_lifeless_volatile_motes value >= 1 } } 
		random_list = {
			1 = { 
				add_deposit = d_dust_caverns
				change_variable = { which = giga_lifeless_volatile_motes value = -1 }
			}
			1 = {
				add_deposit = d_dust_desert
				change_variable = { which = giga_lifeless_volatile_motes value = -2 }
				modifier = { factor = 0 check_variable = { which = giga_lifeless_volatile_motes value < 2 } }
			}
		}
	}

	# crystals
	while = { limit = { check_variable = { which = giga_lifeless_rare_crystals value >= 1 } } 
		#random_list = {
		#	2 = { 
				add_deposit = d_crystalline_caverns
				change_variable = { which = giga_lifeless_rare_crystals value = -1 }
		# 	}
		# 	1 = {
		# 		add_deposit = d_crystal_forest
		# 		change_variable = { which = giga_lifeless_rare_crystals value = -2 }
		# 		modifier = { factor = 0 check_variable = { which = giga_lifeless_rare_crystals value < 2 } }
		# 	}
		# 	1 = {
		# 		add_deposit = d_crystal_reef
		# 		change_variable = { which = giga_lifeless_rare_crystals value = -2 }
		# 		modifier = { factor = 0 check_variable = { which = giga_lifeless_rare_crystals value < 2 } }
		# 		modifier = { factor = 0 is_planet_class = pc_ll_torrid }
		# 	}
		# }
	}

	# gases
	while = { limit = { check_variable = { which = giga_lifeless_exotic_gases value >= 1 } } 
		random_list = {
			1 = { 
				add_deposit = d_bubbling_swamp
				change_variable = { which = giga_lifeless_exotic_gases value = -1 }
			}
			1 = {
				add_deposit = d_fuming_bog
				change_variable = { which = giga_lifeless_exotic_gases value = -2 }
				modifier = { factor = 0 check_variable = { which = giga_lifeless_exotic_gases value < 2 } }
			}
		}
	}

	# other assorted rare resources
	while = { count = giga_lifeless_zro 			add_deposit = d_giga_lifeless_zro_1 }
	while = { count = giga_lifeless_dark_matter 	add_deposit = d_giga_lifeless_dark_matter_1 }
	while = { count = giga_lifeless_living_metal 	add_deposit = d_giga_lifeless_living_metal_1 }
	while = { count = giga_lifeless_nanites 		add_deposit = d_giga_lifeless_nanites_1 }
	while = { count = giga_lifeless_iodizium 		add_deposit = d_giga_lifeless_iodizium_1 }
	while = { count = giga_lifeless_supertensiles 	add_deposit = d_giga_lifeless_supertensiles_1 }

	# clean up
	clear_variable = giga_lifeless_minerals
	clear_variable = giga_lifeless_energy
	clear_variable = giga_lifeless_volatile_motes
	clear_variable = giga_lifeless_rare_crystals
	clear_variable = giga_lifeless_exotic_gases
	clear_variable = giga_lifeless_zro
	clear_variable = giga_lifeless_dark_matter
	clear_variable = giga_lifeless_living_metal
	clear_variable = giga_lifeless_nanites
	clear_variable = giga_lifeless_iodizium
	clear_variable = giga_lifeless_supertensiles
}

giga_calculate_allowed_habitats = {
	set_variable = { which = allowed_habitats value = 3 } # +3 as default
	set_variable = { which = calc_var_systems value = giga_owned_systems }
	set_variable = { which = calc_var_pops value = giga_owned_pops }

	# Calculate allowed habitats for system capped
	if = {
		limit = { has_global_flag = giga_habitats_system_3 }
		while = {
			limit = { check_variable = { which = calc_var_systems value > 3 } }
			change_variable = { which = calc_var_systems value = -3 }
			change_variable = { which = allowed_habitats value = 1 }
		}
	}
	else_if = {
		limit = { has_global_flag = giga_habitats_system_10 }
		while = {
			limit = { check_variable = { which = calc_var_systems value > 10 } }
			change_variable = { which = calc_var_systems value = -10 }
			change_variable = { which = allowed_habitats value = 1 }
		}
	}
	else_if = {
		limit = { has_global_flag = giga_habitats_system_25 }
		while = {
			limit = { check_variable = { which = calc_var_systems value > 25 } }
			change_variable = { which = calc_var_systems value = -25 }
			change_variable = { which = allowed_habitats value = 1 }
		}
	}

	# Calculate allowed habitats for pop capped
	if = {
		limit = { has_global_flag = giga_habitats_pop_25 }
		while = {
			limit = { check_variable = { which = calc_var_pops value > 25 } }
			change_variable = { which = calc_var_pops value = -25 }
			change_variable = { which = allowed_habitats value = 1 }
		}
	}
	else_if = {
		limit = { has_global_flag = giga_habitats_pop_50 }
		while = {
			limit = { check_variable = { which = calc_var_pops value > 50 } }
			change_variable = { which = calc_var_pops value = -50 }
			change_variable = { which = allowed_habitats value = 1 }
		}
	}
	else_if = {
		limit = { has_global_flag = giga_habitats_pop_100 }
		while = {
			limit = { check_variable = { which = calc_var_pops value > 100 } }
			change_variable = { which = calc_var_pops value = -100 }
			change_variable = { which = allowed_habitats value = 1 }
		}
	}

	# Add extra allowed habitats for voidborn and void dwellers
	if = {
		limit = { has_origin = origin_void_dwellers }
		multiply_variable = { which = allowed_habitats value = 1.5 }
	}
	if = {
		limit = { has_ascension_perk = ap_voidborn }
		multiply_variable = { which = allowed_habitats value = 1.5 }
	}
}

giga_drive_yard_calculate_max_ship_count = {
	set_variable = {
		which = giga_nexus_ship_count_max
		value = trigger:num_pops
	}
	divide_variable = {
		which = giga_nexus_ship_count_max
		value = 3
	}
	if = {
		limit = { ROOT.owner = { has_ascension_perk = ap_eternal_vigilance } }
		multiply_variable = {
			which = giga_nexus_ship_count_max
			value = 2
		}
	}
	if = {
		limit = { ROOT.owner = { has_technology = giga_tech_defense_nexus_capacity_1 } }
		multiply_variable = {
			which = giga_nexus_ship_count_max
			value = 1.30
		}
	}
	if = {
		limit = { ROOT.owner = { has_technology = giga_tech_defense_nexus_capacity_2 } }
		multiply_variable = {
			which = giga_nexus_ship_count_max
			value = 1.40
		}
	}
	if = {
		limit = { ROOT = { giga_is_maginot_world = yes } }
		multiply_variable = {
			which = giga_nexus_ship_count_max
			value = 2
		}
	}
	multiply_variable = {
		which = giga_nexus_ship_count_max
		value = giga_nexus_ship_count_tech
	}
	change_variable = {
		which = giga_nexus_ship_count_max
		value = giga_defense_nexus_storage_count
	}
	ceiling_variable = giga_nexus_ship_count_max
	if = {
		limit = {
			check_variable = {
				which = giga_nexus_ship_count_max
				value > 1000
			}
		}
		set_variable = {
			which = giga_nexus_ship_count_max
			value = 1000
		}
	}
}

giga_drive_yard_calculate_monthly_ship_count = {
	set_variable = {
		which = giga_nexus_ship_count_monthly
		value = 2
	}
	#Every 20 pops adds 1 monthly ship.
	set_variable = {
		which = giga_nexus_ship_count_pop_bonus
		value = trigger:num_pops
	}
	divide_variable = {
		which = giga_nexus_ship_count_pop_bonus
		value = 20
	}
	round_variable = giga_nexus_ship_count_pop_bonus
	change_variable = {
		which = giga_nexus_ship_count_monthly
		value = giga_nexus_ship_count_pop_bonus
	}
	change_variable = {
		which = giga_nexus_ship_count_monthly
		value = giga_defense_nexus_construction_count
	}
	if = {
		limit = { ROOT.owner = { has_technology = giga_tech_defense_nexus_production_1 } }
		multiply_variable = {
			which = giga_nexus_ship_count_monthly
			value = 1.30
		}
	}
	if = {
		limit = { ROOT = { giga_is_maginot_world = yes } }
		multiply_variable = {
			which = giga_nexus_ship_count_monthly
			value = 1.50
		}
	}
	if = {
		limit = { ROOT.owner = { has_active_tradition = tr_gigabulwark_enhanced_dockyards } }
		multiply_variable = {
			which = giga_nexus_ship_count_monthly
			value = 1.50
		}
	}
	ceiling_variable = giga_nexus_ship_count_monthly
	if = {
		limit = {
			OR = {
				check_variable = {
					which = giga_nexus_ship_count
					value >= giga_nexus_ship_count_max
				}
				has_planet_flag = defence_squadron_deployed
			}
		}
		set_variable = {
			which = giga_nexus_ship_count_monthly
			value = 0
		}
	}
}

giga_drive_yard_reset_variables = {
	set_variable = {
		which = giga_defense_nexus_construction_count
		value = 0
	}
	set_variable = {
		which = giga_defense_nexus_storage_count
		value = 0
	}
	set_variable = {
		which = giga_defense_nexus_buff_count
		value = 1
	}
}

apply_giga_bulwark_trad_build_speed = {
	fromfrom = {
		if = {
			limit = { has_modifier = giga_bulwark_trad_build_speed }
			remove_modifier = giga_bulwark_trad_build_speed
		}
		if = {
			limit = { ROOT.from = { has_active_tradition = tr_gigabulwark_grand_fortifications } }
			add_modifier = {
				modifier = giga_bulwark_trad_build_speed
				days = -1
			}
		}
	}
}

giga_alderson_repair_effect = {
	# if = {
	# 	limit = {
	# 		num_districts = {
	# 			type = $pre_repair_district$
	# 			value > 0
	# 		}
	# 	}
	# }
	export_trigger_value_to_variable = { 
		trigger = num_districts 
		parameters = { type = $pre_repair_district$ }
		variable = $var_name$
	}
	if = {
		limit = {
			check_variable = {
				which = $var_name$
				value < 6
			}
		}
		set_variable = {
			which = $var_name$
			value = 1
		}
	}
	else = {
		divide_variable = { which = $var_name$ value = 6 }
		floor_variable = $var_name$
	}
}

giga_alderson_repair_after_effect = {
	while = { count = $var_name$ add_district = $post_repair_district$ }
	set_variable = { which = $var_name$ value = 0 }  
}

clear_giga_mega_balance_modifiers = {
	if = {
		limit = { has_modifier = giga_ai_savings_info }
		remove_modifier = giga_ai_savings_info
	}
	if = {
		limit = { has_modifier = giga_mega_upkeep_balance }
		remove_modifier = giga_mega_upkeep_balance
	}
	if = {
		limit = { has_modifier = giga_mega_cost_balance }
		remove_modifier = giga_mega_cost_balance
	}
	if = {
		limit = { has_modifier = giga_mega_output_balance }
		remove_modifier = giga_mega_output_balance
	}
}

# update the build speed recution on the rogue AI PCC, so that we always have SOME build speed
giga_update_rogue_ai_computer_build_speed = {
	remove_modifier = giga_rogue_ai_computer_build_speed

	if = {
		limit = {
			has_modifier = giga_rogue_ai_computer
			has_deposit = d_giga_rogue_ai_relay_servers
		}

		add_modifier = {
			modifier = giga_rogue_ai_computer_build_speed
			multiplier = value:giga_rogue_ai_computer_build_speed_mult
		}
	}
}

# start a colony for the AI on this planet if the system is friendly and clear of hostiles
# for mega completion where the AI is kinda bad at getting things colonised, like ring worlds
#
# use in mega on_complete blocks
# this = planet
# from = owner
giga_start_ai_colony_if_safe = {
	if = {
		limit = {
			# make sure it's after the game start because otherwise it fucks over the gamers
			years_passed >= 1
			# make sure this is an AI and not a "one planet" play style
			root.from = {
				is_ai = yes
				not = { is_giga_one_planet_origin = yes }
			}
			# check that the solar system is controlled by the same empire
			# and that this mega isn't in a system owned by someone else somehow
			solar_system = {
				exists = owner
				exists = starbase
				exists = starbase.controller
				starbase.controller = {
					is_same_empire = owner
					is_same_empire = root.from
				}
				# prevent if hostiles are around
				not = {
					any_fleet_in_system = {
						controller = {
							is_hostile_to = root.from
						}
					}
				}
			}
		}
		giga_get_species_for_colony = {
			TARGET = this
			WHO = root.from
		}
		start_colony = {
			owner = root.from
			species = event_target:giga_colony_species
		}
	}
}

# save an appropriate species for a colony to event_target:giga_colony_species
# WHO = country for the colony
# TARGET = planet to be colonised
giga_get_species_for_colony = {
	$WHO$ = {
		save_event_target_as = giga_source_country
	}
	$TARGET$ = {
		save_event_target_as = giga_target_planet
	}

	# try to find the best candidate species
	event_target:giga_source_country = {
		ordered_owned_pop_species = {
			position = 0

			# make sure they're allowed to be the rulers
			limit = {
				can_think = yes

				# necrophage origin -> necrophages only
				if = {
					limit = {
						event_target:giga_source_country = {
							has_origin = origin_necrophage
						}
					}
					has_trait = trait_necrophage
				}

				# "citizenship" check
				if = {
					limit = {
						event_target:giga_source_country = {
							is_machine_empire = yes
						}
					}
					has_citizenship_type = {
						type = citizenship_full_machine
						country = event_target:giga_source_country
					}
				}
				else = {
					has_citizenship_type = {
						type = citizenship_full
						country = event_target:giga_source_country
					}
					
				}

				# only if colonisation is allowed for this species
				has_colonization_control = {
					type = no
					country = event_target:giga_source_country
				}
			}

			order_by = value:giga_get_species_for_colony_habitability

			save_event_target_as = giga_colony_species
		}
	}

	# primary species fallback
	if = {
		limit = {
			not = { exists = event_target:giga_colony_species }
		}

		event_target:giga_source_country = {
			species = {
				save_event_target_as = giga_colony_species
			}
		}
	}
}

giga_set_has_mega_flag = {
	set_planet_flag = has_megastructure
}

giga_clear_has_mega_flag = {
	if = {
		limit = {
			has_planet_flag = has_megastructure
			nor = {
				# any mega is attached to this planet
				any_system_megastructure = {
					if = {
						limit = {
							exists = $MEGA|fromfrom$
							$MEGA|fromfrom$ = {
								is_scope_type = megastructure
							}
						}
						not = { is_same_value = $MEGA|fromfrom$ }
					}

					# check planet
					exists = planet
					planet = {
						is_same_value = prevprev
					}
				}
				# any habitable mega is attached to this planet
				any_moon = {
					has_planet_flag = megastructure
					not = { has_planet_flag = giga_planet_mega }
					not = { has_planet_flag = giga_remove_planet }
				}
			}
		}

		remove_planet_flag = has_megastructure
	}
}

giga_set_ringworld_graphical_culture = {
#$TYPE$ $SIZE$ $TARGET$ $SOURCE$ $VANILLA_TYPE$
#	set_planet_entity = { entity = $SIZE$_$TYPE$_sector_entity graphical_culture = $SOURCE$ picture = pc_ringworld } 
 	$TARGET$ = { save_event_target_as = targetringworld }
	$SOURCE$ = { #If an available graphical culture is found use it, otherwise go back to mammalian
		switch = {
			trigger = graphical_culture
			#If a vanilla type it has slightly different syntax and it needs a different default
			[[VANILLA_TYPE] 
				humanoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = humanoid_01_$SIZE$_$TYPE$_entity	} } }
				plantoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = plantoid_01_$SIZE$_$TYPE$_entity	} } }
				mammalian_01	= { event_target:targetringworld = { set_planet_entity = { entity = mammalian_01_$SIZE$_$TYPE$_entity	} } }
				reptilian_01	= { event_target:targetringworld = { set_planet_entity = { entity = reptilian_01_$SIZE$_$TYPE$_entity	} } }
				avian_01		= { event_target:targetringworld = { set_planet_entity = { entity = avian_01_$SIZE$_$TYPE$_entity		} } }
				molluscoid_01	= { event_target:targetringworld = { set_planet_entity = { entity = molluscoid_01_$SIZE$_$TYPE$_entity	} } }
				fungoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = fungoid_01_$SIZE$_$TYPE$_entity		} } }
				arthropoid_01	= { event_target:targetringworld = { set_planet_entity = { entity = arthropoid_01_$SIZE$_$TYPE$_entity	} } }
				lithoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = lithoid_01_$SIZE$_$TYPE$_entity		} } }
				necroid_01		= { event_target:targetringworld = { set_planet_entity = { entity = necroid_01_$SIZE$_$TYPE$_entity		} } }
				toxoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = toxoid_01_$SIZE$_$TYPE$_entity		} } }
				aquatic_01		= { event_target:targetringworld = { set_planet_entity = { entity = aquatic_01_$SIZE$_$TYPE$_entity		} } }
				nemesis_01		= { event_target:targetringworld = { set_planet_entity = { entity = nemesis_01_$SIZE$_$TYPE$_entity		} } } 
				synthetics_01	= { event_target:targetringworld = { set_planet_entity = { entity = synthetics_01_$SIZE$_$TYPE$_entity	} } } 
				cybernetics_01	= { event_target:targetringworld = { set_planet_entity = { entity = cybernetics_01_$SIZE$_$TYPE$_entity	} } } 

				default 		= { event_target:targetringworld = { set_planet_entity = { entity = $VANILLA_TYPE$_entity_01_entity graphical_culture = $SOURCE$ } } } 
			]

			#If not vanilla type default to mammalian
			[[!VANILLA_TYPE]
				humanoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = humanoid_01_$SIZE$_$TYPE$_sector_entity		} } }
				plantoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = plantoid_01_$SIZE$_$TYPE$_sector_entity		} } }
				mammalian_01	= { event_target:targetringworld = { set_planet_entity = { entity = mammalian_01_$SIZE$_$TYPE$_sector_entity	} } }
				reptilian_01	= { event_target:targetringworld = { set_planet_entity = { entity = reptilian_01_$SIZE$_$TYPE$_sector_entity	} } }
				avian_01		= { event_target:targetringworld = { set_planet_entity = { entity = avian_01_$SIZE$_$TYPE$_sector_entity		} } }
				molluscoid_01	= { event_target:targetringworld = { set_planet_entity = { entity = molluscoid_01_$SIZE$_$TYPE$_sector_entity	} } }
				fungoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = fungoid_01_$SIZE$_$TYPE$_sector_entity		} } }
				arthropoid_01	= { event_target:targetringworld = { set_planet_entity = { entity = arthropoid_01_$SIZE$_$TYPE$_sector_entity	} } }
				lithoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = lithoid_01_$SIZE$_$TYPE$_sector_entity		} } }
				necroid_01		= { event_target:targetringworld = { set_planet_entity = { entity = necroid_01_$SIZE$_$TYPE$_sector_entity		} } }
				toxoid_01		= { event_target:targetringworld = { set_planet_entity = { entity = toxoid_01_$SIZE$_$TYPE$_sector_entity		} } }
				aquatic_01		= { event_target:targetringworld = { set_planet_entity = { entity = aquatic_01_$SIZE$_$TYPE$_sector_entity		} } }
				nemesis_01		= { event_target:targetringworld = { set_planet_entity = { entity = nemesis_01_$SIZE$_$TYPE$_sector_entity		} } }
				cybernetics_01	= { event_target:targetringworld = { set_planet_entity = { entity = cybernetics_01_$SIZE$_$TYPE$_sector_entity	} } }
				synthetics_01	= { event_target:targetringworld = { set_planet_entity = { entity = synthetics_01_$SIZE$_$TYPE$_sector_entity	} } }
				default 		= { event_target:targetringworld = { set_planet_entity = { entity = mammalian_01_$SIZE$_$TYPE$_sector_entity	} } } 

				#Modded shipset compat, If you author a modded shipset or a patch for one please let me know on discord and I can add it to this switch (Bread™#7255)
				#these ones should only fires if its not on a vanilla ring so it doesn't have to be 
				machine_01 		= { 
					if = {
						limit = { has_machine_shipset_gigas_ring_active = yes } #After checking Corsair's machine shipset addon this one should work out of the box with nothing special
						event_target:targetringworld = { 
							set_planet_entity = { 
								entity = machine_01_$SIZE$_$TYPE$_sector_entity 		
							}
						}
						else = {
							event_target:targetringworld = { 
								set_planet_entity = { 
									entity = mammalian_01_$SIZE$_$TYPE$_sector_entity 		
								}
							} 
						}
					}
				}
			]
		}
	}
}

giga_clear_orbital_arcology_modifiers = {
	if = {
		limit = { has_modifier = new_orbital_arcology_modifier }
		remove_modifier = new_orbital_arcology_modifier
	}
	if = {
		limit = { has_modifier = new_orbital_arcology_double_modifier}
		remove_modifier = new_orbital_arcology_double_modifier
	}
	if = {
		limit = { has_modifier = new_orbital_arcology_triple_modifier}
		remove_modifier = new_orbital_arcology_triple_modifier
	}
	if = {
		limit = { has_modifier = orbital_arcology_modifier }
		remove_modifier = orbital_arcology_modifier
	}
	if = {
		limit = { has_modifier = orbital_arcology_modifier_1 }
		remove_modifier = orbital_arcology_modifier_1
	}
	if = {
		limit = { has_modifier = orbital_arcology_modifier_2 }
		remove_modifier = orbital_arcology_modifier_2
	}
	if = {
		limit = { has_modifier = orbital_arcology_modifier_3 }
		remove_modifier = orbital_arcology_modifier_3
	}
}

# set buildings for elysium host planets
giga_set_elysium_buildings = {
	remove_all_buildings = yes
			
	if = {
		limit = {
			owner = { is_gestalt = no }
		}
		add_building = building_giga_elysium_host_capital
		add_building = building_giga_elysium_host_jobs
	}
	else_if = {
		limit = {
			owner = { is_hive_empire = yes }
		}
		add_building = building_giga_elysium_host_hive_capital
		add_building = building_giga_elysium_host_hive_jobs
	}
	else_if = {
		limit = {
			owner = { is_machine_empire = yes }
		}
		add_building = building_giga_elysium_host_machine_capital
		add_building = building_giga_elysium_host_machine_jobs
	}

	add_building = building_giga_elysium_trash_heap

	# don't know why, but having this here removes all the districts...
	#validate_planet_buildings_and_districts = yes
}

add_hyperlane_safe = {
	optimize_memory
	
	if = {
		limit = {
			$from$ = {
				nor = {
					is_same_value = prev.$to$
					has_hyperlane_to = prev.$to$
				}
			}
		}
		add_hyperlane = {
			from = $from$
			to = $to$
		}
	}
}

remove_hyperlane_safe = {
	optimize_memory

	if = {
		limit = {
			$from$ = {
				not = {
					is_same_value = prev.$to$
				}
				has_hyperlane_to = prev.$to$
			}
		}
		remove_hyperlane = {
			from = $from$
			to = $to$
		}
	}
}

set_or_change_variable = {
	if = {
		limit = {
			not = {
				is_variable_set = $which$
			}
		}
		set_variable = {
			which = $which$
			value = $value$
		}
	}
	else = {
		change_variable = {
			which = $which$
			value = $value$
		}
	}
}

giga_change_variable_and_clean_if_zero = {
	if = {
		limit = {
			not = {
				is_variable_set = $which$
			}
		}
		set_variable = {
			which = $which$
			value = $value$
		}
	}
	else = {
		change_variable = {
			which = $which$
			value = $value$
		}
	}
	if = {
		limit = {
			check_variable = {
				which = $which$
				value = 0
			}
		}
		clear_variable = $which$
	}
}

#I hate renaming systems - Bread
#Resets the names of any object any the system
#Fired on the solar_system scope
giga_rename_system = {
	optimize_memory
	solar_system = {
		save_global_event_target_as = rename_system
		if = { #This block Renames the stars so they are in alignment with the galaxy map star names
			limit = {			
				NOT = {
					giga_is_bitrinary = yes
				}
			}
			system_star = { #Always the primary star
				set_name = {
					key = giga_rename_star
					variable_string = "\\[rename_system.GetName\\]"
				}
				set_planet_flag = rename_primary_star
			}
		} else_if = {
			limit = {
				is_binary = yes
			}
			system_star = { #Always the primary star
				set_name = {
					key = giga_rename_star_b1
					variable_string = "\\[rename_system.GetName\\]"
				}
				set_planet_flag = rename_primary_star
			}
			random_system_planet = { #Couldn't find a better way of doing this one
				limit = {
					is_star = yes
					NOT = {
						has_planet_flag = rename_primary_star
					}
				}
				set_name = {
					key = giga_rename_star_b2
					variable_string = "\\[rename_system.GetName\\]"
				}
				set_planet_flag = rename_secondary_star
			}
		} else_if = {
			limit = { 
				is_trinary = yes 
			}
			system_star = {
				set_name = {
					key = giga_rename_star_t1
					variable_string = "\\[rename_system.GetName\\]"
				}
				set_planet_flag = rename_primary_star
			}
			random_system_planet = {
				limit = {
					is_star = yes
					NOT = {
						has_planet_flag = rename_primary_star
					}
				}
				set_name = {
					key = giga_rename_star_b2
					variable_string = "\\[rename_system.GetName\\]"
				}
				set_planet_flag = rename_secondary_star
			}
			random_system_planet = {
				limit = {
					is_star = yes
					NOR = {
						has_planet_flag = rename_primary_star
						has_planet_flag = rename_secondary_star
					}
				}
				set_name = {
					key = giga_rename_star_t3
					variable_string = "\\[rename_system.GetName\\]"
				}
				set_planet_flag = rename_tertiary_star
			}
		}

		set_variable = { #Counts planets with no orbiting body
			which = rename_system_planet_count
			value = 0
		}

		every_system_planet = {
			if = {
				limit = {
					OR = {
						has_planet_flag = rename_secondary_star
						has_planet_flag = rename_tertiary_star
					}
				}
				set_variable = { #Counts planets that orbit the second/third star
					which = rename_system_second_planet_count
					value = 0
				}
			}
			if = {
				limit = {
					OR = {
						NOR = {
							exists = orbit
							is_star = yes
						}
						orbit = { has_planet_flag = rename_primary_star }
					}
				}
				solar_system = {
					change_variable = {
						which = rename_system_planet_count
						value = 1
					}
				}
				set_variable = {
					which = rename_system_planet_count
					value = solar_system.rename_system_planet_count
				}
			}
			else_if = {
				limit = {
					exists = orbit
					orbit = { has_planet_flag = rename_secondary_star }
				}
				orbit = {
					change_variable = {
						which = rename_system_second_planet_count
						value = 1
					}
				}
				set_variable = {
					which = rename_system_second_planet_count
					value = orbit.rename_system_second_planet_count
				}
			}
			else_if = {
				limit = {
					exists = orbit
					orbit = { has_planet_flag = rename_tertiary_star }
				}
				orbit = {
					change_variable = {
						which = rename_system_second_planet_count
						value = 1
					}
				}
				set_variable = {
					which = rename_system_second_planet_count
					value = orbit.rename_system_second_planet_count
				}
			}
			if = { 
				limit = {
					OR = {
						AND = {
							exists = orbit
							orbit = { is_star = yes  }
						}
						NOT = { exists = orbit }
					}
				}
				set_variable = {
					which = rename_moon_count
					value = 0
				}
			}
			every_moon = {
				limit = { orbit = { NOT = { is_star = yes} } }
				orbit = {
					change_variable = {
						which = rename_moon_count
						value = 1
					}
				}
				set_variable = {
					which = rename_moon_count
					value = orbit.rename_moon_count
				}
			}
		}
		every_system_planet = { #Renames system planets if they orbit the main star, or have no star orbit ( sometimes the case with binary/trinary star systems )
			limit = {
				OR = {
					AND = {
						exists = orbit
						orbit = { has_planet_flag = rename_primary_star }
					}
					NOR = { 
						exists = orbit
						is_star = yes
					}
				}
			}
			if = {
				limit = {
					NOT = { is_colony = yes }
				}
				random_list = { #Planets
					0 = {
						set_name = {
							key = giga_rename_planet_1
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 1 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_2
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 2 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_3
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 3 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_4
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 4 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_5
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 5 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_6
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 6 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_7
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 7 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_8
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 8 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_9
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 9 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_10
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 10 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_11
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 11 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_12
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 12 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_13
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 13 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_14
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 14 which = rename_system_planet_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_planet_15
							variable_string = "\\[rename_system.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 15 which = rename_system_planet_count } }
					}
				}
			}
		}
		#Now onto handling binary and trinary orbiting planets 
		every_system_planet = {
			limit = {
				exists = orbit
				orbit = {
					NOT = { has_planet_flag = rename_primary_star }
					is_star = yes
				}
				NOT = { is_colony = yes }
			}
			orbit = { save_event_target_as = rename_parent_star}
			random_list = { #Planets
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_1
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 1 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_2
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 2 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_3
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 3 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_4
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 4 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_5
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 5 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_6
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 6 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_7
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 7 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_8
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 8 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_9
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 9 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_10
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 10 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_11
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 11 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_12
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 12 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_13
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 13 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_14
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 14 which = rename_system_planet_count } }
				}
				0 = {
					set_name = {
						key = giga_rename_bitri_planet_15
						variable_string = "\\[rename_parent_star.GetName\\]"
					}
					modifier = { add = 1 check_variable = { value = 15 which = rename_system_planet_count } }
				}
			}
		}
		#Renames moons and asteroids
		every_system_planet = {
			every_moon = {#Renames Moons to their host planet
				limit = { orbit = { NOR = { is_star = yes } NOT = { is_colony = yes } } } 
				prev = {
					save_event_target_as = rename_m_previous_planet
				}
				random_list = {
					0 = {
						set_name = {
							key = giga_rename_moon_1
							variable_string = "\\[rename_m_previous_planet.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 1 which = rename_moon_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_moon_2
							variable_string = "\\[rename_m_previous_planet.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 2 which = rename_moon_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_moon_3
							variable_string = "\\[rename_m_previous_planet.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 3 which = rename_moon_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_moon_4
							variable_string = "\\[rename_m_previous_planet.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 4 which = rename_moon_count } }
					}
					0 = {
						set_name = {
							key = giga_rename_moon_5
							variable_string = "\\[rename_m_previous_planet.GetName\\]"
						}
						modifier = { add = 1 check_variable = { value = 5 which = rename_moon_count } }
					}
				}
			}
			if = { #Thanks TTFT I totally didn't just steal this from your elysium / void dweller stuff
				limit = { is_asteroid = yes }
				random_list = { 
					1 = { set_name = "giga_generic_asteroid_1" set_planet_flag = random_asteroid_name_1 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_1 } } } }
					1 = { set_name = "giga_generic_asteroid_2" set_planet_flag = random_asteroid_name_2 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_2 } } } }
					1 = { set_name = "giga_generic_asteroid_3" set_planet_flag = random_asteroid_name_3 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_3 } } } }
					1 = { set_name = "giga_generic_asteroid_4" set_planet_flag = random_asteroid_name_4 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_4 } } } }
					1 = { set_name = "giga_generic_asteroid_5" set_planet_flag = random_asteroid_name_5 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_5 } } } }
					1 = { set_name = "giga_generic_asteroid_6" set_planet_flag = random_asteroid_name_6 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_6 } } } }
					1 = { set_name = "giga_generic_asteroid_7" set_planet_flag = random_asteroid_name_7 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_7 } } } }
					1 = { set_name = "giga_generic_asteroid_8" set_planet_flag = random_asteroid_name_8 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_8 } } } }
					1 = { set_name = "giga_generic_asteroid_9" set_planet_flag = random_asteroid_name_9 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_9 } } } }
					1 = { set_name = "giga_generic_asteroid_10" set_planet_flag = random_asteroid_name_10 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_10 } } } }
					1 = { set_name = "giga_generic_asteroid_11" set_planet_flag = random_asteroid_name_11 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_11 } } } }
					1 = { set_name = "giga_generic_asteroid_12" set_planet_flag = random_asteroid_name_12 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_12 } } } }
					1 = { set_name = "giga_generic_asteroid_13" set_planet_flag = random_asteroid_name_13 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_13 } } } }
					1 = { set_name = "giga_generic_asteroid_14" set_planet_flag = random_asteroid_name_14 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_14 } } } }
					1 = { set_name = "giga_generic_asteroid_15" set_planet_flag = random_asteroid_name_15 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_15 } } } }
					1 = { set_name = "giga_generic_asteroid_16" set_planet_flag = random_asteroid_name_16 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_16 } } } }
					1 = { set_name = "giga_generic_asteroid_17" set_planet_flag = random_asteroid_name_17 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_17 } } } }
					1 = { set_name = "giga_generic_asteroid_18" set_planet_flag = random_asteroid_name_18 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_18 } } } }
					1 = { set_name = "giga_generic_asteroid_19" set_planet_flag = random_asteroid_name_19 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_19 } } } }
					1 = { set_name = "giga_generic_asteroid_20" set_planet_flag = random_asteroid_name_20 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_20 } } } }
					1 = { set_name = "giga_generic_asteroid_21" set_planet_flag = random_asteroid_name_21 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_21 } } } }
					1 = { set_name = "giga_generic_asteroid_22" set_planet_flag = random_asteroid_name_22 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_22 } } } }
					1 = { set_name = "giga_generic_asteroid_23" set_planet_flag = random_asteroid_name_23 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_23 } } } }
					1 = { set_name = "giga_generic_asteroid_24" set_planet_flag = random_asteroid_name_24 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_24 } } } }
					1 = { set_name = "giga_generic_asteroid_25" set_planet_flag = random_asteroid_name_25 modifier = { factor = 0 solar_system = { any_system_planet = { has_planet_flag = random_asteroid_name_25 } } } }
				}
			}
		}
	}
}

giga_schedule_job_refresh = {
	planet_event = {
		id = giga_util.001
		days = $delay|3$
	}
}

giga_set_stripmine_info = { 
	#Base Size for later
	set_variable = {
		which = giga_original_planetsize
		value = planet.trigger:planet_size
	}
	planet = {
		#Special products
		if = {
			limit = { has_modifier = pd_diamond }
			prev = { set_megastructure_flag = pd_diamond }
		}
		if = {
			limit = { has_modifier = pd_chthonian }
			prev = { set_megastructure_flag = pd_chthonian }
		}
		if = {
			limit = { has_modifier = pd_ethane_ocean }
			prev = { set_megastructure_flag = pd_ethane_ocean }
		}
	}
}
giga_stripmine_colony_destruction = {
	planet = {
		if = {
			limit = { 
				is_colony = yes 
				OR = {
					owner = { is_country_type = primitive }
					num_pops >= 10
				}
			}
			if = {
				limit = {
					owner = { 
						OR = { 
							is_machine_empire = yes 
							is_synthetic_empire = yes 
						}
					}
				}
				prev = { 
					set_megastructure_flag = stripmine_alloy_deposit
					set_variable = {
						which = gigas_stripmine_alloy_deposit_value
						value = planet.trigger:num_pops
					}
					multiply_variable = {
						which = gigas_stripmine_alloy_deposit_value
						value = 1.5
					}
					set_variable = {
						which = gigas_stripmine_alloy_deposit_length
						value = planet.trigger:planet_size
					}
					divide_variable = {
						which = gigas_stripmine_alloy_deposit_length
						value = 8
					}
					round_variable = gigas_stripmine_alloy_deposit_length
				}
			}
			else_if = {
				limit = {
					owner = {
						is_lithoid_empire = yes
					}
				}
				prev = {
					set_megastructure_flag = stripmine_rich_minerals_deposit
					set_variable = {
						which = stripmine_rich_minerals_deposit_value
						value = planet.trigger:num_pops
					}
					multiply_variable = {
						which = stripmine_rich_minerals_deposit_value
						value = 2.5
					}
					set_variable = {
						which = gigas_stripmine_rich_minerals_deposit_length
						value = planet.trigger:planet_size
					}
					divide_variable = {
						which = gigas_stripmine_rich_minerals_deposit_length
						value = 6
					}
					round_variable = gigas_stripmine_rich_minerals_deposit_length
				}
			}
			else = {
				prev = { 
					set_megastructure_flag = stripmine_food_deposit
					set_variable = {
						which = giga_stripmine_food_deposit_value
						value = planet.trigger:num_pops
					}
					multiply_variable = {
						which = giga_stripmine_food_deposit_value
						value = 3
					}
				} 
			}
			prev = {
				set_megastructure_flag = planet_had_colony
			}
		}
		if ={
			limit = { is_colony = yes }
			every_owned_pop = {
				kill_pop = yes
			}
			remove_all_buildings = yes
			destroy_colony = yes
			change_pc = pc_strip_mined
		}
	}
	every_country = {
		limit = {
			has_communications = event_target:giga_stripmine_builder
			NOT = { is_country = event_target:giga_stripmine_builder }
			prev = {
				has_megastructure_flag = planet_had_colony
			}
			NOR = {
				is_country_type = fallen_empire
				is_xenophobe = yes
				is_xenophage = yes # i.e. consumes one or more of its constituent Species
			}
		}
		add_opinion_modifier = {
			who = event_target:giga_stripmine_builder
			modifier = opinion_xenophage_stripmine
		}
	}
}

giga_stripmine_size_drop = {
	planet = { 
		change_planet_size = -1 
		if = {
			limit = { 
				NOT = {
					is_planet_class = pc_strip_mined
				}
			}
			change_pc = pc_strip_mined
		}
	}
	#Variable time
	change_variable = {
		which = gigas_stripmine_rich_mineral_deposit_length
		value = -1
	}
	change_variable = {
		which = gigas_stripmine_alloy_deposit_length
		value = -1
	}
	change_variable = {
		which = gigas_stripmine_supertensile_deposit_length
		value = -1
	}
	change_variable = {
		which = gigas_stripmine_gas_deposit_length
		value = -1
	}
	change_variable = {
		which = gigas_stripmine_motes_deposit_length
		value = -1
	}
	change_variable = {
		which = gigas_stripmine_crystal_deposit_length
		value = -1
	}
	if = {
		limit = {
			check_variable = {
				which = gigas_stripmine_rich_mineral_deposit_length
				value = 0
			}
		}
		remove_megastructure_flag = stripmine_rich_mineral_deposit
		clear_variable = gigas_stripmine_mineral_deposit_value
	}
	if = {
		limit = {
			check_variable = {
				which = gigas_stripmine_alloy_deposit_length
				value = 0
			}
		}
		remove_megastructure_flag = stripmine_alloy_deposit
		clear_variable = gigas_stripmine_alloy_deposit_value
	}
	if = {
		limit = {
			check_variable = {
				which = gigas_stripmine_gas_deposit_length
				value = 0
			}
		}
		remove_megastructure_flag = stripmine_gas_deposit
		clear_variable = gigas_stripmine_gas_deposit_value
	}
	if = {
		limit = {
			check_variable = {
				which = gigas_stripmine_crystal_deposit_length
				value = 0
			}
		}
		remove_megastructure_flag = stripmine_crystal_deposit
		clear_variable = gigas_stripmine_crystal_deposit_value
	}
	if = {
		limit = {
			check_variable = {
				which = gigas_stripmine_motes_deposit_length
				value = 0
			}
		}
		remove_megastructure_flag = stripmine_motes_deposit
		clear_variable = gigas_stripmine_motes_deposit_value
	}
	if = {
		limit = {
			check_variable = {
				which = gigas_stripmine_supertensile_deposit_length
				value = 0
			}
		}
		remove_megastructure_flag = stripmine_supertensile_deposit
		clear_variable = gigas_stripmine_supertensile_deposit_value
	}
	planet = {
		fire_on_action = {
			on_action = on_size_stripmined 
			scopes = {
				from = prev
				fromfrom = event_target:situation_of_stripmine_@prev
			}
		}
		# log = "Look the on_action fired!"
	}
}

giga_clear_stripmine_speed_flags = {
	remove_megastructure_flag = stripmine_quick
	remove_megastructure_flag = stripmine_slow
}

# remove dyson etc modifiers for when we blow up a system
giga_clear_mega_planet_modifiers = {
	remove_modifier = dyson_swarm_1_mod
	remove_modifier = dyson_swarm_2_mod
	remove_modifier = dyson_swarm_3_mod
	remove_modifier = orbital_arc_furnace_1_mod
	remove_modifier = orbital_arc_furnace_2_mod
	remove_modifier = orbital_arc_furnace_3_mod
	remove_modifier = orbital_arc_furnace_4_mod
}

# used in fallen empire spawning
# but... is commented out? awww come on
giga_spawn_max_orbital_arcology = {
	# if = {
	# 	limit = {
	# 		has_overlord_dlc = yes
	# 	}
	#
	#
	# }
	# else = {
		set_variable = {
			which = orbital_arcology_size
			value = trigger:planet_size
		}
		set_variable = {
			which = orbital_arcology_modifier
			value = orbital_arcology_size
		}
		divide_variable = {
			which = orbital_arcology_modifier
			value = 5
		}
		ceiling_variable = orbital_arcology_modifier
		set_variable = {
			which = orbital_arcology_modifier_districts
			value = orbital_arcology_modifier
		}
		multiply_variable = {
			which = orbital_arcology_modifier_districts
			value = 2
		}
		set_planet_flag = has_fe_orbital_arcology
		solar_system = {
			spawn_megastructure = {
				type = orbital_arcology_0
				owner = ROOT
				planet = PREV
			}
			every_system_megastructure = {
				limit = { is_megastructure_type = orbital_arcology_0 }
				upgrade_megastructure_to = orbital_arcology_1
				finish_upgrade = yes
				upgrade_megastructure_to = orbital_arcology_2
				finish_upgrade = yes
			}
		}
	#}
}

giga_cosmogenesis_effect = {
	save_event_target_as = cosmogenesis_empire
	set_country_flag = cosmogenesis_empire_has_won
	make_fallen_empire = yes
	every_country = {
		limit = {
			is_country_type = default
		}
		country_event = { id = crisis.7518 days = 5 }
	}
	if = {
		limit = {
			galaxy_size = tiny
		}
		while = { #Destroy ~10% random stars, for good measure
			count = 18
			random_system = {
				limit = {
					NOT = {
						is_star_class = sc_black_hole
						any_system_planet = {
							num_pops > 0
						}
					}
				}
				destroy_star_system = yes
			}
		}
	}
	else_if = {
		limit = {
			galaxy_size = small
		}
		while = { #Destroy ~10% random stars, for good measure
			count = 36
			random_system = {
				limit = {
					NOT = {
						is_star_class = sc_black_hole
						any_system_planet = {
							num_pops > 0
						}
					}
				}
				destroy_star_system = yes
			}
		}
	}
	else_if = {
		limit = {
			galaxy_size = medium
		}
		while = { #Destroy ~10% random stars, for good measure
			count = 52
			random_system = {
				limit = {
					NOT = {
						is_star_class = sc_black_hole
						any_system_planet = {
							num_pops > 0
						}
					}
				}
				destroy_star_system = yes
			}
		}
	}
	else_if = {
		limit = {
			galaxy_size = large
		}
		while = { #Destroy ~10% random stars, for good measure
			count = 70
			random_system = {
				limit = {
					NOT = {
						is_star_class = sc_black_hole
						any_system_planet = {
							num_pops > 0
						}
					}
				}
				destroy_star_system = yes
			}
		}
	}
	else_if = {
		limit = {
			galaxy_size = huge
		}
		while = { #Destroy ~10% random stars, for good measure
			count = 88
			random_system = {
				limit = {
					NOT = {
						is_star_class = sc_black_hole
						any_system_planet = {
							num_pops > 0
						}
					}
				}
				destroy_star_system = yes
			}
		}
	}
	date_distortion = yes
	event_target:global_event_country = {
		country_event = { id = crisis.7519 days = 30 }
	}
}