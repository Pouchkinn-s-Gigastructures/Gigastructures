# VANILLA OVERWRITE

triggered_pop_modifier = {
    potential = {
        NOT = { has_trait = trait_noxious }
    }
    key = trait_noxious
    pop_happiness = 1
    mult = modifier:pop_non_noxious_happiness
}

triggered_planet_modifier = {
    potential = {
        has_trait = trait_noxious
    }
    key = trait_noxious
    pop_non_noxious_happiness = @noxious_happiness_penalty
}

triggered_pop_modifier = {
    potential = {
        exists = owner
        is_same_species_class = owner
        planet = {
            any_owned_species = {
                NOT = { is_same_species = root }
                is_same_species_class = root
            }
        }
    }
    key = triggered_selective_kinship
    pop_happiness = 1
    mult = modifier:citizen_pop_same_species_class_happiness
}

triggered_pop_modifier = {
    potential = {
        exists = owner
        is_same_species_class = owner
        planet = {
            any_owned_species = {
                NOT = { is_same_species_class = root }
            }
        }
    }
    key = triggered_selective_kinship_hates
    pop_happiness = 1
    mult = modifier:citizen_pop_different_species_class_happiness
}

triggered_pop_modifier = {
    potential = {
        exists = owner
        has_citizenship_type = { type = citizenship_full country = owner }
    }
    key = civic_selective_kinship
    pop_political_power = 1
    mult = modifier:citizen_pop_political_power
}

triggered_pop_modifier = {
    potential = {
        has_trait = trait_cybernetic
    }
    key = mod_pop_cyborg_happiness
    pop_happiness = 1
    mult = modifier:pop_cyborg_happiness
}

triggered_pop_modifier = {
    potential = {
        NOT = { has_trait = trait_cybernetic }
    }
    key = mod_pop_non_cyborg_happiness
    pop_happiness = 1
    mult = modifier:pop_non_cyborg_happiness
}

triggered_pop_modifier = {
    potential = {
        has_trait = trait_cybernetic
        is_pop_category = worker
        owner = { NOT = { has_country_flag = cyber_event_worklife } }
    }
    key = mod_pop_cyborg_worker_happiness
    pop_happiness = 1
    mult = modifier:pop_cyborg_worker_happiness
}

triggered_pop_modifier = {
    potential = {
        has_trait = trait_cybernetic
        is_pop_category = worker
    }
    key =  cyber_event_worklife_name
    pop_happiness = 1
    mult = modifier:pop_cyborg_worker_happiness
}

triggered_planet_modifier = {
    potential = {
        has_trait = trait_auto_mod_cyborg
        exists = owner
        owner = {
            has_modifier = worse_parts
        }
    }
    trade_value_add = 0.5
}

triggered_planet_modifier = {
    potential = {
        can_generate_trade_value = yes
    }
    trade_value_add = 1
    mult = value:living_standard_trade_value
}

triggered_planet_modifier = {
    potential = {
        prosperity_gospel_check_trigger = yes
        can_generate_trade_value = yes
    }
    trade_value_add = @trade_value_prosperity_gospel
    mult = value:scripted_modifier_mult|MODIFIER|pop_lifestyle_trade_value_mult|
}

########################################################################################################################
# GIGAS ADDITIONS

# robot worker happiness
triggered_pop_modifier = {
    potential = {
        is_robot_pop = yes
        or = {
            is_pop_category = worker
            is_pop_category = simple_drone
        }
    }
    key = mod_pop_robot_worker_happiness
    pop_happiness = 1
    mult = modifier:pop_robot_worker_happiness
}

# robot specialist happiness
triggered_pop_modifier = {
    potential = {
        is_robot_pop = yes
        or = {
            is_pop_category = specialist
            is_pop_category = complex_drone
        }
    }
    key = mod_pop_robot_specialist_happiness
    pop_happiness = 1
    mult = modifier:pop_robot_specialist_happiness
}

# robot ruler happiness
triggered_pop_modifier = {
    potential = {
        is_robot_pop = yes
        is_pop_category = ruler
    }
    key = mod_pop_robot_ruler_happiness
    pop_happiness = 1
    mult = modifier:pop_robot_ruler_happiness
}

# robot slave happiness
triggered_pop_modifier = {
    potential = {
        is_robot_pop = yes
        or = {
            is_pop_category = slave
            is_pop_category = robot_servant
        }
    }
    key = mod_pop_robot_slave_happiness
    pop_happiness = 1
    mult = modifier:pop_robot_slave_happiness
}