# Overwritten to add isolated systems
can_enter_system_by_jump = {
	custom_tooltip = {
		#success_text = "debug: can jump"
		# is commented out in vanilla, doesn't seem to do anything either way
		fail_text = cannot_jump_to_system

		# Sealed system
		OR = {
			NOT = { has_star_flag = sealed_system }
			AND = {
				root = { has_country_flag = entered_sealed_system }
				has_star_flag = sealed_system
			}
		}

		# L-Cluster/Compound_Cluster
		OR = {
			NOR = {
				has_star_flag = lcluster
				has_star_flag = ehof_compound_system
				has_star_flag = giga_core_03
				cohesive_system = yes
				urmazin_system = yes
				everchanging_system = yes
				katzen_jump_blocked_system = yes
				has_star_flag = maginot_anti_jump_star # Maginot World subspace disruption
				has_star_flag = siegfried_anti_jump_star # Katzen version
				has_star_flag = svalinn_anti_jump_star # Svalinn Installation version
		}
			#This is gonna be a bit annoying, BUT it needs to be done for eager explorers
			AND = {
				cohesive_system = yes
				ROOT = { is_eager_explorer_empire = yes }
				has_star_flag = ehof_system_created_by_@root
			}
		}
	}
}

# this = starbase, megastructure or planet
can_orbitable_repair_ships = {
	OR = {
		AND = {
			is_scope_type = starbase
			OR = {
				has_starbase_size >= starbase_starport
				has_starbase_size = juggernaut
				has_starbase_size = enclave_mercenary_station
			}
			fleet = {
				is_disabled = no
			}
		}
		AND = {
			is_scope_type = megastructure
			OR = {
				is_megastructure_type = mega_shipyard_1
				is_megastructure_type = mega_shipyard_2
				is_megastructure_type = mega_shipyard_3
				is_megastructure_type = the_vat_1
				is_megastructure_type = the_vat_2
				is_megastructure_type = the_vat_3
				is_megastructure_type = the_vat_4
			}
		}
	}
}

# Overwritten to add sphere
can_orbital_bombard = {
	exists = from.owner
	NOT = {
		any_controlled_ship = {
			is_ship_size = colossus
		}
	}
	OR = {
		AND = {
			ROOT.CONTROLLER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.CONTROLLER = {
				NOR = {
					has_policy_flag = interference_not_allowed
					has_policy_flag = interference_subtle
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.CONTROLLER = { is_at_war_with = FROM.CONTROLLER }
		FROM = { is_planet_class = pc_infested }
		FROM.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = compound_empire
				is_country_type = sbtg_stellarborne_empire
				is_country_type = void_lifeforms_1
				is_country_type = void_lifeforms_2
				is_country_type = katzenartig_imperium
				is_country_type = giga_eawaf_sirens
				AND = {
					is_country_type = awakened_marauders
					ROOT.CONTROLLER = { is_hostile = prev }
				}
			}
		}
		ROOT.CONTROLLER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = gray_goo
				is_country_type = debt_collectors
				is_country_type = vol
				is_country_type = compound_empire
				is_country_type = sbtg_stellarborne_empire
				is_country_type = void_lifeforms_1
				is_country_type = void_lifeforms_2
				is_country_type = acot_crazed_stellarite
				is_country_type = katzenartig_imperium
				is_country_type = giga_hypersiphon_major_incursion
				is_country_type = giga_eawaf_sirens
				AND = {
					OR = {
						is_country_type = formless
						is_country_type = awakened_marauders
					}
					FROM.CONTROLLER = { is_hostile = prev }
				}
			}
		}
		AND = {
    	    from.controller = {
    	        is_country_type = faction
    	        NOT = { is_same_value = root.controller }
    	    }
    	    from.owner = {
    	        is_same_value = root.controller
    	    }
		}
	}
}

#Jublio
# this = system
# root = country
ai_should_restrict_system = {
	OR = {
		giga_ai_should_restrict_system = yes

		AND = {
			root = { is_country_type = fallen_empire }
			exists = owner
			owner = { is_country_type = awakened_marauders }
		}
		AND = {
			root = { is_country_type = awakened_marauders }
			exists = owner
			owner = { is_country_type = fallen_empire }
		}
		AND = {
			root = {
				OR = {
					is_country_type = fallen_empire
					is_country_type = awakened_marauders
				}
			}
			has_star_flag = guardian
			any_fleet_in_system = {
				exists = owner
				owner = {
					is_guardian_country = yes
				}
			}
		}
		AND = {
			root = {
				OR = {
					AND = {
						is_crisis_faction = yes
						# I don't know what happens if the blokkats restrict a system so lets not find out
						is_blokkat_country_type = no
					}
					is_country_type = awakened_fallen_empire
				}
			}
			has_star_flag = guardian
			any_fleet_in_system = {
				exists = owner
				owner = {
					is_country_type = guardian_fortress
				}
			}
		}
	}
}

#Check if it is possible to build orbital stations on this planet
# overwritten to stop the AI spamming paluushia with observation posts
#this: planet
#root: country
can_planet_support_orbital_station = {
	custom_tooltip = {
		fail_text = "ORBITAL_STATION_ALREADY_EXISTS"
		has_any_megastructure = no
		NOT = { has_planet_flag = has_megastructure }
	}
	custom_tooltip = {
		fail_text = "paluushia_no_ai_observation"
		or = {
			and = {
				exists = root
				root = { is_ai = no }
			}
			not = { has_planet_flag = paluushia }
		}
	}
}

# This = country, Country that wants to get an external leader
# From = country, country that we are trying to get from
can_get_external_leader_pool_candidate = {
	OR = {
		has_diplo_migration_treaty = from
		is_in_federation_with = from
		is_overlord_to = from
		giga_can_get_external_leader_pool_candidate = yes
	}
		# Both empires must be regular empires, machine intelligences or hive-minds.
		OR = {
			AND = {
				exists = event_target:flusion_primitives_country
				FROM = {
					is_same_empire = event_target:flusion_primitives_country
				}
			}
			AND = {
				ROOT = {
					is_regular_empire = yes
				}
				FROM = {
					is_regular_empire = yes
				}
			}
			AND = {
				ROOT = {
					has_authority = auth_machine_intelligence
				}
				FROM = {
					has_authority = auth_machine_intelligence
				}
			}
			AND = {
				ROOT = {
					has_authority = auth_hive_mind
				}
				FROM = {
					has_authority = auth_hive_mind
				}
			}
		}
}


# #Checks whether any leaders (scientists etc) can be formed from this pop
# #Root = country
# #This = pop
# can_generate_leader_from_pop = {
# 	has_citizenship_rights = yes
# 	NOT = { has_trait = trait_syncretic_proles }
# 	can_think = yes
# 	OR = {
# 		is_robot_pop = no
# 		root = {
# 			OR = {
# 				has_technology = tech_synthetic_leaders
# 				has_authority = auth_machine_intelligence
# 				is_mechanical_empire = yes
# 			}
# 		}
# 	}
# 	OR = {
# 		is_same_species = root
# 		root = {
# 			NAND = {
# 				has_origin = origin_necrophage
# 				has_trait = trait_necrophage
# 			}
# 		}
# 	}
# 	giga_kaiser_prevent_civilian_candidates = yes
# }


# #Checks whether this species is eligible to become rulers through elections
# #Root = country
# #This = species
# can_generate_leader_from_species = {
# 	is_sapient = yes
# 	OR = {
# 		NAND = {
# 			NOT = { root = { has_technology = "tech_synthetic_leaders" } }
# 			has_trait = "trait_mechanical"
# 		}
# 		has_citizenship_type = { type = citizenship_full country = root }
# 	}
# }

# #Root = country
# #This = pop
# can_generate_military_leader_from_pop = {
# 	can_be_military_leader = yes
# 	OR = {
# 		is_robot_pop = no
# 		root = {
# 			OR = {
# 				has_technology = tech_synthetic_leaders
# 				has_authority = auth_machine_intelligence
# 				is_mechanical_empire = yes
# 			}
# 		}
# 	}
# 	OR = {
# 		is_same_species = root
# 		root = {
# 			NAND = {
# 				has_origin = origin_necrophage
# 				has_trait = trait_necrophage
# 			}
# 		}
# 	}
# 	giga_kaiser_only_katzen_military_candidates = yes
# }

#Root = country
#This = pop
can_colonize_with_pop = {
	has_colonization_control = {
		type = colonization_control_no
		country = root
	}
	OR = {
		NOT = { has_trait = trait_self_modified }
		is_same_species = root
	}
	has_cybernetic_creed_trait = no
	NOR = {
		has_trait = trait_pathogenic_genes
		has_trait = trait_limited_cybernetic
	}
	if = {
		limit = {
			OR = {
				is_sapient = no
				has_trait = trait_zombie
			}
		}
		custom_tooltip = {
			always = no
		}
	}
	else = {
		always = yes
	}

	giga_can_colonize_with_pop = yes
}

# This = Planet
can_resettle_planet = {
	owner = {
		OR = {
			has_policy_flag = resettlement_allowed
			is_gestalt = yes
			country_has_shackled_robots = yes
			has_ascension_perk = ap_cosmogenesis
			any_owned_planet = {
				is_doomsday_planet = yes
			}
		}
	}
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		text = "RESETTLE_PLANET_UNDER_COLONIZATION"
		exists = this
		is_under_colonization = no
	}

	giga_can_resettle_planet = yes
}

can_resettle_planet_no_owner_check = {
	is_controlled_by = owner
	has_ground_combat = no
	has_orbital_bombardment = no
	custom_tooltip = {
		text = "RESETTLE_PLANET_UNDER_COLONIZATION"
		exists = this
		is_under_colonization = no
	}

	giga_can_resettle_planet = yes
}
