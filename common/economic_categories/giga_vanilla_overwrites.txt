#####################################################################
### Low priority vanilla overrides

# changing the habitat production triggered category to add gigas habitats
planet_jobs = {
	parent = planets
	modifier_category = pop

	generate_mult_modifiers = {
		produces
		upkeep
	}

	triggered_produces_modifier = {
		key = planet_jobs_slave
		modifier_types = {
			mult
		}
		trigger = {
			is_pop_category = slave
			has_job_category = worker
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_robot_slave
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = yes
			is_pop_category = slave
			has_job_category = worker
		}
	}

	triggered_produces_modifier = {
		key = planet_psionic_jobs
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				has_trait = trait_psionic
				has_trait = trait_latent_psionic
			}
		}
	}

	triggered_upkeep_modifier = {
		key = planet_psionic_jobs
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				has_trait = trait_psionic
				has_trait = trait_latent_psionic
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_worker_ownership_jobs
		modifier_types = {
			mult
		}
		trigger = {
			exists = owner
			has_living_standard = {
				country = owner
				type = living_standard_worker_ownership
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_cyborg_jobs
		modifier_types = {
			mult
		}
		trigger = {
			has_trait = trait_cybernetic
		}
	}

	triggered_produces_modifier = {
		key = planet_virtual_jobs
		modifier_types = {
			mult
		}
		trigger = {
			has_virtual_species_trait = yes
		}
	}

	triggered_produces_modifier = {
		key = habitat_jobs
		modifier_types = {
			mult
		}
		trigger = {
			exists = planet
			planet = { 
				or = {
					giga_is_habitat = yes
					is_non_giga_habitat = yes
				}
			}
		}
	}

	triggered_produces_modifier = {
		key = non_artificial_planet_jobs
		modifier_types = {
			mult
		}
		trigger = {
			exists = planet
			planet = { is_artificial = no }
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_worker
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave # Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
				is_pop_category = simple_drone
			}
		}
	}
	
	triggered_produces_modifier = {
		key = planet_jobs_cyborg_worker
		modifier_types = {
			mult
		}
		trigger = {
			has_trait = trait_cybernetic
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave # Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
				is_pop_category = simple_drone
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_robot_worker
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = yes
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave # Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
				is_pop_category = simple_drone
				is_pop_category = robot_servant
			}
		}
	}

	triggered_produces_modifier = { #use this one if deliberately excluding worker drones
		key = planet_jobs_worker_only
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave # Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_specialist
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = specialist
				is_pop_category = complex_drone #planet_jobs_complex_drone is preferable for stuff visible during galaxy setup
				AND = {
					is_pop_category = slave
					has_job_category = specialist
				}
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_robot_specialist
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = yes
			OR = {
				is_pop_category = specialist
				is_pop_category = complex_drone #planet_jobs_complex_drone is preferable for stuff visible during galaxy setup
				AND = {
					is_pop_category = slave
					has_job_category = specialist
				}
			}
		}
	}

	triggered_produces_modifier = { #use this one if deliberately excluding complex drones
		key = planet_jobs_specialist_only
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = specialist
				AND = {
					is_pop_category = slave
					has_job_category = specialist
				}
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_ruler
		modifier_types = {
			mult
		}
		trigger = {
			is_pop_category = ruler
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_simple_drone
		modifier_types = {
			mult
		}
		trigger = {
			is_pop_category = simple_drone
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_complex_drone
		modifier_types = {
			mult
		}
		trigger = {
			is_pop_category = complex_drone
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_complex_and_simple_drone
		modifier_types = {
			mult
		}
		trigger = {
			OR = {
				is_pop_category = complex_drone
				is_pop_category = simple_drone
			}
			
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_robotic
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = yes
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_organics
		modifier_types = {
			mult
		}
		trigger = {
			is_robot_pop = no
		}
	}
}

planet_districts = {
	parent = planet_structures

	generate_mult_modifiers = {
		cost
		upkeep
		produces
	}
	modifier_category = planet
}

planet_politicians = {
	parent = planet_jobs_productive
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_nobles = {
	parent = planet_politicians
	modifier_category = pop
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_merchants = {
	parent = planet_jobs
	modifier_category = pop
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_entertainers = {
	parent = planet_jobs
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_executives = {
	parent = planet_politicians
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_evaluators = {
	parent = planet_administrators
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_traders = {
	parent = planet_jobs
	generate_add_modifiers = {
		upkeep
	}
	modifier_category = pop
}

planet_telepaths = {
	parent = planet_administrators
	modifier_category = pop
	generate_add_modifiers = {
		produces
		upkeep
	}
	generate_mult_modifiers = {
		produces
	}
	triggered_produces_modifier = {
		key = planet_administrators
		modifier_types = {
			add
		}
		trigger = {
			always = yes
		}
		use_parent_icon = yes
	}
	triggered_upkeep_modifier = {
		key = planet_administrators
		modifier_types = {
			add
		}
		trigger = {
			always = yes
		}
		use_parent_icon = yes
	}
}

planet_doctors = {
	parent = planet_jobs
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_technician = {
	parent = planet_jobs_productive
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_priests = {
	parent = planet_administrators
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
	triggered_produces_modifier = {
		key = planet_administrators
		modifier_types = {
			add
		}
		trigger = {
			always = yes
		}
		use_parent_icon = yes
	}
	triggered_upkeep_modifier = {
		key = planet_administrators
		modifier_types = {
			add
		}
		trigger = {
			always = yes
		}
		use_parent_icon = yes
	}
}

planet_managers = {
	parent = planet_administrators
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
	triggered_produces_modifier = {
		key = planet_administrators
		modifier_types = {
			add
		}
		trigger = {
			always = yes
		}
		use_parent_icon = yes
	}
	triggered_upkeep_modifier = {
		key = planet_administrators
		modifier_types = {
			add
		}
		trigger = {
			always = yes
		}
		use_parent_icon = yes
	}
}

planet_administrators = {
	icon = "job_bureaucrat"
	parent = planet_jobs_productive
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_chemists = {
	parent = planet_jobs_productive
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_translucers = {
	parent = planet_jobs_productive
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_refiners = {
	parent = planet_jobs_productive
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_culture_workers = {
	parent = planet_administrators
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}
	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_miners = {
	parent = planet_jobs_productive
	modifier_category = pop
	generate_mult_modifiers = {
		produces
		upkeep
	}

	generate_add_modifiers = {
		produces
		upkeep
	}
}

planet_bio_trophies = {
	parent = planet_culture_workers
	modifier_category = pop
	generate_mult_modifiers = {
		produces upkeep
	}
	generate_add_modifiers = {
		produces upkeep
	}
}

planet_livestock = {
	parent = planet_jobs_productive
	modifier_category = pop
	generate_add_modifiers = {
		produces
	}
	generate_mult_modifiers = {
		produces
	}

	# Inherited Modifiers
	triggered_produces_modifier = {
		key = planet_farmers
		modifier_types = {
			mult
			add
		}
		trigger = {
			has_job = livestock	# This check is done so that livestock working zoo jobs don't inherit the modifier
			is_organic_species = yes
			is_lithoid = no
		}
		use_parent_icon = yes
	}
	triggered_produces_modifier = {
		key = planet_miners
		modifier_types = {
			mult
			add
		}
		trigger = {
			has_job = livestock	# This check is done so that livestock working zoo jobs don't inherit the modifier
			is_organic_species = yes
			is_lithoid = yes
		}
		use_parent_icon = yes
	}
}


planet_pops = {
	parent = planets
	modifier_category = pop
	generate_mult_modifiers = {
		upkeep
	}
	generate_add_modifiers = {
		upkeep
	}

	triggered_upkeep_modifier = {
		key = planet_pops_robotics
		modifier_types = {
			mult
			add
		}
		trigger = {
			is_robot_pop = yes
		}
	}

	triggered_upkeep_modifier = {
		key = planet_pops_cyborgs
		modifier_types = {
			mult
		}
		trigger = {
			has_trait = trait_cybernetic
		}
	}

	triggered_upkeep_modifier = {
		key = planet_pops_organics
		modifier_types = {
			mult
			add
		}
		trigger = {
			is_robot_pop = no
		}
	}

	triggered_upkeep_modifier = {
		key = planet_pops_unemployed
		modifier_types = {
			mult
			add
		}
		trigger = {
			is_unemployed = yes
		}
	}

	triggered_upkeep_modifier = {
		key = planet_pops_biologicals
		modifier_types = { 
			mult
			add 
		}
		trigger = { 
			is_lithoid = no 
			is_robot_pop = no 
		}
	}

	triggered_upkeep_modifier = {
		key = planet_pops_lithoids
		modifier_types = { 
			mult
			add 
		}
		trigger = { 
			is_lithoid = yes 
		}
	}
}

#####################################################################
### Pop upkeep

# pop_category_precursor = {
# 	parent = planet_pops
# 	modifier_category = pop
# 	generate_add_modifiers = {
# 		upkeep
# 	}
#
# 	triggered_upkeep_modifier = {
# 		key = pop_category_precursor_organics
# 		modifier_types = { add }
# 		trigger = { is_robot_pop = no }
# 	}
# }
#
# pop_category_xeno_ward = {
# 	parent = planet_pops
# 	modifier_category = pop
# 	generate_add_modifiers = {
# 		upkeep
# 	}
#
# 	triggered_upkeep_modifier = {
# 		key = pop_category_xeno_ward_organics
# 		modifier_types = { add }
# 		trigger = { is_robot_pop = no }
# 	}
# }
#
# pop_category_pre_sapients = {
# 	parent = planet_pops
# 	modifier_category = pop
# 	generate_add_modifiers = {
# 		upkeep
# 	}
#
# 	triggered_upkeep_modifier = {
# 		key = pop_category_pre_sapients_organics
# 		modifier_types = { add }
# 		trigger = { is_robot_pop = no }
# 	}
# }
#
# pop_category_bio_trophy = {
# 	parent = planet_pops
# 	modifier_category = pop
# 	generate_add_modifiers = {
# 		upkeep
# 	}
#
# 	triggered_upkeep_modifier = {
# 		key = pop_category_bio_trophy_organics
# 		modifier_types = { add }
# 		trigger = { is_robot_pop = no }
# 	}
# }
#
pop_category_slave = {
	parent = planet_pops
	modifier_category = pop
	generate_mult_modifiers = {
		upkeep
	}
	generate_add_modifiers = {
		upkeep
	}

	# triggered_upkeep_modifier = {
	# 	key = pop_category_slave_organics
	# 	modifier_types = { add }
	# 	trigger = { is_robot_pop = no }
	# }

	triggered_upkeep_modifier = {
		key = pop_category_slave_robotic
		modifier_types = { add }
		trigger = { is_robot_pop = yes }
	}
}

pop_category_drones = {
	parent = planet_pops
	modifier_category = pop
	generate_add_modifiers = {
		upkeep
	}

	# triggered_upkeep_modifier = {
	# 	key = pop_category_drones_organics
	# 	modifier_types = { add }
	# 	trigger = { is_robot_pop = no }
	# }

	triggered_upkeep_modifier = {
		key = pop_category_drones_simple_robotic
		modifier_types = { add }
		trigger = {
			is_pop_category = simple_drone
			is_robot_pop = yes
		}
	}

	triggered_upkeep_modifier = {
		key = pop_category_drones_complex_robotic
		modifier_types = { add }
		trigger = {
			is_pop_category = complex_drone
			is_robot_pop = yes
		}
	}
}

pop_category_workers = {
	parent = planet_pops
	modifier_category = pop
	generate_add_modifiers = {
		upkeep
		produces
	}

	# triggered_upkeep_modifier = {
	# 	key = pop_category_workers_organics
	# 	modifier_types = { add }
	# 	trigger = { is_robot_pop = no }
	# }

	triggered_upkeep_modifier = {
		key = pop_category_workers_robotic
		modifier_types = { add }
		trigger = { is_robot_pop = yes }
	}
}

pop_category_specialists = {
	parent = planet_pops
	modifier_category = pop
	generate_add_modifiers = {
		upkeep
		produces
	}

	# triggered_upkeep_modifier = {
	# 	key = pop_category_specialists_organics
	# 	modifier_types = { add }
	# 	trigger = { is_robot_pop = no }
	# }

	triggered_upkeep_modifier = {
		key = pop_category_specialists_robotic
		modifier_types = { add }
		trigger = { is_robot_pop = yes }
	}
}

pop_category_rulers = {
	parent = planet_pops
	modifier_category = pop
	generate_mult_modifiers = {
		upkeep
	}
	generate_add_modifiers = {
		upkeep
		produces
	}

	# triggered_upkeep_modifier = {
	# 	key = pop_category_rulers_organics
	# 	modifier_types = { add }
	# 	trigger = { is_robot_pop = no }
	# }

	triggered_upkeep_modifier = {
		key = pop_category_rulers_robotic
		modifier_types = { add }
		trigger = { is_robot_pop = yes }
	}
}
#
# pop_category_assimilation = {
# 	parent = planet_pops
# 	modifier_category = pop
# 	generate_add_modifiers = {
# 		upkeep
# 	}
#
# 	triggered_upkeep_modifier = {
# 		key = pop_category_assimilation_organics
# 		modifier_types = { add }
# 		trigger = { is_robot_pop = no }
# 	}
# }

commercial_pacts = {
	parent = diplomacy
	modifier_category = country
	generate_mult_modifiers = {
		upkeep
	}
	generate_add_modifiers = {
		produces
	}
}

defensive_pacts = {
	parent = diplomacy
	modifier_category = country
	generate_mult_modifiers = {
		upkeep
	}
}

research_agreements = {
	parent = diplomacy
	modifier_category = country
	generate_mult_modifiers = {
		upkeep
	}
}

# same as vanilla
# colonies = {
# 	parent = ships
# 	modifier_category = ship
# 	use_for_ai_budget = yes
# 	ai_use_parent_for_resources_upkeep = {
# 		energy
# 	}

# 	triggered_cost_modifier = {
# 		key = ship_colonizer
# 		use_parent_icon = yes
# 		modifier_types = {
# 			mult add
# 		}

# 		trigger = {
# 			is_scope_valid = yes #When called from ship designer the design is not valid yet.
# 			is_ship_class = shipclass_colonizer
# 		}
# 	}
# }