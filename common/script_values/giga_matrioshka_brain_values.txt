giga_matrioshka_brain_uplink_count = {
    base = 0

    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink
        }
        mode = add
    }

    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_research
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_unity
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_sanctuary
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_entertainment
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_training
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_diplomacy
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_hell
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_livestock
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_amalgamation
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_foundry
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_factory
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_refinery
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_anti_deviancy
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_robot
        }
        mode = add
    }
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = building_giga_matrioshka_brain_uplink_virtual
        }
        mode = add
    }
}

giga_matrioshka_brain_uplink_multiplicative_value = {
    base = 1

    subtract = value:giga_mbrain_mult_inner|fraction|$fraction$|building|$building$|

    modifier = {
        has_building = $building$
        divide = value:giga_mbrain_mult_inner_2|building|$building$|
    }
}

giga_mbrain_mult_inner = {
    base = 1

    subtract = $fraction$

    modifier = {
        has_building = $building$
        pow = value:giga_mbrain_mult_inner_2|building|$building$|
    }
}

giga_mbrain_mult_inner_2 = {
    complex_trigger_modifier = {
        trigger = num_buildings
        parameters = {
            type = $building$
        }
        mode = weight
    }

    min = 1
}

giga_mbrain_anti_deviancy = {
    weight = value:giga_matrioshka_brain_uplink_multiplicative_value|fraction|@matrioshka_brain_uplink_anti_deviancy_reduction|building|building_giga_matrioshka_brain_uplink_anti_deviancy|
    multiply = value:giga_mbrain_anti_deviancy_inner
}

giga_mbrain_anti_deviancy_inner = {
    complex_trigger_modifier = {
        trigger = count_owned_pop
        parameters = {
            limit = {
                or = {
                    is_pop_category = simple_drone
                    is_pop_category = complex_drone
                    is_pop_category = deviant_drone
                    is_pop_category = corrupt_drone
                }
            }
        }
        mode = weight
    }
}
