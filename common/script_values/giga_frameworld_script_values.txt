frameworld_planet_maintenance_drone_jobs = {
	base = 0

	add = value:frameworld_nexus_maintenance_jobs

	add = value:frameworld_advanced_nexus_maintenance_jobs

	add = value:frameworld_maintenance_district_jobs
}

frameworld_maintenance_district_jobs = {
	base = 8
	modifier = {
		add = 2
		exists = owner
		owner = { has_technology = tech_housing_2 }
	}

	# maintenance overseer swap
	modifier = {
		subtract = 2
		has_deposit = d_frameworld_advanced_nexus
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_amenities_gestalt
		}
		mode = mult
	}
}

frameworld_nexus_maintenance_jobs = {
	base = 3
	modifier = {
		add = 1
		exists = owner
		owner = { has_technology = tech_housing_2 }
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_nexus
		}
		mode = mult
	}
}

frameworld_advanced_nexus_maintenance_jobs = {
	base = 6
	modifier = {
		add = 2
		exists = owner
		owner = { has_technology = tech_housing_2 }
	}

	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_nexus_advanced
		}
		mode = mult
	}
}

giga_frameworld_expanded_maintenance_multiplier = {
	base = 0
	
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				is_unemployed = yes
				not = {
					has_living_standard = { type = living_standard_organic_trophy }
				}
			}
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = frame_maintenance_drone
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = frame_maintenance_worker
		}
		mode = add
	}

	subtract = 5

	min = 0
}

giga_frameworld_max_stronghold_districts = {
	base = 0

	# 5% of max districts
	add = value:giga_frameworld_outpost_planet_size_fraction|FRACTION|5|

	# minimum of 1
	min = 1
}

# number of pops resettled per month to the frameworld
# 5% or 4, whichever is more. Breakpoint is 4 / 0.05 = 80
giga_frameworld_resettlement_count = {
	weight = trigger:num_pops
	mult = 0.05
	round = yes
	min = 4
}

# number of pops which should be created on 
# the home frameworld when a new outpost is built
giga_frameworld_outpost_pops = {
	base = 1 # origin has -1 in it, this offsets
	
	complex_trigger_modifier = {
		trigger = check_modifier_value
		trigger_scope = $WHO$
		parameters = {
			modifier = colony_start_num_pops_add
		}
		mode = add
	}

	# Guilli's precursor ruins +4 pops modifier
	modifier = {
		add = 4

		$WHERE$ = {
			has_modifier = gpm_precursor_ruins
		}
	}
}

# calculate the maximum number of shield districts that we can build
giga_frameworld_get_max_maginot_shield_districts = {
	# 1/5 of planet size
	weight = trigger:planet_size
	mult = 0.2
	round = yes

	# minus the number of *GUN* districts
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_maginot_planetary_cannons
		}
		mode = subtract
	}

	# minus queued *GUN* districts
	subtract = frameworld_building_maginot_gun

	min = 0

	# nothing if we're not maginot though
	modifier = {
		giga_is_maginot_frameworld = no
		weight = 0
	}
}
giga_frameworld_add_max_maginot_shield_districts = {
	base = 0

	weight = value:giga_frameworld_get_max_maginot_shield_districts

	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				is_deposit_type = d_frameworld_maginot_max_shields
			}
		}
		mode = subtract
	}

	min = 0
}
giga_frameworld_remove_max_maginot_shield_districts = {
	base = 0

	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				is_deposit_type = d_frameworld_maginot_max_shields
			}
		}
		mode = weight
	}

	subtract = value:giga_frameworld_get_max_maginot_shield_districts

	min = 0
}

# calculate the maximum number of gun districts that we can build
giga_frameworld_get_max_maginot_gun_districts = {
	# 1/5 of planet size
	weight = trigger:planet_size
	mult = 0.2
	round = yes

	# minus the number of *SHIELD* districts
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_maginot_shield_generators
		}
		mode = subtract
	}

	# minus queued *SHIELD* districts
	subtract = frameworld_building_maginot_shield

	min = 0

	# nothing if we're not maginot though
	modifier = {
		giga_is_maginot_frameworld = no
		weight = 0
	}
}
giga_frameworld_add_max_maginot_gun_districts = {
	base = 0

	weight = value:giga_frameworld_get_max_maginot_gun_districts

	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				is_deposit_type = d_frameworld_maginot_max_guns
			}
		}
		mode = subtract
	}

	min = 0
}
giga_frameworld_remove_max_maginot_gun_districts = {
	base = 0

	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				is_deposit_type = d_frameworld_maginot_max_guns
			}
		}
		mode = weight
	}

	subtract = value:giga_frameworld_get_max_maginot_gun_districts

	min = 0
}

giga_frameworld_outpost_empire_size_mult = {
	base = 1
	mult = value:giga_frameworld_outpost_count
	mult = value:scripted_modifier_mult|MODIFIER|empire_size_colonies_mult|
}

giga_frameworld_outpost_count_raw = {
	# outpost station fleets
	complex_trigger_modifier = {
		trigger = count_owned_fleet
		parameters = {
			limit = {
				is_frameworld_outpost = yes
				is_disabled = no
			}
		}
		mode = weight
	}

	# branch offices and other sources
	add = modifier:giga_frameworld_outpost_count
}

giga_frameworld_outpost_count = {
	#weight = modifier:giga_frameworld_outpost_count
	weight = value:giga_frameworld_outpost_count_raw

	# megacorp outposts count for less, but they get branch office outposts too
	modifier = {
		is_megacorp = yes
		multiply = 0.5
	}
}
giga_frameworld_outpost_growth_count = {
	weight = owner.value:giga_frameworld_outpost_count
	multiply = @giga_frameworld_outpost_expansion_curve
	divide = value:giga_frameworld_outpost_growth_count_internal
	multiply = $mult|1$
}
giga_frameworld_outpost_growth_count_internal = {
	weight = owner.value:giga_frameworld_outpost_count
	add = @giga_frameworld_outpost_expansion_curve
}

giga_frameworld_outpost_job_upkeep = {
	base = 1
	[[!lithoid]
		complex_trigger_modifier = {
			trigger = num_assigned_jobs
			parameters = {
				job = $job$
			}
			trigger_scope = target
			mode = mult
		}
	]
	[[lithoid]
		complex_trigger_modifier = {
			trigger = count_owned_pop
			parameters = {
				limit = {
					has_job = $job$
					is_lithoid = $lithoid$
				}
			}
			trigger_scope = target
			mode = mult
		}
	]
	mult = owner.value:giga_frameworld_outpost_count
	[[MODIFIER]
	mult = target.value:scripted_modifier_mult|MODIFIER|$modifier$|
	]
}
giga_frameworld_outpost_growth_job_upkeep = {
	base = 1
	[[!checkType]
		complex_trigger_modifier = {
			trigger = num_assigned_jobs
			parameters = {
				job = $job$
			}
			trigger_scope = target
			mode = mult
		}
	]
	[[checkType]
		complex_trigger_modifier = {
			trigger = count_owned_pop
			parameters = {
				limit = {
					has_job = $job$
					is_lithoid = $lithoid|no$
				}
			}
			trigger_scope = target
			mode = mult
		}
	]
	mult = value:giga_frameworld_outpost_growth_count
	[[modifier]
		mult = target.value:scripted_modifier_mult|MODIFIER|$modifier$|
	]
}

giga_frameworld_ai_wanted_minerals = {
	weight = trigger:years_passed
	mult = 1.5 # minerals per year since game start

	complex_trigger_modifier = {
		trigger = resource_income_compare
		parameters = {
			resource = minerals
		}
		trigger_scope = owner
		mode = subtract
	}

	add = value:giga_var|var|giga_frameworld_ai_wanted_minerals|

	min = 0 # don't go negative lol
}
giga_frameworld_ai_wanted_minerals_cost = {
	complex_trigger_modifier = {
		trigger = market_resource_price
		parameters = {
			resource = minerals
			amount = 1
			trade_type = market_buy
		}
		trigger_scope = owner
		mode = weight
	}
	multiply = value:giga_var|var|giga_frameworld_ai_wanted_minerals|
}

giga_frameworld_hab_harvest_count = {
	weight = solar_system.value:num_major_orbitals
	mult = 0.5
	ceiling = yes
	add = trigger:planet_size
}