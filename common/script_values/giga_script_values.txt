@pi = 3.14159265358979

giga_empire_size_mult = {
	base = 0

	weight = trigger:empire_sprawl_over_cap

	multiply = value:giga_empire_size_mult_scaling

	min = 0
}
giga_empire_size_mult_scaling = {
	base = 1

	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = empire_size_penalty_mult
		}
		mode = add
	}
}

# build speed reduction for the rogue AI PCC
giga_rogue_ai_computer_build_speed_mult = {
	base = 0.25

	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				is_deposit_type = d_giga_rogue_ai_relay_servers
			}
		}
		mode = multiply
	}

	max = 0.9
}



giga_count_resource_space_output_modifier = {
	base = 1

	modifier = {
		exists = space_owner
		add = space_owner.modifier:country_produces_mult
	}
	modifier = {
		exists = space_owner
		add = space_owner.modifier:country_$resource$_produces_mult
	}

	add = modifier:stations_produces_mult
	add = modifier:stations_$resource$_produces_mult

	[[!research]
		add = modifier:station_gatherers_produces_mult
		add = modifier:station_gatherers_$resource$_produces_mult
	]
	[[research]
		add = modifier:station_researchers_produces_mult
		add = modifier:station_researchers_$resource$_produces_mult
	]

	min = 0.01
}

giga_get_opinion_from_jobs = {
	base = 0

	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = giga_tooltips_influence_produces_add
		}
		mode = weight
	}
}

giga_bonus_desired_constructors_min = {
	base = 0

	# give some more early constructors to the frame for outposts and asteroids
	modifier = {
		giga_has_frameworld_origin = yes
		add = 2
	}

	# more availability
	modifier = {
		has_technology = tech_mega_engineering
		add = value:giga_bonus_desired_constructors_min_mega_engineering
	}
}

giga_bonus_desired_constructors_min_mega_engineering = {
	base = 0

	# an additional 1 for every 4 systems
	add = trigger:controlled_systems
	mult = 0.25

	# limited to bonus build cap + 5 or 10, whichever is less
	max = value:giga_bonus_min_constructors_calc
	max = 10
}

giga_bonus_min_constructors_calc = {
	weight = modifier:country_megastructure_build_cap_add
	add = 5
}

# this is added to the vanilla max
giga_bonus_desired_constructors_max = {
	# give extra max to normal and awakened empires
	modifier = {
		or = {
			is_country_type = default
			is_country_type = awakened_fallen_empire
		}
		add = value:giga_bonus_desired_constructors_max_normal
	}
}

giga_bonus_desired_constructors_max_normal = {
	base = 0

	# an additional 1 for every 20 systems
	add = trigger:controlled_systems
	mult = 0.05

	# half that for awakened empires
	modifier = {
		is_country_type = awakened_fallen_empire
		mult = 0.5
	}

	# give at least bonus buildcap
	# this will scale with production for supertensiles automatically via the AI cap modifier
	modifier = {
		not = { has_global_flag = giga_buildcap_u }

		min = modifier:country_megastructure_build_cap_add
	}
	# or a lump sum if unlimited
	modifier = {
		has_global_flag = giga_buildcap_u

		min = 10
	}
}

# habitability ranking value for the giga_get_species_for_colony effect
# event_target:giga_target_planet is the prospective colony
# scope = species
giga_get_species_for_colony_habitability = {
	complex_trigger_modifier = {
		trigger = habitability
		trigger_scope = event_target:giga_target_planet
		parameters = {
			who = prev
		}
		mode = weight
	}
}

# scoring function for asteroids when building a Stellar Ring Habitat
# determines how much a consumed asteroid contributes to the planet size calculation
giga_orbital_asteroid_value = {
	weight = trigger:planet_size
	multiply = 0.4 # standard size appears to be 5, so 2 score per asteroid base

	modifier = {
		is_planet_class = pc_ice_asteroid
		multiply = 0.8
	}

	modifier = {
		is_planet_class = pc_crystal_asteroid
		multiply = 1.2
	}

	add = value:giga_count_resource|resource|minerals|mult|0.5|
	add = value:giga_count_resource|resource|energy|mult|0.25|
	add = value:giga_count_resource|resource|alloys|mult|1.0|

	# guilli's modifiers
	modifier = {
		has_modifier = gpm_large_asteroid
		multiply = 1.25
	}

	modifier = {
		has_modifier = gpm_asteroid_moon
		multiply = 1.2
	}

	modifier = {
		has_modifier = gpm_metal_asteroid
		multiply = 1.5
	}

	modifier = {
		has_modifier = gpm_dense_core
		multiply = 1.2
	}

	modifier = {
		has_modifier = gpm_hollow_structure
		multiply = 0.4
	}

	modifier = {
		has_modifier = gpm_crystallized_structure
		multiply = 1.1
	}

	modifier = {
		has_modifier = gpm_abandoned_mining_platforms
		multiply = 0.6
	}

	modifier = {
		has_modifier = gpm_spherical_asteroid
		multiply = 1.2
	}

	modifier = {
		has_modifier = gpm_c_type_asteroid
		multiply = 0.75
	}

	modifier = {
		has_modifier = gpm_s_type_asteroid
		multiply = 1.2
	}

	modifier = {
		has_modifier = gpm_m_type_asteroid
		multiply = 1.5
	}

	modifier = {
		has_modifier = gpm_v_type_asteroid
		multiply = 0.75
	}
}

# 10 + value, up to 20, after which excess is square rooted
giga_orbital_size_calculation = {
	weight = giga_stellar_ring_value
	subtract = 20
	min = 0
	square_root = yes

	add = value:giga_orbital_size_calculation_a
	add = 10

	round = yes
}

giga_orbital_size_calculation_a = {
	weight = giga_stellar_ring_value
	max = 20
}

# number of viable source asteroids in the system, for gathering cost
giga_orbital_asteroid_count = {
	base = 1 # the one it's built on
	complex_trigger_modifier = {
		trigger = count_system_planet
		trigger_scope = solar_system
		parameters = {
			limit = {
				is_asteroid = yes
				is_moon = no
				is_colony = no
				nor = {
					has_planet_flag = has_megastructure
					has_planet_flag = megastructure
					has_anomaly = yes
					has_planet_flag = giga_remove_planet
				}
			}
		}
		mode = add
	}
}

giga_system_resettlement = {
	base = 0

	modifier = {
		exists = solar_system
		solar_system = {
			exists = star
			star = {
				is_variable_set = giga_system_resettlement
			}
		}

		add = solar_system.star.giga_system_resettlement
	}
}
giga_system_resettlement_calc = {
	weight = modifier:giga_system_resettlement_unemployed_mult
}

giga_system_bio_trophy_bonus = {
	base = 0

	modifier = {
		exists = solar_system
		solar_system = {
			exists = star
			star = {
				is_variable_set = giga_system_bio_trophy_bonus
			}
		}

		add = solar_system.star.giga_system_bio_trophy_bonus
	}
}
giga_system_bio_trophy_bonus_calc = {
	weight = modifier:giga_system_bio_trophy_propagation
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = bio_trophy
		}
		mode = mult
		mult = 0.01 # 1% bonus per job
	}
}

giga_system_habitat_amenities = {
	base = 0

	modifier = {
		exists = solar_system
		solar_system = {
			exists = star
			star = {
				is_variable_set = giga_system_habitat_amenities
			}
		}

		add = solar_system.star.giga_system_habitat_amenities
	}
}

giga_system_habitat_amenities_calc = {
	weight = modifier:giga_system_habitat_amenities_add
	add = modifier:giga_system_habitat_amenities_no_happiness_add
}

# used only in the value:toxic_attendant_growth overwrite in 01_giga_low_prio_value_overwrites.txt
# for ease of maintenance since, well, we have a lot lmao - TTFTCUTS
giga_toxic_attendant_growth = {
	base = 0

	# ringworlds, x4
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_rw_alloys
		}
		mode = add
		mult = 4
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_rw_consumer
		}
		mode = add
		mult = 4
	}

	# alderson, x6
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_alderson_industrial
		}
		mode = add
		mult = 6
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_alderson_consumer
		}
		mode = add
		mult = 6
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_alderson_alloys
		}
		mode = add
		mult = 6
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_alderson_refineries
		}
		mode = add
		mult = 6
	}

	# birch, x4
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_birch_ktisma_foundry
		}
		mode = add
		mult = 4
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_birch_ktisma_factory
		}
		mode = add
		mult = 4
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_birch_ktisma_refinery
		}
		mode = add
		mult = 4
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_birch_ktisma_supertensiles
		}
		mode = add
		mult = 4
	}

	# void birch, x32
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_birch_void_ktisma
		}
		mode = add
		mult = 32
	}

	# flusio-arcology, x2
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_flusion_heavy_industry
		}
		mode = add
		mult = 2
	}

	# frameworld, x1
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_foundry
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_foundry_advanced
		}
		mode = add
		mult = 2
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_factory
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_factory_advanced
		}
		mode = add
		mult = 2
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_refinery
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_supertensiles
		}
		mode = add
	}

	# gas giant, x1
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_gas_giant_habitat_industrial
		}
		mode = add
	}

	# # interstellar ring, x4
	# complex_trigger_modifier = {
	# 	trigger = num_districts
	# 	parameters = {
	# 		type = district_interstellar_industrial
	# 	}
	# 	mode = add
	# 	mult = 4
	# }
	# complex_trigger_modifier = {
	# 	trigger = num_districts
	# 	parameters = {
	# 		type = district_interstellar_alloys
	# 	}
	# 	mode = add
	# 	mult = 4
	# }

	# # penrose ring, x4
	# complex_trigger_modifier = {
	# 	trigger = num_districts
	# 	parameters = {
	# 		type = district_penrose_industrial
	# 	}
	# 	mode = add
	# 	mult = 4
	# }

	# general planet, x1
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_planet_alloys
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_supertensiles
		}
		mode = add
	}

	# VR industry (hiss), x2
	# complex_trigger_modifier = {
	# 	trigger = num_districts
	# 	parameters = {
	# 		type = district_virtual_alloys
	# 	}
	# 	mode = add
	# 	mult = 2
	# }
	# complex_trigger_modifier = {
	# 	trigger = num_districts
	# 	parameters = {
	# 		type = district_virtual_strat_res
	# 	}
	# 	mode = add
	# 	mult = 2
	# }
	# complex_trigger_modifier = {
	# 	trigger = num_districts
	# 	parameters = {
	# 		type = district_virtual_consumer
	# 	}
	# 	mode = add
	# 	mult = 2
	# }
}

giga_var = {
	base = 0

	modifier = {
		is_variable_set = $var$
		add = $var$
	}

	[[mult]
		multiply = $mult$
	]
}

giga_per_pop_modifier = {
	complex_trigger_modifier = {
		trigger = checK_modifier_value
		parameters = {
			modifier = $modifier$
		}
		mode = weight
	}

	multiply = trigger:num_pops
	floor = yes
}

giga_num_districts = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = $district$
		}
		mode = weight
	}
}

giga_num_districts_with_multiplier = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = $district$
		}
		mode = weight
	}
	multiply = $multiplier$
}

giga_num_districts_with_multiplier_floor = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = $district$
		}
		mode = weight
	}
	multiply = $multiplier$
	floor = yes
}

giga_grab_percent_pops = {
	base = 0
	add = trigger:num_pops
	mult = $PERCENT$
	ceiling  = yes
}

giga_one_plus = {
	base = 1
	add = $val$
}

#############################################################
#Vat Values
#Introduced to make life easier and allow for future cost reduction modifier scaling
giga_vat_timer_math = {
	base = 1
	add = modifier:starbase_shipyard_build_speed_mult
}

giga_vat_cancel_refund = {
	base = 1
	add = modifier:starbase_shipyard_build_cost_mult
	multiply = $WHO2$.giga_grow_$VAT$_cost_$RESOURCE$
	multiply = $WHO2$.giga_vat_$VAT$_grow_amount
}

giga_vat_grow_cost = {
	base = 1 
	add = modifier:starbase_shipyard_build_cost_mult
	multiply = $WHO2$.giga_grow_$VAT$_cost_$RESOURCE$
}

giga_vat_initial_grow_cost = {
	base = 1 
	add = modifier:starbase_shipyard_build_cost_mult
	multiply = @grow_$GROW$_$RESOURCE$_cost_deduct
}


##############################################################
# Ring world building scaling calculations
giga_ring_world_building_size = {
	base = 20 # default value for display on the tech and fallback

	# planet sizes:
	# ring segments = 10, 20, 30, 40
	# alderson slices = 15
	# birch = 500 but... insulae...

	# ringworlds get a value based on size
	modifier = {
		is_ringworld = yes

		set = value:giga_ring_world_building_size_calc
	}

	# alderson is bigger (and counts as a ring)
	modifier = {
		giga_is_alderson_disk = yes

		multiply = 2
	}

	# birch scales with insulae
	modifier = {
		giga_is_birch_world = yes

		set = value:giga_birch_world_building_size
	}
}

giga_ring_world_building_size_calc = {
	set = trigger:planet_size
	multiply = 0.5
	add = 15
}

giga_birch_world_building_size = {
	base = 1 # structure ops
	add = giga_birch_district_insula_built # built insula count
	multiply = 25 # big
}

giga_count_deposit = {
	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				is_deposit_type = $deposit$
			}
		}
		mode = weight
	}
	[[mult]
		multiply = $mult$
	]
}


giga_solakian_willingness_inverse = {
	weight = -1
	multiply = solakian_willingness
}

giga_count_jobs = {
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = $JOB$
		}
		mode = weight
	}
}


giga_psychic_hypersiphon_network_size = {
	base = 0
	add = modifier:giga_hypersiphon_network_size
	add = modifier:giga_hypersiphon_safe_network_size
}
giga_psychic_hypersiphon_psionic_pops = {
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				has_psionic_species_trait = yes
			}
		}
		mode = weight
	}
}
giga_psychic_hypersiphon_psionic_sublimate = {
	weight = value:giga_psychic_hypersiphon_psionic_pops

	modifier = {
		exists = owner
		multiply = owner.value:giga_psychic_hypersiphon_network_size
	}
}
# excludes the safe network size
giga_psychic_hypersiphon_instability = {
	weight = value:giga_psychic_hypersiphon_psionic_pops

	modifier = {
		exists = owner
		multiply = owner.modifier:giga_hypersiphon_network_size
	}
}
giga_psychic_hypersiphon_summon_count = {
	base = 0

	add = value:giga_psychic_hypersiphon_psionic_pops
	divide = 10
	floor = yes

	add = value:giga_count_jobs|JOB|giga_shroud_conduit_worker|
	add = value:giga_count_jobs|JOB|giga_shroud_conduit_priest|
	add = value:giga_count_jobs|JOB|giga_shroud_conduit_drone|
}

giga_calculate_buff_scale = {
	weight = $target$
	divide = $power$
	subtract = 1
}

giga_asteroid_industry_building_job_mult = {
	base = 1
	modifier = {
		exists = owner
		multiply = owner.modifier:$modifier$
	}
	min = 1
}

# 0 at game start, 1 at midgame
giga_midgame_fraction = {
	base = 0
	weight = trigger:years_passed
	divide = value:giga_midgame_period

	max = 1
}
giga_midgame_period = {
	base = 0
	weight = trigger:years_passed
	subtract = trigger:mid_game_years_passed
}

# virtual colony size
giga_virtuality_concentrated_production_mult = {
	weight = owner.value:giga_var|var|giga_virtual_colony_size|mult|0.25|
}
giga_virtuality_num_colonies = {
	weight = owner.value:giga_var|var|giga_virtual_colony_size|mult|0.1|
}

# count up habitation modules for the orbital arcology ring building, maximum of 4
giga_orbital_arcology_ring_habitation = {
	complex_trigger_modifier = {
		trigger = count_starbase_modules
		parameters = {
			type = orbital_ring_habitation
			include_being_constructed = no
		}
		mode = weight
	}

	max = 4
}
# count up rural booster modules (farming/mining/generator) for the arcology ring building, maximum of 4
giga_orbital_arcology_ring_rural = {
	complex_trigger_modifier = {
		trigger = count_starbase_modules
		parameters = {
			type = orbital_ring_giga_farming_district
			include_being_constructed = no
		}
		mode = weight
	}
	complex_trigger_modifier = {
		trigger = count_starbase_modules
		parameters = {
			type = orbital_ring_giga_mining_district
			include_being_constructed = no
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_starbase_modules
		parameters = {
			type = orbital_ring_giga_generator_district
			include_being_constructed = no
		}
		mode = add
	}

	max = 4
}

# how many jobs do this planet's districts provide?
giga_jobs_per_district = {
	base = 2

	modifier = {
		uses_district_set = machine_world
		exists = owner
		owner = { has_ascension_perk = ap_machine_worlds }

		weight = 4
	}

	modifier = {
		uses_district_set = giga_planetary_computer

		weight = 5
	}

	modifier = {
		or = {
			uses_district_set = city_world
		}

		weight = 6
	}

	modifier = {
		uses_district_set = ring_world

		weight = 10
	}

	modifier = {
		or = {
			uses_district_set = giga_alderson_gaia
			uses_district_set = giga_alderson_hive
			uses_district_set = giga_alderson_machine
		}

		weight = 12
	}

	modifier = {
		uses_district_set = giga_alderson_ecu

		weight = 18
	}
}
