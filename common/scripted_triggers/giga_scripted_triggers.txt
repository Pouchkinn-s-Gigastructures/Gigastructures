#Scripted trigger to check for gigas prior to game start
has_gigastructures = {
	always = yes
}

has_gigastructural_constructs = {
	or = {
		and = {
			is_ai = yes
			has_country_flag = giga_gigastructural_constructs_override
		}

		has_ascension_perk = ap_gigastructural_constructs
	}
}

has_any_megastructure_dlc = {
	OR = {
		has_utopia = yes			# big megas dlc
		has_megacorp = yes			# gives galactic wonders
		has_overlord_dlc = yes		# quantum catapult, relay, orbital ring
		has_federations_dlc = yes	# mega shipyard
		has_machine_age_dlc = yes	# vanilla kilostructures
	}
}

has_any_galactic_wonders_dlc = {
	OR = {
		has_utopia = yes	# original megas dlc
		has_megacorp = yes	# also gives galactic wonders
	}
}

giga_has_orbital_arcology_tech = {
	# custom_tooltip = {
	# 	text = giga_has_orbital_arcology_tech
	# 	or = {
	# 		has_technology = giga_tech_orbital_arcologies
	# 		has_technology = giga_tech_orbital_arcologies_overlord
	# 	}
	# }
	has_technology = giga_tech_orbital_arcologies
}

ndb_can_target_system = {
	cohesive_system = no
	compound_cluster = no
	annihilator_system = no
	urmazin_system = no
	everchanging_system = no

	NOR = {
		any_fleet_in_system = {
			OR = {
				owner = { is_country_type = synth_queen }
				owner = { is_country_type = synth_queen_convoys }
				owner = { is_country_type = synth_queen_outposts }
				owner = { is_country_type = synth_queen_storm }
			}
		}
		has_star_flag = blokkat_system_being_stripmined

		has_star_flag = blokkat_stripmined_system
		and = {
			exists = system_star
			system_star = { giga_is_compact_star = yes }
		}
		any_fleet_in_system = {
			exists = owner
			owner = {

				is_country_type = blokkat_stripminers
			}
		}

		any_ship_in_system = {
			OR = {
				is_ship_size = sofe_ancient_weapon
				is_ship_size = precursor_colossus

			}

		}

		any_system_planet = {
			OR = {
				has_planet_flag = cant_build_here
				has_planet_flag = cant_target_this_planet
				is_planet_class = pc_ai
				is_planet_class = pc_birch
				is_planet_class = pc_squareworld_habitable
				is_planet_class = pc_alderson_slice_ecu
				is_planet_class = pc_alderson_slice_machine
				is_planet_class = pc_alderson_slice_gaia
				is_planet_class = pc_alderson_slice_pc
				is_planet_class = pc_alderson_slice_hive
			}
		}
	}
}

ndb_can_target_planet = {
	NOR = {
		AND = {
			is_capital = yes
			exists = owner
			owner = {
				is_same_value = root
			}
		}
		is_star = yes
		is_astral_scar = yes
		is_planet_class = pc_birch
		is_planet_class = pc_alderson_slice_ecu
		is_planet_class = pc_alderson_slice_hive
		is_planet_class = pc_alderson_slice_machine
		is_planet_class = pc_alderson_slice_gaia
		is_planet_class = pc_alderson_slice_pc
		is_planet_class = pc_ai
		is_planet_class = pc_squareworld_habitable
		has_planet_flag = cant_build_here
		# is_planet_class = pc_virtual_industry
		# is_planet_class = pc_virtual_reality
		# is_planet_class = pc_virtual_stellar_industry
	}
}

has_mineral_deposit = {
	OR = {
		has_deposit = d_minerals_1
		has_deposit = d_minerals_2
		has_deposit = d_minerals_3
		has_deposit = d_minerals_4
		has_deposit = d_minerals_5
		has_deposit = d_minerals_6
		has_deposit = d_minerals_7
		has_deposit = d_minerals_8
		has_deposit = d_minerals_9
		has_deposit = d_minerals_10
	}
}

has_energy_deposit = {
	OR = {
		has_deposit = d_energy_1
		has_deposit = d_energy_2
		has_deposit = d_energy_3
		has_deposit = d_energy_4
		has_deposit = d_energy_5
		has_deposit = d_energy_6
		has_deposit = d_energy_7
		has_deposit = d_energy_8
		has_deposit = d_energy_9
		has_deposit = d_energy_10
	}
}

has_trade_deposit = {
	OR = {
		has_deposit = d_trade_value_1
		has_deposit = d_trade_value_2
		has_deposit = d_trade_value_3
		has_deposit = d_trade_value_4
		has_deposit = d_trade_value_5
		has_deposit = d_trade_value_6
		has_deposit = d_trade_value_7
		has_deposit = d_trade_value_8
		has_deposit = d_trade_value_9
		has_deposit = d_trade_value_10
	}
}

giga_is_bitrinary = {
	OR = {
		is_star_class = sc_binary_1
		is_star_class = sc_binary_2
		is_star_class = sc_binary_3
		is_star_class = sc_binary_4
		is_star_class = sc_binary_5
		is_star_class = sc_binary_6
		is_star_class = sc_binary_7
		is_star_class = sc_binary_8
		is_star_class = sc_binary_9
		is_star_class = sc_binary_10
		is_star_class = sc_trinary_1
		is_star_class = sc_trinary_2
		is_star_class = sc_trinary_3
		is_star_class = sc_trinary_4
		# Real Space
		is_binary = yes
		is_trinary = yes
		is_paired = yes
	}
}

giga_is_close_pair_system = { # Makes sure the system only has stars in its center
	NOT = {
		any_system_planet = { 
			is_star = yes 
			giga_is_close_pair_star = no 
		}
	}
}

giga_is_close_pair_star = { # Makes sure the star isn't a close pair star OR isn't the primary star 
	is_star = yes
	NAND = {
		has_moon = yes
		is_primary_star = no
		OR = {
				distance = {
				source = solar_system.star
				type = euclidean
				min_distance >= 75
				max_distance <= 10000
				same_solar_system = yes
			}
			solar_system = {
				giga_is_bitrinary = yes
				any_system_planet = {
					AND = {
						is_star = no
						star = {
							compare_distance = {
								closer_object = prev
								further_object = prevprevprev
							}
						}
					}
				}
			}
		}
	}
}

giga_is_close_pair_primary = { # Checks for if its the primary star in a system with any close pair
	is_primary_star = yes
	solar_system = {
		any_system_planet = {
			is_primary_star = no
			is_star = yes
			giga_is_close_pair_star = yes
		}
	}
}
giga_is_valid_o_star_location = {
	giga_is_bitrinary = no
	has_no_non_gate_megastructure = yes
	has_special_star_flag_trigger = no
	NOR = {
		has_star_flag = guardians_stellarite_system
		has_star_flag = time_loop_world_system
		has_star_flag = giga_forbid_o_class
		is_star_class = sc_black_hole
		is_star_class = sc_neutron_star
		is_star_class = sc_pulsar
		is_star_class = sc_birch
		is_star_class = sc_quasar
		is_star_class = sc_white_hole
		is_star_class = sc_dyson_star
		is_star_class = sc_giga_o_star
		is_star_class = sc_dn
		any_system_planet = { has_planet_flag = paluushia }
		any_system_planet = { has_planet_flag = gigaflusion }
		any_system_planet = { is_colony = yes }
		any_system_planet = { is_artificial = yes }
		any_system_planet = { is_colonizable = yes }
		any_system_planet = { has_planet_flag = has_megastructure }
		any_system_planet = { has_planet_flag = megastructure }
		any_system_planet = { is_planet_class = pc_ice_asteroid }
		any_system_planet = { is_astral_scar = yes } # In theory this should never happen but just as a precaution
		any_ship_in_system = { exists = THIS }
	}
}

giga_any_hab_planets = {
	any_system_planet = {
		OR = {
			is_planet_habitable = yes
			giga_habitable_structure = yes
		}
	}
}

giga_system_is_surveyed = {
	NOT = {
		any_system_planet = {
			is_surveyed = {
				who = root.from
				status = no
			}
		}
	}
}

giga_can_be_war_moon = {
	NOT = {
		has_planet_flag = dormant_war_moon
	}
	is_colony = no
	OR = {
		giga_is_frozen = yes
		giga_is_barren_cn = yes
		giga_is_molten = yes
	}
	is_moon = yes
}

giga_can_be_war_planet = {
	NOT = {
		has_planet_flag = dormant_war_planet
	}
	is_moon = no
	has_anomaly = no
	is_colony = no
	prev = {
		NOT = {
			has_ethic = ethic_fanatic_spiritualist
		}
	}
	OR = {
		giga_is_frozen = yes
		giga_is_barren_cn = yes
		giga_is_molten = yes
		giga_is_toxic = yes
	}
}


giga_is_playable_country = {
	any_playable_country = {
		is_same_empire = prev
	}
}

#User preset trigger, here to prevent errors
has_giga_preset_mod = {
	always = yes
}

giga_is_megastructure_that_needs_planet = {
	OR = {
		is_megastructure_type = automated_stripmine_0
		is_megastructure_type = automated_stripmine_1
		# is_megastructure_type = automated_stripmine_2
		is_megastructure_type = succ_0
		is_megastructure_type = succ_1
		# is_megastructure_type = succ_2
		is_megastructure_type = crystal_megabore_0
		is_megastructure_type = crystal_megabore_1
		is_megastructure_type = crystal_megabore_2
		is_megastructure_type = crystal_megabore_3
		is_megastructure_type = moon_printer_orbital_mass_harvester_0
		is_megastructure_type = moon_printer_orbital_mass_harvester_1
		is_megastructure_type = eq_shipyard_0
		is_megastructure_type = eq_shipyard_1
		is_megastructure_type = eq_shipyard_2
		is_megastructure_type = lunar_disco_ball_0
		is_megastructure_type = lunar_disco_ball_1
		is_megastructure_type = lunar_disco_ball_2
		is_megastructure_type = lunar_disco_ball_2_manage
	}
}

giga_can_deploy_defense_squadron = {
	NOR = {
		has_planet_flag = defense_nexus_deploy_never
		has_planet_flag = giga_defence_squadron_cooldown
		has_planet_flag = defence_squadron_deployed
		is_occupied_flag = yes
		has_ground_combat = yes
	}
}

giga_is_core_system = {
	OR = {
		has_star_flag = giga_inner
		has_star_flag = giga_outer_01
		has_star_flag = giga_outer_02
		has_star_flag = giga_outer_03
		has_star_flag = giga_galactic_center
	}
}

giga_country_uses_priests = {
	or = {
		is_spiritualist = yes
		and = {
			is_gestalt = no
			has_make_spiritualist_perk = yes
		}
	}
}


# giga_planet_is_ecumenopolis = { Replaced with giga_is_arcology
# 	or = {
# 		uses_district_set = city_world

# 		# planetary diversity
# 		uses_district_set = pdnecrohive
# 		uses_district_set = pdmachinenecropolis
# 		uses_district_set = pdpalacearc
# 		uses_district_set = pdmilarc
# 		uses_district_set = pdecocity
# 		uses_district_set = pdcorpoarc
# 	}
# }

# For scaling purposes. Sorted from weakest to strongest
giga_is_m_star_for_megas = {
	optimize_memory
	or = {
		is_planet_class = pc_m_star
		# Real Space
		is_planet_class = pc_d_star
		is_planet_class = pc_tt_red_star
	}
}

giga_is_k_star_for_megas = {
	optimize_memory
	or = {
		is_planet_class = pc_k_star
	}
}

giga_is_g_star_for_megas = {
	optimize_memory
	or = {
		is_planet_class = pc_g_star
		# Real Space
		is_planet_class = pc_tt_orange_star

	}
}

giga_is_f_star_for_megas = {
	optimize_memory
	or = {
		is_planet_class = pc_f_star
		# Real Space
		is_planet_class = pc_tt_white_star
		is_planet_class = pc_fu_star
	}
}

giga_is_a_star_for_megas = {
	optimize_memory
	or = {
		is_planet_class = pc_a_star
		# Real Space
		is_planet_class = pc_ae_star
	}
}

giga_is_m_giant_star_for_megas = {
	optimize_memory
	or = {
		is_planet_class = pc_m_giant_star
		# Real Space
		is_planet_class = pc_k_giant_star
		is_planet_class = pc_g_giant_star
		is_planet_class = pc_c_giant_star
		is_planet_class = pc_s_giant_star
		is_planet_class = pc_lbv_blue_star
		is_planet_class = pc_lbv_green_star
		is_planet_class = pc_lbv_red_star
	}
}

giga_is_b_star_for_megas = {
	optimize_memory
	or = {
		is_planet_class = pc_b_star
		# Real Space
		is_planet_class = pc_m_super_star
		is_planet_class = pc_k_super_star
		is_planet_class = pc_g_super_star
		is_planet_class = pc_f_super_star
		is_planet_class = pc_a_super_star
		is_planet_class = pc_b_super_star
		is_planet_class = pc_w_azure_star  
		is_planet_class = pc_w_red_star
		is_planet_class = pc_w_green_star
		is_planet_class = pc_w_purple_star
		is_planet_class = pc_m_hyper_star # too many new types of "O class" scaling
	}
}

giga_is_o_star_for_megas = {
	optimize_memory
	or = {
		# Giga
		is_planet_class = pc_giga_o_star
		# Real Space
		is_planet_class = pc_o_star
		is_planet_class = pc_o_super_star
		is_planet_class = pc_o_hyper_star
	}
}

# whether the planet type allows gigas' bigger buildings specifically for big megas
# merger of rules: feel free to overwrite this to add other relevant large habitable megas
# but they will also require entries in the giga_ring_world_building_size script_value
giga_has_ringworld_buildings = {
	giga_is_frame_world = no
	or = {
		is_ringworld = yes
		giga_is_birch_world = yes
	}
}

# planet types which should have ring bonuses
giga_has_ringworld_output_boost = {
	optimize_memory
	OR = {
		# our ring worlds should already be covered by the vanilla trigger

		giga_is_birch_world = yes
		giga_is_alderson_disk = yes
	}
}

# planet types which should NOT have ring bonuses but would
giga_has_ringworld_output_boost_exclusions = {
	optimize_memory
	OR = {
		and = {
			giga_is_frame_world = yes
			not = { has_planet_flag = frameworld_orbital_ring }
		}
	}
}

# for nanite swarm event
giga_has_artificial_preference_trait = {
	optimize_memory
	OR = {
		# vanilla
		has_trait = trait_pc_habitat_preference
		has_trait = trait_pc_shattered_ring_habitable_preference
		has_trait = trait_pc_ringworld_habitable_preference # you can break the vanilla event with this...
		# gigas
		has_trait = trait_pc_giga_frameworld_preference
		has_trait = trait_pc_flusion_gaia_ecu_preference
		has_trait = trait_pc_squareworld_habitable_preference
		has_trait = trait_pc_gigaorbital_ring_preference
		has_trait = trait_pc_giga_orbital_preference
		has_trait = trait_pc_giga_elysium_preference
		has_trait = trait_pc_giga_penrose_habitable_preference
		has_trait = trait_pc_interstellar_habitat_preference
		has_trait = trait_pc_interstellar_ringworld_habitable_preference
		has_trait = trait_pc_flat_world_preference
		has_trait = trait_pc_ringworld_city_preference
		has_trait = trait_pc_ringworld_machine_preference
		has_trait = trait_pc_ringworld_hive_preference
		has_trait = trait_pc_birch_preference
		has_trait = trait_pc_origin_birch_preference
		has_trait = trait_pc_equatorial_shipyard_preference
		has_trait = trait_pc_giga_planetary_computer_preference
		has_trait = trait_pc_habitable_gas_giant_preference
		has_trait = trait_pc_alderson_slice_pc_preference
		has_trait = trait_pc_alderson_slice_ecu_preference
		has_trait = trait_pc_alderson_slice_hive_preference
		has_trait = trait_pc_alderson_slice_machine_preference
		has_trait = trait_pc_alderson_slice_gaia_preference
		has_trait = trait_pc_ehof_habitat_preference
		has_trait = trait_pc_void_birch_preference
		has_trait = trait_pc_alderson_slice_gaia_shattered_preference
		has_trait = trait_pc_giga_maginot_world_preference
		has_trait = trait_pc_giga_maginot_gas_giant_preference
		has_trait = trait_pc_giga_maginot_ringworld_preference
	}
}

#things players can become that don't change gamplay much
giga_is_standard_country_type = {
	OR = {
		is_country_type = default
		is_country_type = ascended_empire
		is_country_type = lost_empire
	}
}

#Things that players or standard ai can't be, or that significantly change gameplay like becoming blokkats
giga_is_special_country_type = {
	OR = {
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire
		is_country_type = primitive
	}
}

#Helps cut down on lag from gigabank maths by not giving it to only to people who can actually use it
giga_country_gets_bank = {
	optimize_memory
	giga_country_gets_bank_exclude = no
	OR = {
		is_country_type = default
		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire
		giga_country_gets_bank_include = yes

		giga_is_playable_country = yes
	}
}

giga_country_gets_bank_exclude = {
	optimize_memory
	OR = {
		#Don't give it to these nerds EVER and terminate before even getting to playable
		#Exclusive list of vanilla country types to NEVER give it to
		#No leviathans
		is_guardian_country = yes
		is_tiyanki_country_type = yes
		is_amoeba_country_type = yes
		is_crystal_country_type = yes
		is_drone_country_type = yes
		is_country_type = guardian_warden
		is_country_type = ldragon_country
		is_country_type = cloud
		#No Crisis factions
		is_country_type = gray_goo
		is_country_type = swarm
		is_country_type = extradimensional
		is_country_type = extradimensional_2
		is_country_type = extradimensional_3
		is_country_type = ai_empire
		is_country_type = dormant_marauders
		is_country_type = ruined_marauders
		is_country_type = awakened_marauders
		#no caravaneers
		is_country_type = caravaneer_home
		is_country_type = caravaneer_fleet
		is_country_type = global_event #No Never.
		is_country_type = faction
		is_country_type = origin_dragon
		is_country_type = dragon_dummy
		is_country_type = clutch_of_whelps
		is_country_type = adversary
		is_country_type = neutral_faction
		is_country_type = nomad
		is_country_type = pirate
		is_country_type = primitive
		is_country_type = rebel
		is_country_type = ambient
		is_country_type = enclave
		is_country_type = enclave_mercenary
		is_country_type = shroud
		is_country_type = shroud_spirits
		is_country_type = gdf
		is_country_type = cybrex_empire
		is_country_type = sentinels
		is_country_type = gate_builders
		is_country_type = gray
		is_country_type = portal_holder
		is_country_type = feral_prethoryn
		is_country_type = feral_prethoryn_infighting
		is_country_type = marauder_raiders
		is_country_type = vol
		is_country_type = ratlings
		is_country_type = enigmatic_cache
		is_country_type = mechanocalibrator
		is_country_type = vluur
		is_country_type = slavers_dummy
		is_country_type = jaunting_traveler_dummy
		is_country_type = debt_collectors
	}
}
#To be on this list, a country type should have both construction AI and an economic module, if it doesn't meet both of those don't put it here
giga_country_gets_bank_include = {
	OR = {
		is_country_type = ascended_empire
		is_country_type = lost_empire
	}
}

#Stops them from doing any of the really bad observation events
giga_is_special_primitive = {
	OR = {
		has_country_flag = ezic_tropiana_country
		has_country_flag = corrona_primitives
		has_country_flag = giga_eaw_country
		has_country_flag = flusion_primitives
		has_country_flag = paluush_primitives
		has_country_flag = excognitor_primitives
		has_country_flag = dominion_primitives
		has_country_flag = giga_eawaf_country
	}
}


# used in can_get_external_leader_pool_candidate rule overwrite
# This = country, Country that wants to get an external leader
# From = country, country that we are trying to get from
giga_can_get_external_leader_pool_candidate = {
	if = {
		limit = {
			giga_can_get_external_leader_pool_candidate_katzen = yes
		}
		giga_can_get_external_leader_pool_candidate_katzen = yes
	}
	else = {
		custom_tooltip = {
			text = frameworld_blank
			always = no
		}
	}
}
giga_can_get_external_leader_pool_candidate_katzen = {
	custom_tooltip = {
		text = giga_katzen_external_leader_trigger
		and = {
			exists = event_target:flusion_primitives_country
			has_country_flag = allied_to_kaiser
			from = {
				is_same_empire = event_target:flusion_primitives_country
			}
		}
	}
}

# used in the overwrite of ai_should_restrict_system in rules
# this = system
# root = country
giga_ai_should_restrict_system = {
	or = {
		# AI should avoid pre-ftl flusion to make sure the guaranteed kaiser doesn't get curbstomped as a pre-ftl
		AND = {
			NOT = { has_global_flag = katzenartig_imperium_happened }
			OR = {
				has_global_flag = katzenartig_always
				has_global_flag = katzenartig_deathwish
				has_global_flag = katzenartig_stellarite
				has_global_flag = katzenartig_improbable
			}
			has_star_flag = flusion_system
			event_target:gigaflusion = {
				exists = owner
				owner = { is_country_type = primitive }
			}
		}

		# kaiser should avoid fallen and awakened empires unless he's at war with them
		# this should finally stop him not caring about borders
		and = {
			root = {
				is_country_type = katzenartig_imperium
			}
			exists = owner
			owner = {
				or = {
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
				not = { is_at_war_with = root }
			}
		}
	}
}

# used in can_generate_leader_from_pop rule overwrite
# should only prevent civilian leaders since the military ones are governred by a different trigger
#Root = country
#This = pop
giga_kaiser_prevent_civilian_candidates = {
	if = {
		limit = {
			exists = owner
			owner = {
				is_country_type = katzenartig_imperium
			}
		}
		root = {
			is_country_type = katzenartig_imperium
		}
	}
}

# used in can_generate_military_leader_from_pop rule overwrite
# should make sure external candidates drawn from the imperium are only katzen
#Root = country
#This = pop
giga_kaiser_only_katzen_military_candidates = {
	if = {
		limit = {
			exists = owner
			owner = {
				is_country_type = katzenartig_imperium
			}
			exists = event_target:flusion_katzens
		}
		or = {
			root = {
				is_country_type = katzenartig_imperium
			}
			is_same_species = event_target:flusion_katzens
		}
	}
}


# is this empire a terravore who eats worlds?
giga_can_devour_worlds = {
	# bug branch
	if = {
		limit = {
			has_bug_branch = yes
		}
		or = {
			is_bugged_terravore = yes
		}
	}
	# vanilla case
	else = {
		has_valid_civic = civic_hive_devouring_swarm
		is_lithoid_empire = yes
	}
}

giga_can_nanite_devour_worlds = {
	has_tradition = tr_nanotech_3
}

# should this empire care about ranger related stuff
giga_is_environmentalist = {
	has_valid_civic = civic_environmentalist
}


# does this empire have a civic which swaps politicians out on capitals?
giga_has_politician_swap = {
	or = {
		has_civic = civic_exalted_priesthood
		has_civic = civic_aristocratic_elite
		has_civic = civic_technocracy
		has_civic = civic_merchant_guilds

		# bug branch swaps
		is_bugged_governmental = yes
	}
}

giga_has_trade_deposit = {
	OR = {
		has_deposit = d_trade_value_1 #Not very clean, but trade value deposits are weird and will block minor artifact deposits.
		has_deposit = d_trade_value_2
		has_deposit = d_trade_value_3
		has_deposit = d_trade_value_4
		has_deposit = d_trade_value_5
		has_deposit = d_trade_value_6
		has_deposit = d_trade_value_7
		has_deposit = d_trade_value_8
		has_deposit = d_trade_value_9
		has_deposit = d_trade_value_10
	}
}

# gigas additions to a vanilla trigger
giga_has_non_psionic_shields = {
	OR = {
		has_component = SMALL_SHIELD_ARMOR_AETERNUM
		has_component = MEDIUM_SHIELD_ARMOR_AETERNUM
		has_component = LARGE_SHIELD_ARMOR_AETERNUM
		#has_component = SHIELD_ARMOR_LOW_AETERNUM # not actually a shield
		has_component = SMALL_SHIELD_BLOKKAT
		has_component = MEDIUM_SHIELD_BLOKKAT
		has_component = LARGE_SHIELD_BLOKKAT
		has_component = KATZEN_STELLARITE_ARMOR
		has_component = SA_ARMOR
		has_component = QNM_SHIELD_SMALL
		has_component = QNM_SHIELD_MEDIUM
		has_component = QNM_SHIELD_LARGE
		has_component = COMPOUND_SHIELD_SMALL
		has_component = COMPOUND_SHIELD_MEDIUM
		has_component = COMPOUND_SHIELD_LARGE
		has_component = SYSTEMCRAFT_SHIELD
	}
}

giga_is_science_candidate = {
	NOT = { 
		has_deposit_for = shipclass_mining_station 
	}
	is_star = no
	is_astral_scar = no
	colonizable_planet = no
}

giga_is_mining_candidate = {
	NOT = { 
		has_deposit_for = shipclass_research_station 
	}
	is_star = no
	is_astral_scar = no
	colonizable_planet = no
}

#Root = country
#This = pop
giga_can_colonize_with_pop = {
	root = { giga_has_frameworld_origin = no }
}

# This = Planet
giga_can_resettle_planet = {
	if = {
		limit = {
			exists = owner
			owner = {
				giga_has_frameworld_origin = yes
			}
			nor = {
				giga_is_excluded_from_frameworld_resettlement = yes
				has_planet_flag = giga_frameworld@owner
				has_planet_flag = giga_excluded_frameworld_resettlement
			}
		}
		always = no
	}
}

# for just_researched_fe_tech overwrite
giga_just_researched_fe_tech = {
	or = {
		last_increased_tech = giga_tech_fe_megaworkshop_1
		last_increased_tech = giga_tech_fe_megaworkshop_2
	}
}

giga_exclude_planet_from_virtual_growth = {
	or = {
		is_planet_class = pc_cosmogenesis_world
		has_modifier = frameworld_conquered
	}
}

giga_can_build_any_star_scale_mega = {
	OR = {
		AND = {
			NOT = { has_global_flag = matrioshka_brain_disabled }
			has_global_flag = giga_matroishka_scaling
			has_technology = giga_tech_matrioshka_brain_1
			OR = { # Check against cap
				has_global_flag = matrioshka_brain_capped_u
				check_variable = { which = giga_current_matrioshka_brain value < giga_matrioshka_brain_cap }
			}
		}
		AND = {
			NOT = { has_global_flag = lifters_disabled }
			has_global_flag = giga_lifter_scaling
			has_technology = giga_tech_star_lifter
			OR = {
				has_global_flag = lifters_capped_u
				check_variable = { which = giga_current_lifters value < giga_lifters_cap }
			}
		}
		AND = {
			OR = {
				AND = { 
					has_machine_age_dlc = yes
					OR = {
						NOT = { has_global_flag = vanilla_dyson_disabled }
						NAND = {
							has_global_flag = vanilla_dyson_swarm_disabled
							NOT = { has_global_flag = vanilla_dyson_swarm_replace_disabled }
						}
					}
				}
				AND = {
					has_machine_age_dlc = no
					NOT = { has_global_flag = vanilla_dyson_disabled }
				}
			}
			has_global_flag = giga_dyson_scaling
			has_technology = tech_dyson_sphere
			OR = {		
				AND = {
					has_machine_age_dlc = no
					OR = {
						has_global_flag = vanilla_dyson_capped_u						# No Cap
						check_variable = { which = giga_current_vanilla_dyson value < giga_vanilla_dyson_cap }
					}
				}
				AND = {
					has_machine_age_dlc = yes
					OR = {
						AND = {
							NOT = { has_global_flag = vanilla_dyson_swarm_replace_disabled }
							check_variable = {
								which = dyson_swarm_counter
								value < value:dyson_swarm_limit
							}
							has_global_flag = vanilla_dyson_swarm_capped_u
						}
						AND = {
							has_global_flag = vanilla_dyson_swarm_replace_disabled
							OR = {
								has_global_flag = vanilla_dyson_capped_u						# No Cap
								check_variable = { which = giga_current_vanilla_dyson value < giga_vanilla_dyson_cap }
							}
						}
					}
				}
			}
		}
	}		
}