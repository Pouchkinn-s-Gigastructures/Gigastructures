lunar_disco_ball_0 = {
	entity = "giga_consite_5_5_entity"
	construction_entity = "giga_consite_5_5_entity"
	# construction_blocks_and_blocked_by = none # BLOCKING TEST
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	prerequisites = { giga_tech_disco_moon }

	outliner_trigger = {
		exists = owner
		NOT = { has_megastructure_flag = giga_outliner_hidden_by_@owner }
	}
	
	build_time = 1800
	resources = {
		category = giga_megastructures
		cost = {
			alloys = 2500
			unity = @giga_small_mega_unity_cost
		}
		upkeep = {
			energy = 5
		}
	}

	potential = {
		has_technology = giga_tech_disco_moon
		NOT = { has_global_flag = disco_moon_disabled }
		OR = {
			check_variable = { which = giga_disco_moon_cap value = 0 }						# No Cap
			check_variable = { which = giga_current_disco_moon value < giga_disco_moon_cap }
		}
	}

	possible = {
		custom_tooltip = { fail_text = "requires_inside_border"		is_inside_border = from }
		custom_tooltip = {
			fail_text = "requires_not_capped"
			from = {
				OR = {
					check_variable = { which = giga_disco_moon_cap value = 0 }						# No Cap
					check_variable = { which = giga_current_disco_moon value < giga_disco_moon_cap }
				}
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = { fail_text = "must_build_around_moon"				is_moon = yes }
			custom_tooltip = { fail_text = "requires_no_anomaly"				has_anomaly = no }
			custom_tooltip = { fail_text = "requires_no_existing_megastructure"	planet_has_no_megastructure = yes NOT = { is_planet_class = pc_disco_moon } }
			custom_tooltip = { fail_text = "requires_survey_not_habitable"		is_surveyed = { who = prev.from status = yes } is_planet_habitable = no }
			custom_tooltip = { fail_text = "requires_no_crisis_planet"			NOT = { has_planet_flag = crisis_vital_planet } }
			custom_tooltip = { fail_text = "requires_not_asteroid"				is_asteroid = no }
			custom_tooltip = { fail_text = "requires_not_star"					is_star = no }
			custom_tooltip = {
				fail_text = "requires_not_astral_scar"
				is_astral_scar = no
			}

			# Holy SHIT guys, this makes sure the AI always has exactly ONE candidate in each system to build this thing
			# and that is the one considered to be the best... more or less
			# - TTFTCUTS was here, committing sins
			custom_tooltip = {
				fail_text = "must_build_around_habitable_planet"
				OR = {
					prev.from = { is_ai = no }
					and = {
						is_colony = no # stop building on colonies thanks
						is_colonizable = no # and just... don't build on habitables either

						# make sure this is a moon of a colony
						exists = orbit
						orbit = {
							or = {
								and = {
									is_colony = yes
									exists = owner
									owner = {
										is_same_empire = prevprevprev.from
									}
								}
								any_moon = {
									is_colony = yes
									exists = owner
									owner = {
										is_same_empire = prevprevprevprev.from
									}
								}
							}
						}
						# try and make sure it's a valid moon spot
						solar_system = {
							# make sure there's no better choice
							not = {
								any_system_planet = {
									# make sure it's a moon of a colony before evaluating more
									not = { is_same_value = prevprev }
									
									is_astral_scar = no
									is_star = no
									is_asteroid = no
									is_moon = yes
									is_colony = no
									is_colonizable = no
									custom_tooltip = {
										text = "not habitable"
										not = { is_planet_habitable = yes }
									}
									has_anomaly = no
									custom_tooltip = {
										text = "no mega"
										planet_has_no_megastructure = yes 
									}
									NOT = { is_planet_class = pc_disco_moon }
									is_surveyed = { who = prev.from status = yes } 
									
									exists = orbit
									orbit = {
										or = {
											# check the planet
											and = {
												is_colony = yes
												exists = owner
												owner = {
													is_same_empire = prevprevprevprev.prev.from
												}
											}
											# or any of its moons
											any_moon = {
												is_colony = yes
												exists = owner
												owner = {
													is_same_empire = prevprevprevprev.prevprev.from
												}
											}
										}
									}
									# check if it's a better candidate
									check_variable_arithmetic = {
										which = event_target:global_event_country.giga_zero
										add = value:giga_ai_disco_moon_evaluation
										value > prevprev.value:giga_ai_disco_moon_evaluation
									}
								}
							}
						}
					}
				}
			}
		}
	}

	ai_weight = {
		# weight = 300	# Default = 100

		# # Can we afford the upkeep

		# # Do we want the production

		# # Is this system a good location?
		# modifier = { factor = 0.5	any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } }

		# modifier = {
		# 	factor = 4
		# 	fromfrom.planet = {
		# 		solar_system = {
		# 			any_system_planet = {
		# 				AND = {
		# 					any_moon = { is_same_value = prevprevprev }
		# 					is_colony = yes
		# 					count_owned_pop = { count >= 30 }
		# 					OR = {
		# 						free_amenities <= 5
		# 						has_building = building_autochthon_monument
		# 						has_building = building_heritage_site
		# 						has_building = building_hypercomms_forum
		# 						has_building = building_temple
		# 						has_building = building_holotemple
		# 						has_building = building_sacred_nexus
		# 						has_building = building_hive_node
		# 						has_building = building_hive_cluster
		# 						has_building = building_hive_confluence
		# 						has_building = building_simulation_1
		# 						has_building = building_simulation_2
		# 						has_building = building_simulation_3
		# 						has_building = building_corporate_monument
		# 						has_building = building_corporate_site
		# 						has_building = building_corporate_forum
		# 					}
		# 				}
		# 			}
		# 		}
		# 	}
		# }

		# modifier = {
		# 	factor = 0
		# 	fromfrom.planet = {
		# 		solar_system = {
		# 			any_system_planet = {
		# 				AND = {
		# 					any_moon = { is_same_value = prevprevprev }
		# 					OR = {
		# 						is_colony = no
		# 						count_owned_pop = { count < 30 }
		# 						free_amenities > 5
		# 					}
		# 				}
		# 			}
		# 		}
		# 	}
		# }

		# # Do we lean towards this from federation/ethic/civic?

		# # How many of this megastructure can the AI build?
		# modifier = { factor = 0.00	from = { has_country_flag = has_recently_built_lunar_disco_ball } }
		# modifier = {
		# 	factor = 0
		# 	from = {
		# 		OR = {
		# 			has_megastructure = lunar_disco_ball_0
		# 			has_megastructure = lunar_disco_ball_1
		# 			has_megastructure = lunar_disco_ball_2
		# 		}
		# 	}
		# }

		weight = value:giga_ai_base_mega

		mult = value:giga_ai_upkeep|RESOURCE|energy|AMOUNT|75|
		mult = value:giga_ai_upkeep|RESOURCE|alloys|AMOUNT|25|
		mult = value:giga_ai_build_low_priority
		mult = value:giga_ai_prevent_spam|MEGA|lunar_disco_ball|
		mult = value:giga_ai_core_territory
		mult = value:giga_ai_unlock_low_priority

	}

	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = {
			save_event_target_as = giga_planet
			if = { limit = { exists = orbital_station } orbital_station = { dismantle = yes } }
			giga_set_has_mega_flag = yes
		}
		from = {
			set_timed_country_flag = { flag = has_recently_built_lunar_disco_ball years = 20 }
			country_event = { id = giga_dialog.201 }	# Notification
			change_variable = { which = giga_current_disco_moon value = 1 }
		}
	}
}

lunar_disco_ball_1 = {
	entity = ""
	portrait = "GFX_megastructure_construction_background"
	upgrade_from = { lunar_disco_ball_0 }

	outliner_trigger = {
		exists = owner
		NOT = { has_megastructure_flag = giga_outliner_hidden_by_@owner }
	}
	
	build_time = 2500
	resources = {
		category = giga_megastructures
		cost = {
			alloys = 2500
			energy = 5000
			unity = @giga_small_mega_unity_cost
		}
		upkeep = {
			energy = 10
			alloys = 10
		}
	}

	potential = { NOT = { has_global_flag = disco_moon_disabled } }
	possible = { from = { has_technology = giga_tech_disco_moon } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		if = { limit = { exists = fromfrom.planet } fromfrom.planet = { save_event_target_as = giga_planet } }
		from = { country_event = { id = giga_dialog.202 } }	# Notification
	}
}

lunar_disco_ball_2 = {
	entity = ""
	portrait = "GFX_megastructure_disco_moon"
	upgrade_from = { lunar_disco_ball_1 }

	outliner_trigger = {
		exists = owner
		NOT = { has_megastructure_flag = giga_outliner_hidden_by_@owner }
	}
	
	build_time = 2500
	resources = {
		category = giga_megastructures
		cost = {
			alloys = 2000
			rare_crystals = 1500
			energy = 10000
			unity = @giga_small_mega_unity_cost
		}
		upkeep = {
			trigger = {
				planet = { check_variable = { which = giga_disco_moon_setting value = 0 } }
			}
			rare_crystals = 5
			energy = 50
			alloys = 25
		}
		upkeep = {
			trigger = {
				planet = { check_variable = { which = giga_disco_moon_setting value = 1 } }
			}
			rare_crystals = 7.5
			energy = 75
			alloys = 38
		}
		upkeep = {
			trigger = {
				planet = { check_variable = { which = giga_disco_moon_setting value = 2 } }
			}
			rare_crystals = 7.5
			energy = 75
			alloys = 38
		}
		upkeep = {
			trigger = {
				planet = { check_variable = { which = giga_disco_moon_setting value = 3 } }
			}
			rare_crystals = 10
			energy = 100
			alloys = 50
		}
		upkeep = {
			trigger = {
				planet = { check_variable = { which = giga_disco_moon_setting value = 4 } }
			}
			rare_crystals = 0.5
			energy = 5
			alloys = 2
		}
	}

	potential = { NOT = { has_global_flag = disco_moon_disabled } }
	possible = { from = { has_technology = giga_tech_disco_moon } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		if = { limit = { exists = fromfrom.planet } fromfrom.planet = { save_event_target_as = giga_planet } }
		from = {
			if = {
				limit = { NOT = { has_global_flag = managing_giga_megastructure } }
				country_event = { id = giga_dialog.203 }	# Notification
			}
			if = {
				limit = {
					NOR = {
						has_global_flag = giga_achievements_disabled
						has_country_flag = giga_achievement_60
					}
				}
				set_country_flag = giga_achievement_60
				set_timed_country_flag = { flag = giga_achievement_60_notification days = 30 }
				giga_achievement_sound = yes
			}
		}
		fromfrom.planet = {
			if = {
				limit = { NOT = { has_global_flag = managing_giga_megastructure } }
				set_variable = {
					which = giga_failure_chance
					value = 5
				}
				set_variable = {
					which = giga_disco_moon_setting
					value = 0
				}
				if = {
					limit = { exists = orbit }
					orbit = {
						add_modifier = { modifier = "disco_moon_modifier" days = -1 }
						every_moon = {
							limit = { NOT = { is_same_value = prevprev } }
							add_modifier = { modifier = "disco_moon_modifier" days = -1 }
						}
					}
				}
				change_pc = pc_disco_moon
				giga_clear_has_mega_flag = yes
				set_planet_flag = megastructure
				set_planet_flag = giga_planet_mega
				set_planet_entity = { entity = "giga_disco_moon" graphical_culture = root.from }
			}
		}
	}
}

lunar_disco_ball_2_manage = {
	entity = ""
	portrait = "GFX_megastructure_disco_moon"
	upgrade_from = { lunar_disco_ball_2 }

	outliner_trigger = {
		exists = owner
		NOT = { has_megastructure_flag = giga_outliner_hidden_by_@owner }
	}
	
	build_time = 0

	
	# construction_blocks_and_blocked_by = none # BLOCKING TEST

	resources = { category = giga_megastructures }

	potential = {
		NOR = {
			has_global_flag = disco_moon_disabled
			has_global_flag = managing_giga_megastructure
		}
		is_ai = no
	}
	possible = { from = { has_technology = giga_tech_disco_moon } }

	on_build_complete = {
		from = { set_country_flag = giga_repaired_mega_no_dialog }
		set_global_flag = managing_giga_megastructure
		fromfrom.planet = {
			save_global_event_target_as = giga_mega_manage_planet
			solar_system = {
				spawn_megastructure = {
					type = lunar_disco_ball_2
					planet = event_target:giga_mega_manage_planet
					owner = space_owner
				}
			}
		}
		remove_global_flag = managing_giga_megastructure
		from = {
			country_event = { id = giga_disco.1000 }
			remove_country_flag = giga_repaired_mega_no_dialog
		}
		set_global_flag = managing_giga_megastructure
		remove_megastructure = fromfrom
	}
}