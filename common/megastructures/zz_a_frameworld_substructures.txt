# outpost construction

# due to triggered costs not working in the build menu, this is the easiest way to get the different costs
# luckily since we want to replace them to prevent infinite loops anyway, we can entirely avoid needing to have them
# listed in the upgrade section of the main outpost!

# regular empire
frameworld_outpost_construction = {
	inline_script = {
		script = megastructures/frameworld/outpost_construction

		cost = "alloys = @colony_cost_base
		food = @colony_cost_base
		consumer_goods = @colony_cost_base
		influence = 50"

		potential = "is_gestalt = no
		is_robot_empire = no
		is_lithoid_empire = no"
	}
}

# regular empire (lithoid)
frameworld_outpost_construction_lithoid = {
	inline_script = {
		script = megastructures/frameworld/outpost_construction

		cost = "alloys = @colony_cost_base
		minerals = @colony_cost_base
		consumer_goods = @colony_cost_base
		influence = 50"

		potential = "is_gestalt = no
		is_robot_empire = no
		is_lithoid_empire = yes"
	}
}

# regular empire (machines)
frameworld_outpost_construction_im = {
	inline_script = {
		script = megastructures/frameworld/outpost_construction

		cost = "alloys = @colony_cost_base
		energy = @colony_cost_base
		consumer_goods = @colony_cost_base
		influence = 50"

		potential = "is_gestalt = no
		is_robot_empire = yes"
	}
}

# hive
frameworld_outpost_construction_hive = {
	inline_script = {
		script = megastructures/frameworld/outpost_construction

		cost = "alloys = @colony_cost_base
		food = @colony_cost_high
		influence = 50"

		potential = "is_hive_empire = yes
		is_lithoid_empire = no"
	}
}

# hive (lithoid)
frameworld_outpost_construction_hive_lithoid = {
	inline_script = {
		script = megastructures/frameworld/outpost_construction

		cost = "alloys = @colony_cost_base
		minerals = @colony_cost_high
		influence = 50"

		potential = "is_hive_empire = yes
		is_lithoid_empire = yes"
	}
}

# machines
frameworld_outpost_construction_machine = {
	inline_script = {
		script = megastructures/frameworld/outpost_construction

		cost = "alloys = @colony_cost_base
		energy = @colony_cost_high
		influence = 50"

		potential = "is_machine_empire = yes"
	}
}

#frameworld_ship_test = {
#	entity = "giga_frameworld_outpost_entity"
#	construction_entity = "giga_frameworld_outpost_entity"
#	construction_blocks_and_blocked_by = none
#	portrait = "GFX_megastructure_construction_background"
#	show_galactic_map_icon = no
#	place_entity_on_planet_plane = no
#	show_in_outliner = no
#
#	build_time = 1
#
#	resources = {
#		category = frameworld_outposts
#		cost = {
#			alloys = 400 # machine colony ship cost
#			influence = 50 # actually less because they struggle # 50% more than a colony ship because no influence cost on frame expansion
#		}
#		upkeep = {
#			energy = 5
#		}
#	}
#
#	potential = {
#		giga_has_frameworld_origin = yes
#	}
#
#	possible = { exists = starbase		custom_tooltip = { fail_text = "requires_inside_border" is_inside_border = from } }
#
#	placement_rules = {
#		planet_possible = {
#			can_have_frameworld_outpost = yes
#		}
#	}
#
#	ai_weight = {
#		weight = 0
#	}
#
#	on_build_complete = {
#		giga_frameworld_create_outpost_test = {
#			owner = from
#			planet = fromfrom.planet
#		}
#		remove_megastructure = fromfrom
#	}
#}

########################################################################################################################
# outpost proper

#frameworld_outpost_0 = {
#	entity = "giga_frameworld_outpost_entity"
#	construction_entity = "giga_frameworld_outpost_entity"
#	construction_blocks_and_blocked_by = none
#	portrait = "GFX_megastructure_construction_background"
#	show_galactic_map_icon = no
#	place_entity_on_planet_plane = no
#	show_in_outliner = no
#
#	build_time = 720
#
#	upgrade_from = {
#		# frameworld_outpost_construction # don't do this lmao, it causes an infinite loop - this is specifically what you were trying to avoid dunkass
#		frameworld_outpost_marked_0
#		frameworld_outpost_wreck_1
#	}
#
#	resources = {
#		category = frameworld_outposts
#		cost = {
#			alloys = 400 # machine colony ship cost
#			influence = 50 # actually less because they struggle # 50% more than a colony ship because no influence cost on frame expansion
#		}
#		upkeep = {
#			energy = 5
#		}
#
#		# resource production logic, centralised
#		inline_script = megastructures/frameworld/outpost_production
#	}
#
#	country_modifier = {
#		giga_frameworld_outpost_count = 1
#	}
#
#	potential = {
#		#giga_has_frameworld_origin = yes
#		always = no
#	}
#
#	ai_weight = {
#    	weight = 0
#	}
#}

#frameworld_outpost_marked_0 = {
#	entity = "giga_frameworld_outpost_entity"
#	construction_entity = "giga_frameworld_outpost_entity"
#	portrait = "GFX_megastructure_construction_background"
#	show_galactic_map_icon = no
#	place_entity_on_planet_plane = no
#	construction_blocks_and_blocked_by = none
#	show_in_outliner = no
#
#	# this is incredibly silly but might just be silly enough to work...
#	bypass_type = giga_frameworld_outpost_icon
#
#	build_time = 720
#
#	upgrade_from = {
#		frameworld_outpost_0
#		frameworld_outpost_wreck_1
#	}
#
#	resources = {
#		category = frameworld_outposts
#		cost = {
#			alloys = 400 # machine colony ship cost
#			influence = 50 # actually less because they struggle # 50% more than a colony ship because no influence cost on frame expansion
#		}
#		upkeep = {
#			energy = 5
#		}
#
#		# resource production logic, centralised
#		inline_script = megastructures/frameworld/outpost_production
#	}
#
#	country_modifier = {
#		giga_frameworld_outpost_count = 1
#	}
#
#	potential = {
#		always = no # special version with marker, updated by event
#	}
#
#	ai_weight = {
#    	weight = 0
#	}
#}

########################################################################################################################
# outpost wrecks

#frameworld_outpost_wreck_0 = {
#	entity = "giga_frameworld_outpost_destroyed_entity"
#	portrait = "GFX_megastructure_construction_background"
#	show_galactic_map_icon = no
#	place_entity_on_planet_plane = no
#	construction_blocks_and_blocked_by = none
#
#	build_time = 0
#
#	upgrade_from = {
#		frameworld_outpost_0
#		frameworld_outpost_marked_0
#	}
#	upgrade_desc = hide
#
#	potential = {
#		always = no
#	}
#
#	ai_weight = {
#		weight = 0
#	}
#}

#frameworld_outpost_wreck_1 = {
#	entity = "giga_frameworld_outpost_entity"
#	construction_entity = "giga_frameworld_outpost_entity"
#	portrait = "GFX_megastructure_construction_background"
#	show_galactic_map_icon = no
#	place_entity_on_planet_plane = no
#	construction_blocks_and_blocked_by = none
#
#
#	build_time = 180
#	resources = {
#		category = frameworld_outposts
#		cost = {
#			alloys = 100
#		}
#		upkeep = {
#			energy = 5
#		}
#	}
#
#	potential = {
#		giga_has_frameworld_origin = yes
#	}
#
#	upgrade_from = {
#		frameworld_outpost_wreck_0
#	}
#	upgrade_desc = hide
#
#	ai_weight = {
#    	weight = 100000 # VERY important, we should always repair if possible
#	}
#
#	on_build_complete = {
#		if = { limit = { from = { giga_has_frameworld_origin = yes } }
#
#			fromfrom = {
#				planet = {
#					giga_frameworld_create_outpost_holder_colony = yes
#				}
#
#				upgrade_megastructure_to = frameworld_outpost_0
#				finish_upgrade = yes
#
#				solar_system = {
#					giga_frameworld_update_system_icon = yes
#				}
#			}
#
#			from = {
#				giga_frameworld_recalculate_outpost_bonus = yes
#			}
#
#		}
#		else = {
#			fromfrom = {
#				upgrade_megastructure_to = frameworld_outpost_wreck_0
#				finish_upgrade = yes
#			}
#		}
#	}
#}

########################################################################################################################
# outpost disassembly

#frameworld_outpost_deconstruction = {
#	entity = "giga_frameworld_outpost_entity"
#	construction_entity = "giga_frameworld_outpost_entity"
#	construction_blocks_and_blocked_by = none
#	portrait = "GFX_megastructure_construction_background"
#	show_galactic_map_icon = no
#	place_entity_on_planet_plane = no
#	show_in_outliner = no
#
#	build_time = 20
#
#	upgrade_from = {
#		frameworld_outpost_0
#		frameworld_outpost_marked_0
#	}
#
#	resources = {
#		category = frameworld_outposts
#	}
#
#	potential = {
#		always = no
#	}
#
#	ai_weight = {
#		weight = 0
#	}
#
#	on_build_complete = {
#		fromfrom = {
#			planet = {
#				remove_all_buildings = yes
#				every_owned_pop = {
#					kill_pop = yes
#				}
#				destroy_colony = yes
#			}
#
#			remove_megastructure = this
#
#			solar_system = {
#				giga_frameworld_update_system_icon = yes
#			}
#		}
#	}
#}

########################################################################################################################
# asteroid harvest

frameworld_harvest_0 = {
	entity = ""
	construction_entity = ""
	portrait = "GFX_megastructure_construction_background"
	show_galactic_map_icon = no
	place_entity_on_planet_plane = yes
	construction_blocks_and_blocked_by = none
	show_in_outliner = no
	
	build_time = 360
	resources = {
		category = deposit_blockers_frameworld
		cost = {
			energy = 1000
			influence = 25 # might remove this
		}
	}
	
	potential = {
    	giga_has_frameworld_origin = yes
		#always = yes
	}
	
	possible = { 
		hidden_trigger = {
			exists = starbase
		}	
		custom_tooltip = { fail_text = "requires_inside_border" is_inside_border = from } 
	}
	
	placement_rules = {
		planet_possible = {
			frameworld_can_harvest_asteroid = yes

			# don't let the AI harvest asteroids this way if they have deposits, or only rare deposits post midgame
			hidden_trigger = {
				OR = {
					space_owner = {
						is_ai = no
					}
					AND = {
						space_owner = {
							is_ai = yes
						}
						OR = {
							has_deposit = no
							AND = {
								mid_game_years_passed > 0
								frameworld_asteroid_has_rare_resource = no
							}
						}
					}
				}	
			}
		}
	}
	
	ai_weight = {
    	weight = 10 # baseline

		# increased chance if we've got multiple idle constructors and plenty of resources
		modifier = {
			factor = 10
			FROM = {
				has_resource = {
					type = influence
					amount > 200
				}
				has_resource = {
					type = energy
					amount > 5000
				}
				has_monthly_income = {
					resource = energy
					value > 30
				}
				count_owned_fleet = {
					count > 1
					limit = {
						is_ship_class = shipclass_constructor
						is_fleet_idle = yes
					}
				}
			}
		}

		# reduced chance if we have lots of free space at home
		modifier = {
			factor = 0.1
			FROM = {
				exists = capital_scope
				capital_scope = {
					free_district_slots > 8
				}
			}
		}

		# reduced even further if we have LOTS of free space at home
		modifier = {
			factor = 0.25
			FROM = {
				exists = capital_scope
				capital_scope = {
					free_district_slots > 16
				}
			}
		}

		# massively increased chance if we're having problems
		modifier = {
			factor = 100
			FROM = {
				exists = capital_scope
				capital_scope = {
					OR = {
						free_district_slots < 1
						free_housing < -5
					}
				}
			}
		}
	}
	
	on_build_complete = {
		from = {
			random_owned_planet = {
				limit = {
					has_planet_flag = giga_frameworld@prev
				}

				giga_frameworld_expand_deposit = { 
					DEPOSIT = d_frameworld_asteroid
					VAR = giga_frameworld_asteroids
				}
				giga_frameworld_expand_deposit = { 
					DEPOSIT = d_frameworld_expansion 
					VAR = giga_frameworld_expansions
				}
				change_planet_size = 1
				giga_frameworld_update_entity_with_fallback = yes
				frameworld_conduct_audit_check_ai = yes

				# if we successfully expanded, remove the harvested object
				#fromfrom.planet = { giga_frameworld_remove_asteroid = yes }
				from.planet = { remove_planet = yes }
			}
		}
		remove_megastructure = fromfrom
		print_scope_effect = yes
	}
}

########################################################################################################################
# habitat salvaging

frameworld_salvage_habitat_0 = {
	entity = ""
	construction_entity = ""
	portrait = "GFX_megastructure_construction_background"
	show_galactic_map_icon = no
	place_entity_on_planet_plane = yes
	construction_blocks_and_blocked_by = none
	show_in_outliner = no
	
	build_time = 720
	resources = {
		category = deposit_blockers_frameworld
		cost = {
			energy = 2500
			influence = 50
		}
	}
	
	potential = {
    	giga_has_frameworld_origin = yes
		has_technology = tech_habitat_1
	}
	
	possible = { 
		hidden_trigger = {
			exists = starbase
		}
		custom_tooltip = { fail_text = "requires_inside_border" is_inside_border = from } 
	}
	
	placement_rules = {
		planet_possible = {
			frameworld_can_salvage_habitat = yes
		}
	}
	
	ai_weight = {
    	weight = 10 # baseline

		# increased chance if we've got multiple idle constructors and plenty of resources
		modifier = {
			factor = 20
			FROM = {
				has_resource = {
					type = influence
					amount > 200
				}
				has_resource = {
					type = energy
					amount > 5000
				}
				has_monthly_income = {
					resource = energy
					value > 30
				}
				count_owned_fleet = {
					count > 1
					limit = {
						is_ship_class = shipclass_constructor
						is_fleet_idle = yes
					}
				}
			}
		}

		# reduced chance if we have lots of free space at home
		modifier = {
			factor = 0.1
			FROM = {
				exists = capital_scope
				capital_scope = {
					free_district_slots > 8
				}
			}
		}

		# reduced even further if we have LOTS of free space at home
		modifier = {
			factor = 0.25
			FROM = {
				exists = capital_scope
				capital_scope = {
					free_district_slots > 16
				}
			}
		}

		# massively increased chance if we're having problems
		modifier = {
			factor = 100
			FROM = {
				exists = capital_scope
				capital_scope = {
					OR = {
						free_district_slots < 1
						free_housing < -5
					}
				}
			}
		}
	}
	
	on_build_complete = {
		from = {
			random_owned_planet = {
				limit = {
					has_planet_flag = giga_frameworld@prev
				}

				giga_frameworld_expand_deposit = { 
					DEPOSIT = d_frameworld_habitat
					VAR = giga_frameworld_habitats
					COUNT = from.planet.value:giga_frameworld_hab_harvest_count
				}
				giga_frameworld_expand_deposit = { 
					DEPOSIT = d_frameworld_expansion 
					VAR = giga_frameworld_expansions
					COUNT = from.planet.value:giga_frameworld_hab_harvest_count
				}
				change_planet_size = from.planet.value:giga_frameworld_hab_harvest_count
				giga_frameworld_update_entity_with_fallback = yes
				frameworld_conduct_audit_check_ai = yes

				# if we successfully expanded, remove the harvested object
				from.planet = { giga_frameworld_remove_asteroid = yes }
				from.solar_system = { giga_remove_system_orbitals = yes }
			}
		}
		remove_megastructure = fromfrom
	}
}

########################################################################################################################
# upgrades

### Penrose sphere upgrade

frameworld_penrose_0 = {
	entity = "giga_frameworld_penrose_0_entity"
	portrait = "GFX_megastructure_construction_background"

	potential = { always = no }

	outliner_trigger = {
		exists = owner
		NOT = { has_megastructure_flag = giga_outliner_hidden_by_@owner }
	}
}

frameworld_penrose_1 = {
	entity = "giga_frameworld_penrose_1_entity"
	construction_entity = "giga_frameworld_penrose_1_entity"
	portrait = "GFX_megastructure_construction_background"

	upgrade_from = { frameworld_penrose_0 }
	outliner_trigger = {
		exists = owner
		NOT = { has_megastructure_flag = giga_outliner_hidden_by_@owner }
	}
	build_time = 2700
	resources = {
		category = megastructures
		cost = { alloys = 5000 }
		upkeep = { energy = 10 }
	}

	potential = { NOT = { has_global_flag = penrose_sphere_disabled } }
	possible = { from = { has_technology = giga_tech_penrose_sphere_2 } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = { country_event = { id = giga_frameworld_origin.002 } }	# Notification
	}
}

frameworld_penrose_2 = {
	entity = "giga_frameworld_penrose_2_entity"
	construction_entity = "giga_frameworld_penrose_2_entity"
	portrait = "GFX_megastructure_construction_background"

	upgrade_from = { frameworld_penrose_1 }

	build_time = 2700
	resources = {
		category = megastructures
		cost = { alloys = 7500 }
		upkeep = { energy = 25 }
	}

	potential = { NOT = { has_global_flag = penrose_sphere_disabled } }
	possible = { from = { has_technology = giga_tech_penrose_sphere_2 } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = { 
			set_country_flag = has_built_or_repaired_megastructure
			set_country_flag = has_built_or_repaired_gigastructure
			country_event = { id = giga_frameworld_origin.003 } # Notification
		}	

		create_ambient_object = {
			type = giga_frameworld_penrose
			location = fromfrom.planet
			use_3d_location = yes
			entity_face_object = fromfrom.planet
		}

		remove_megastructure = fromfrom

		random_system_planet = {
			limit = {
				giga_is_frame_world = yes
			}
			add_deposit = d_frameworld_penrose
			set_planet_flag = frameworld_penrose
			validate_planet_buildings_and_districts = yes
			remove_planet_flag = frameworld_upgrade
			
			if = {
				limit = {
					has_planet_flag = frameworld_decompressor
				}
				fromfrom.planet = {
					create_ambient_object = {
						type = giga_frameworld_penrose_decompressor_combo
						location = fromfrom.planet
						use_3d_location = yes
						entity_face_object = fromfrom.planet
					}
				}
			}
		}

		star = {
			set_planet_entity = { entity = black_hole_giga_entity } # get rid of the accretion disk
		}
	}
}

### Matter decompressor upgrade

frameworld_decompressor_0 = {
	entity = "giga_frameworld_decompressor_0_entity"
	portrait = "GFX_megastructure_construction_background"

	potential = { always = no }

	outliner_trigger = {
		exists = owner
		NOT = { has_megastructure_flag = giga_outliner_hidden_by_@owner }
	}
}

frameworld_decompressor_1 = {
	entity = "giga_frameworld_decompressor_1_entity"
	construction_entity = "giga_frameworld_decompressor_1_entity"
	portrait = "GFX_megastructure_construction_background"

	upgrade_from = { frameworld_decompressor_0 }

	outliner_trigger = {
		exists = owner
		NOT = { has_megastructure_flag = giga_outliner_hidden_by_@owner }
	}
	
	build_time = 2700
	resources = {
		category = megastructures
		cost = { alloys = 5000 }
		upkeep = { energy = 10 }
	}

	potential = { NOT = { has_global_flag = vanilla_matter_disabled } }
	possible = { from = { has_technology = tech_matter_decompressor } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = { country_event = { id = giga_frameworld_origin.005 } }	# Notification
	}
}

frameworld_decompressor_2 = {
	entity = "giga_frameworld_decompressor_2_entity"
	construction_entity = "giga_frameworld_decompressor_2_entity"
	portrait = "GFX_megastructure_construction_background"

	upgrade_from = { frameworld_decompressor_1 }

	build_time = 2700
	resources = {
		category = megastructures
		cost = { alloys = 7500 }
		upkeep = { energy = 25 }
	}

	potential = { NOT = { has_global_flag = vanilla_matter_disabled } }
	possible = { from = { has_technology = tech_matter_decompressor } }

	ai_weight = { factor = 10 } # If we can build it, we will build it
	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = { save_event_target_as = giga_planet }
		from = { 
			set_country_flag = has_built_or_repaired_megastructure
			set_country_flag = has_built_or_repaired_gigastructure
			country_event = { id = giga_frameworld_origin.006 } # Notification
		}	

		create_ambient_object = {
			type = giga_frameworld_decompressor
			location = fromfrom.planet
			use_3d_location = yes
			entity_face_object = fromfrom.planet
		}

		remove_megastructure = fromfrom

		random_system_planet = {
			limit = {
				giga_is_frame_world = yes
			}
			add_deposit = d_frameworld_decompressor
			set_planet_flag = frameworld_decompressor
			validate_planet_buildings_and_districts = yes
			remove_planet_flag = frameworld_upgrade

			if = {
				limit = {
					has_planet_flag = frameworld_penrose
				}
				fromfrom.planet = {
					create_ambient_object = {
						type = giga_frameworld_penrose_decompressor_combo
						location = fromfrom.planet
						use_3d_location = yes
						entity_face_object = fromfrom.planet
					}
				}
			}
		}
	}
}