# Build Orbital Arcology
decision_giga_build_orbital_arcology = {
	owned_planets_only = yes
	sound = event_construction
	icon = decision_build_giga_orbital_arcology
	prerequisites = { "giga_tech_orbital_arcologies" }
	show_tech_unlock_if = { always = no }
	ai_weight = {
		weight = 300
		modifier = { factor = 0.1	solar_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } }
		modifier = { factor = 0.5	solar_system = { any_neighbor_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } } }
		modifier = { factor = 4		solar_system = { exists = owner is_same_value = owner.capital_scope.solar_system } }
		modifier = {
			factor = 3
			solar_system = {
				any_system_planet = {
					AND = {
						NOR = { 
							has_planet_flag = orbital_arcology 
							has_planet_flag = giga_drive_yard 
						}
						OR = {
							is_planet_class = pc_city
							is_planet_class = pc_giga_planetary_computer
							count_owned_pop = { count >= 40 }
						}
					}
				}
			}
		}
		modifier = { factor = 0.00 from = { has_country_flag = has_recently_built_orbital_arcology } }
	}

	potential = {
		has_overlord_dlc = no
		exists = owner
		or = {
			is_artificial = no
			has_planet_flag = giga_planet_mega
		}

		NOR = {
			has_planet_flag = orbital_arcology 
			has_planet_flag = giga_drive_yard
		}
		NOT = {
			has_global_flag = orbital_arcologies_disabled
		}
	}

	allow = {
		custom_tooltip = {
			fail_text = "requires_not_capped"
			owner = {
				OR = {
					check_variable = { which = giga_orbital_arcologies_cap value = 0 }						# No Cap
					check_variable = { which = giga_current_orbital_arcologies value < giga_orbital_arcologies_cap }
				}
			}
		}
	}

	resources = {
		category = giga_megastructures
		cost = {
			alloys = 200
			multiplier = trigger:planet_size
		}
	}

	effect = {
		custom_tooltip = "decision_giga_build_orbital_arcology_effect"
		hidden_effect = {
			solar_system = {
				spawn_megastructure = {
					type = orbital_arcology_0
					planet = ROOT
					owner = space_owner
				}
				random_system_megastructure = {
					limit = {
						is_megastructure_type = orbital_arcology_0
						planet = { is_same_value = ROOT } 
					}
					upgrade_megastructure_to = orbital_arcology_1
				}
			}
		}
	}

	enactment_time = 0
}

# Upgrade Orbital Arcology
# decision_giga_upgrade_orbital_arcology = {
# 	owned_planets_only = yes
# 	sound = event_construction
# 	icon = decision_enhance_orbital_arcology
# 	prerequisites = { "giga_tech_enhance_orbital_arcologies" }
# 	ai_weight = {
# 		weight = 300
# 		modifier = { factor = 0.1	solar_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } }
# 		modifier = { factor = 0.5	solar_system = { any_neighbor_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } } }
# 		modifier = { factor = 4		solar_system = { exists = owner is_same_value = owner.capital_scope.solar_system } }
# 		modifier = {
# 			factor = 3
# 			solar_system = {
# 				any_system_planet = {
# 					AND = {
# 						NOR = {
# 							has_planet_flag = orbital_arcology
# 							has_planet_flag = giga_drive_yard
# 						}
# 						OR = {
# 							is_planet_class = pc_city
# 							is_planet_class = pc_giga_planetary_computer
# 							count_owned_pop = { count >= 40 }
# 						}
# 					}
# 				}
# 			}
# 		}
# 		modifier = { factor = 0.00 from = { has_country_flag = has_recently_built_orbital_arcology } }
# 	}
#
# 	potential = {
# 		exists = owner
# 		or = {
# 			is_artificial = no
# 			has_planet_flag = giga_planet_mega
# 		}
# 		has_planet_flag = orbital_arcology
# 		solar_system = {
# 			any_system_megastructure = {
# 				is_megastructure_type = orbital_arcology_1
# 				planet = { is_same_value = ROOT }
# 				is_upgrading = no
# 			}
# 		}
# 		NOT = {
# 			has_global_flag = orbital_arcologies_disabled
# 		}
# 	}
#
# 	allow = {
# 		has_major_upgraded_capital = yes
# 	}
#
# 	resources = {
# 		category = giga_megastructures
# 		cost = {
# 			alloys = 250
# 			multiplier = trigger:planet_size
# 		}
# 	}
#
# 	effect = {
# 		custom_tooltip = "decision_giga_upgrade_orbital_arcology_effect"
# 		hidden_effect = {
# 			solar_system = {
# 				random_system_megastructure = {
# 					limit = {
# 						is_megastructure_type = orbital_arcology_1
# 						planet = { is_same_value = ROOT }
# 					}
# 					upgrade_megastructure_to = orbital_arcology_2
# 				}
# 			}
# 		}
# 	}
#
# 	enactment_time = 0
# }
#
# # Maximize Orbital Arcology
# decision_giga_maximize_orbital_arcology = {
# 	owned_planets_only = yes
# 	sound = event_construction
# 	icon = decision_maximize_orbital_arcology
# 	prerequisites = { "giga_tech_maximize_orbital_arcologies" }
# 	ai_weight = {
# 		weight = 300
# 		modifier = { factor = 0.1	solar_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } }
# 		modifier = { factor = 0.5	solar_system = { any_neighbor_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } } }
# 		modifier = { factor = 4		solar_system = { exists = owner is_same_value = owner.capital_scope.solar_system } }
# 		modifier = {
# 			factor = 3
# 			solar_system = {
# 				any_system_planet = {
# 					AND = {
# 						NOR = {
# 							has_planet_flag = orbital_arcology
# 							has_planet_flag = giga_drive_yard
# 						}
# 						OR = {
# 							is_planet_class = pc_city
# 							is_planet_class = pc_giga_planetary_computer
# 							count_owned_pop = { count >= 40 }
# 						}
# 					}
# 				}
# 			}
# 		}
# 		modifier = { factor = 0.00 from = { has_country_flag = has_recently_built_orbital_arcology } }
# 	}
#
# 	potential = {
# 		exists = owner
# 		or = {
# 			is_artificial = no
# 			has_planet_flag = giga_planet_mega
# 		}
# 		has_planet_flag = orbital_arcology
# 		solar_system = {
# 			any_system_megastructure = {
# 				is_megastructure_type = orbital_arcology_2
# 				planet = { is_same_value = ROOT }
# 				is_upgrading = no
# 			}
# 		}
# 		NOT = {
# 			has_global_flag = orbital_arcologies_disabled
# 		}
# 	}
#
# 	allow = {
# 		has_fully_upgraded_capital = yes
# 	}
#
# 	resources = {
# 		category = giga_megastructures
# 		cost = {
# 			alloys = 300
# 			multiplier = trigger:planet_size
# 		}
# 	}
#
# 	effect = {
# 		custom_tooltip = "decision_giga_maximize_orbital_arcology_effect"
# 		hidden_effect = {
# 			solar_system = {
# 				random_system_megastructure = {
# 					limit = {
# 						is_megastructure_type = orbital_arcology_2
# 						planet = { is_same_value = ROOT }
# 					}
# 					upgrade_megastructure_to = orbital_arcology_3
# 				}
# 			}
# 		}
# 	}
#
# 	enactment_time = 0
# }

# Psychic Beacon (Illuminate)
decision_psychic_illuminate = {
	icon = decision_psychic_illuminate
	sound = event_psionic_01
	ai_weight = { weight = 0 }
	prerequisites = { "giga_tech_psychic_beacon" }

	potential = {
		OR = {
			is_planet_class = pc_shrouded
			has_modifier = beacon_shrouded_habitable_structure
			giga_is_shrouded_ringworld = yes
		}
		solar_system.owner ={
			is_same_value = from
			has_country_flag = giga_psychic_beacon_illumiate
			OR = {
				has_megastructure = psychic_beacon_3
				has_megastructure = psychic_beacon_4
			}
		}
		NOT = { has_planet_flag = paluushia_scaring_blokkats }
	}

	effect = {
		hidden_effect = {
			if = {
				limit = {
					has_planet_flag = shrouded_paluushia
				}
				change_pc = pc_continental
				remove_planet_flag = shrouded_paluushia
				set_planet_flag = paluushia
				reroll_deposits = yes
				clear_blockers = yes
				generate_paluush_primitives_on_planet = yes
				save_event_target_as = giga_planet_illuminated
				solar_system.owner = {
					remove_country_flag = giga_psychic_beacon_illumiate
					country_event = { id = giga_psychic_beacon.002 }
				}
			}
			else_if = {
				limit = {
					has_modifier = beacon_shrouded_habitable_structure
				}
				solar_system = {
					random_system_ambient_object = {
						limit = {
							is_ambient_object_type = aeternum_consecrated_shroud
						}
						destroy_ambient_object = this
					}
				}
				remove_modifier = beacon_shrouded_habitable_structure
				save_event_target_as = giga_planet_illuminated
				solar_system.owner = {
					remove_country_flag = giga_psychic_beacon_illumiate
					country_event = { id = giga_psychic_beacon.002 }
				}
			}
			else_if = {
				limit = { giga_is_shrouded_ringworld = yes }
				if = {
					limit = {
						is_planet_class = pc_ringworld_habitable_shrouded
					}
					change_pc = pc_ringworld_habitable
					if = {
						limit = { from = { has_planet_flag = giga_ringworld_gar } }
						giga_set_ringworld_graphical_culture = {
							TARGET = this
							SOURCE = solar_system.starbase.owner
							SIZE = gargantuan
							TYPE = gaia_habitable
						}
					}
					else_if = {
						limit = { from = { has_planet_flag = giga_ringworld_beh } }
						giga_set_ringworld_graphical_culture = {
							TARGET = this
							SOURCE = solar_system.starbase.owner
							SIZE = behemoth
							TYPE = gaia_habitable
						}
					}
					else_if = {
						limit = { from = { has_planet_flag = giga_ringworld_tit } }
						giga_set_ringworld_graphical_culture = {
							TARGET = this
							SOURCE = solar_system.starbase.owner
							SIZE = titanic
							TYPE = gaia_habitable
						}
					}
					else = {
						giga_set_ringworld_graphical_culture = {
							TARGET = this
							SOURCE = solar_system.starbase.owner
							SIZE = vanilla
							TYPE = gaia_habitable
							VANILLA_TYPE = habitable
						}
					}
					save_event_target_as = giga_planet_illuminated
					root = { country_event = { id = giga_psychic_beacon.006 days = 2 } }
				}
				else_if = {
					limit = { 		
						is_planet_class = pc_squareworld_shrouded_habitable
					}
					change_pc = pc_squareworld_habitable #Not even the funny square is safe from me
					save_event_target_as = giga_planet_illuminated
					solar_system.owner = {
						remove_country_flag = giga_psychic_beacon_illumiate
						country_event = { id = giga_psychic_beacon.002 }
					}
				}
				else_if = {
					limit = {
						is_planet_class = pc_giga_penrose_shrouded_habitable
					}
					change_pc = pc_giga_penrose_habitable
					save_event_target_as = giga_planet_illuminated
					solar_system.owner = {
						remove_country_flag = giga_psychic_beacon_illumiate
						country_event = { id = giga_psychic_beacon.002 }
					}
				}
				else_if = {
					limit = {
						is_planet_class = pc_shrouded_equatorial_shipyard
					}
					change_pc = pc_equatorial_shipyard
					save_event_target_as = giga_planet_illuminated
					solar_system.owner = {
						remove_country_flag = giga_psychic_beacon_illumiate
						country_event = { id = giga_psychic_beacon.002 }
					}
				}
				else_if = {
					limit = {
						is_planet_class = pc_interstellar_shrouded_ringworld_habitable
					}
					change_pc = pc_interstellar_ringworld_habitable
					save_event_target_as = giga_planet_illuminated
					solar_system.owner = {
						remove_country_flag = giga_psychic_beacon_illumiate
						country_event = { id = giga_psychic_beacon.002 }
					}
				}
			}
			else = {
				change_pc = pc_ll_foggy
				add_modifier = { modifier = lifeless_foggy }
				add_modifier = { modifier = lifeless_foggy_gases days = 1800 }
				giga_reroll_lifeless = yes
				save_event_target_as = giga_planet_illuminated
				solar_system.owner = {
					remove_country_flag = giga_psychic_beacon_illumiate
					country_event = { id = giga_psychic_beacon.002 }
				}
			}
		}
	}
}

# Psionic Sublimation
decision_psionic_sublimation = {
	owned_planets_only = yes
	sound = event_psionic_03
	icon = decision_psionic_sublimation
	ai_weight = { weight = 0 }

	potential = {
		exists = owner
		owner = {
			has_tradition = tr_psionics_psi_corps
			has_technology = giga_tech_psychic_beacon
			OR = {
				has_megastructure = psychic_beacon_3
				has_megastructure = psychic_beacon_4
			}
		}
	}

	allow = {
		OR = {
			# normal psi corps building
			has_building = building_psi_corps
			# covenant buildings
			has_building = building_composer_sanctum
			has_building = building_eater_sanctum
			has_building = building_instrument_sanctum
			has_building = building_whisperers_sanctum
			# equivalent on orbital ring
			if = {
				limit = {
					exists = orbital_defence
				}
				orbital_defence = {
					exists = starbase
					starbase = {
						OR = {
							has_starbase_building = ring_psi_corps
							is_starbase_building_building = ring_psi_corps
						}
					}
				}
			}
		}
		#any_owned_pop = { has_job = telepath }
		num_assigned_jobs = {
			job = telepath
			value > 0
		}
	}

	effect = {
		every_owned_pop = {
			limit = { has_job = telepath }
			kill_pop = yes
			prev.owner = { add_resource = { sr_psionic_sublimate = 10 } }
		}
	}
}

# Systemcraft Crew
decision_systemcraft_crew = {
	owned_planets_only = yes
	sound = event_administrative_work
	icon = decision_binary_stars
	ai_weight = { weight = 0 }
	potential = {
		owner = {
			NOT = { has_country_flag = systemcraft_crew_required }
			has_megastructure = war_system_4
		}
	}

	resources = {
		category = decisions
		cost = { energy = 1000 }
	}

	allow = {
		count_owned_pop = { count >= 41 }
		owner = { resource_stockpile_compare = { resource = energy value >= 1000 } }
	}

	effect = {
		owner = {
			set_country_flag = systemcraft_crew_required
			country_event = { id = giga_dialog.2808 }
		}
		while = {
			count = 40
			random_owned_pop = { kill_pop = yes }
		}
	}
}

# Ringworld Arcology Project
decision_ringworld_arcology_project = {
	owned_planets_only = yes
	icon = decision_arcology_project
	ai_weight = { weight = 0 }
	enactment_time = 5400

	resources = {
		category = decisions
		cost = { trigger = { has_planet_flag = giga_ringworld_tit }	minerals = 40000 }
		cost = { trigger = { has_planet_flag = giga_ringworld_beh }	minerals = 40000 }
		cost = { trigger = { has_planet_flag = giga_ringworld_gar }	minerals = 40000 }
		cost = {													minerals = 40000 influence = 300 }
	}

	potential = {
		NOR = {
			is_planet_class = pc_ringworld_city
			has_modifier = resort_colony
			has_modifier = penal_colony
			has_modifier = slave_colony
			ag_is_ancient_ringworld = yes
			has_global_flag = cityring_disabled
		}
		is_planet_class = pc_ringworld_habitable
		exists = owner
		owner = { has_ascension_perk = ap_arcology_project }
	}

	allow = {
		if = {
			limit = { has_planet_flag = giga_ringworld_gar }
			owner = { resource_stockpile_compare = { resource = influence value >= 300 } }
			owner = { resource_stockpile_compare = { resource = minerals value >= 160000 } }
		}
		else_if = {
			limit = { has_planet_flag = giga_ringworld_beh }
			owner = { resource_stockpile_compare = { resource = influence value >= 300 } }
			owner = { resource_stockpile_compare = { resource = minerals value >= 120000 } }
		}
		else_if = {
			limit = { has_planet_flag = giga_ringworld_tit }
			owner = { resource_stockpile_compare = { resource = influence value >= 300 } }
			owner = { resource_stockpile_compare = { resource = minerals value >= 80000 } }
		}
		else = {
			owner = { resource_stockpile_compare = { resource = influence value >= 300 } }
			owner = { resource_stockpile_compare = { resource = minerals value >= 40000 } }
		}
		custom_tooltip = {
			fail_text = "decision_ringworld_arcology_project_requirements"
			free_district_slots < 1
			num_districts = { type = district_rw_generator value < 1 }
			num_districts = { type = district_rw_commercial value < 1 }
			num_districts = { type = district_rw_science value < 1 }
			num_districts = { type = district_rw_farming value < 1 }
		}
	}

	effect = {
		# Make city-planet
		custom_tooltip = "decision_ringworld_arcology_project_effects"
		hidden_effect = {
			clear_deposits = yes
			export_trigger_value_to_variable = {
				trigger = num_districts
				parameters = { type = district_rw_industrial  }
				variable = giga_rw_arc_num_industrial
			}
			multiply_variable = { which = giga_rw_arc_num_industrial value = 0.66 }
			floor_variable = giga_rw_arc_num_industrial
			change_variable = { which = giga_rw_arc_num_industrial value = 1 }
			change_pc = pc_ringworld_city
			set_planet_flag = giga_archology
			switch = {
				trigger = has_designation
				col_foundry = {
					while = {
						count = giga_rw_arc_num_industrial
						add_district = district_rw_alloys
					}
				}
				col_capital_foundry = {
					while = {
						count = giga_rw_arc_num_industrial
						add_district = district_rw_alloys
					}
				}
				col_factory = {
					while = {
						count = giga_rw_arc_num_industrial
						add_district = district_rw_consumer
					}
				}
				col_capital_factory = {
					while = {
						count = giga_rw_arc_num_industrial
						add_district = district_rw_consumer
					}
				}
				default = {
					multiply_variable = { which = giga_rw_arc_num_industrial value = 0.5 }
					floor_variable = giga_rw_arc_num_industrial
					while = {
						count = giga_rw_arc_num_industrial
						add_district = district_rw_consumer
					}
					while = {
						count = giga_rw_arc_num_industrial
						add_district = district_rw_alloys
					}
					add_district = district_rw_alloys
				}
			}
			solar_system = { save_event_target_as = giga_system }
			save_event_target_as = giga_planet
			planet_event = { id = giga_dialog.2401 }	# Notification
			owner = {
				if = {
					limit = { prev = { has_planet_flag = giga_ringworld_gar } }
					giga_set_ringworld_graphical_culture = {
						TARGET = prev
						SOURCE = this
						SIZE = gargantuan
						TYPE = ecu_habitable
					}
				}
				else_if = {
					limit = { prev = { has_planet_flag = giga_ringworld_beh } }
					giga_set_ringworld_graphical_culture = {
						TARGET = prev
						SOURCE = this
						SIZE = behemoth
						TYPE = ecu_habitable
					}
				}
				else_if = {
					limit = { prev = { has_planet_flag = giga_ringworld_tit } }
					giga_set_ringworld_graphical_culture = {
						TARGET = prev
						SOURCE = this
						SIZE = titanic
						TYPE = ecu_habitable
					}
				}
				else = {
					giga_set_ringworld_graphical_culture = {
						TARGET = prev
						SOURCE = this
						SIZE = vanilla
						TYPE = ecu_habitable
						VANILLA_TYPE = habitable
					}
				}
			}
			if = {		limit = { exists = owner owner = { is_regular_empire = yes } }	while = { count = 3 remove_district = district_rw_city } }
			else_if = {	limit = { exists = owner owner = { is_hive_empire = yes } }		while = { count = 3 remove_district = district_rw_hive } }
			else_if = {	limit = { exists = owner owner = { is_machine_empire = yes } }	while = { count = 3 remove_district = district_rw_nexus } }
		}
	}
}

# Ringworld Upgrade
decision_ringworld_upgrade = {
	icon = decision_ringworld_upgrade
	ai_weight = { weight = 0 }
	prerequisites = { "giga_tech_ringworld_upgrade" }

	resources = {
		category = decisions
		cost = { trigger = { has_planet_flag = giga_ringworld_tit }	alloys = 10000 }
		cost = { trigger = { has_planet_flag = giga_ringworld_beh }	alloys = 10000 }
		cost = { trigger = { has_planet_flag = giga_ringworld_gar }	alloys = 10000 }
		cost = {													alloys = 10000 influence = 50 }
	}

	potential = {
		NOR = {
			has_global_flag = upgrade_disabled
			has_planet_flag = giga_ringworld_upgraded
			ag_is_ancient_ringworld = yes
			is_planet_class = pc_ringworld_shielded
		}
		is_planet_class = pc_ringworld_tech
		solar_system.owner ={ is_same_value = from }
	}

	allow = {
		if = {
			limit = { has_planet_flag = giga_ringworld_gar }
			from = { resource_stockpile_compare = { resource = influence value >= 50 } }
			from = { resource_stockpile_compare = { resource = alloys value >= 40000 } }
		}
		else_if = {
			limit = { has_planet_flag = giga_ringworld_beh }
			from = { resource_stockpile_compare = { resource = influence value >= 50 } }
			from = { resource_stockpile_compare = { resource = alloys value >= 30000 } }
		}
		else_if = {
			limit = { has_planet_flag = giga_ringworld_tit }
			from = { resource_stockpile_compare = { resource = influence value >= 50 } }
			from = { resource_stockpile_compare = { resource = alloys value >= 20000 } }
		}
		else = {
			from = { resource_stockpile_compare = { resource = influence value >= 50 } }
			from = { resource_stockpile_compare = { resource = alloys value >= 10000 } }
		}
	}

	effect = {
		if = {		limit = { has_planet_flag = giga_ringworld_gar }	add_modifier = { modifier = "ringworld_upgrade_timer" days = 3600 } }
		else_if = {	limit = { has_planet_flag = giga_ringworld_beh }	add_modifier = { modifier = "ringworld_upgrade_timer" days = 2700 } }
		else_if = {	limit = { has_planet_flag = giga_ringworld_tit }	add_modifier = { modifier = "ringworld_upgrade_timer" days = 1800 } }
		else = {														add_modifier = { modifier = "ringworld_upgrade_timer" days = 900 } }
		hidden_effect = { planet_event = { id = giga_mega.101 } }
	}
}

# Virtual World Industry
decision_virtual_industry = {
	owned_planets_only = yes
	icon = decision_drilling_for_gas
	enactment_time = 0
	ai_weight = { weight = 0 }

	potential = {
		has_global_flag = giga_virtual_industry
		NOR = {
			has_modifier = resort_colony
			has_modifier = penal_colony
			has_modifier = slave_colony
		}
		is_planet_class = pc_virtual_reality
	}

	effect = {
		custom_tooltip = "decision_virtual_industry_effects"
		hidden_effect = {
			change_pc = pc_virtual_industry
			set_planet_flag = giga_virtual_industry
			remove_planet_flag = giga_virtual_reality
		}
	}
}

# Virtual World Advanced Industry
decision_virtual_advanced_industry = {
	owned_planets_only = yes
	icon = decision_strategic_resources
	enactment_time = 0
	ai_weight = { weight = 0 }

	potential = {
		always = no
		NOR = {
			has_modifier = resort_colony
			has_modifier = penal_colony
			has_modifier = slave_colony
		}
		is_planet_class = pc_virtual_reality
	}

	effect = {
		custom_tooltip = "decision_virtual_advanced_effects"
		hidden_effect = {
			change_pc = pc_virtual_stellar_industry
			set_planet_flag = giga_virtual_stellar_industry
			remove_planet_flag = giga_virtual_reality
			add_deposit = d_virtual_shipyard
		}
	}
}

decision_harvest_matter_for_planetary_printing = {
	owned_planets_only = no
	icon = decision_harvest_matter_for_planetary_printing
	enactment_time = 0
	ai_weight = { weight = 0 }

	potential = {
		exists = space_owner
		space_owner = { is_ai = no }
		is_star = no
		is_astral_scar = no
		is_colony = no
		is_artificial = no
		giga_habitable_structure = no
		if = {
			limit = { exists = owner }
			NOT = {
				owner = { is_country_type = primitive }
				owner = { is_country_type = frameworld_outpost_country_type }
			}
		}
		NOR = {
			is_planet_class = pc_shielded
			has_planet_flag = getting_harvested_for_printing
			has_planet_flag = megastructure
			has_planet_flag = has_megastructure
			has_planet_flag = holy_world_1
			has_planet_flag = holy_world_2
			has_planet_flag = holy_world_3
			has_planet_flag = holy_world_4
			has_planet_flag = machine_world_1
			has_planet_flag = machine_world_2
			has_planet_flag = machine_world_3
			has_planet_flag = machine_world_4
			has_planet_flag = paluushia
			has_planet_flag = corrona
			has_planet_flag = gigaflusion
			is_planet_class = pc_ai
			is_planet_class = pc_shrouded
			is_planet_class = pc_gigabrown_dwarf
			giga_is_gas_giant = yes
			giga_is_birch_world = yes
		}
		NOT = { has_planet_flag = has_megastructure } # This is gonna make people mad but you shouldn't be taking apart a planet that's anchoring a mega
	}

	resources = {
		category = giga_kilostructures
		cost = {
			alloys = 5000
			energy = 15000
		}
		cost = { alloys = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|alloys|AMOUNT|5000| }
	}

	prerequisites = { giga_tech_planetary_matter_harvesting }

	effect = {
		custom_tooltip = "decision_build_planetary_matter_harvester"
		hidden_effect = {
			from = {
				giga_ai_savings_withdraw = { CATEGORY = resource RESOURCE = alloys AMOUNT = 5000 }
			}
			# remove terraforming modifiers
			if = {
				limit = { 
					OR = {
						has_modifier = terraforming_candidate
						has_modifier = frozen_terraforming_candidate
						has_modifier = toxic_terraforming_candidate
					}
				}
				remove_modifier = terraforming_candidate
				remove_modifier = frozen_terraforming_candidate
				remove_modifier = toxic_terraforming_candidate
			}
			set_planet_flag = getting_harvested_for_printing
			giga_set_has_mega_flag = yes
			solar_system = {
				spawn_megastructure = {
					type = moon_printer_orbital_mass_harvester_0
					planet = ROOT
					owner = space_owner
				}
				space_owner = {
					every_owned_megastructure = {
						limit = {
							is_megastructure_type = moon_printer_orbital_mass_harvester_0
						}
						upgrade_megastructure_to = moon_printer_orbital_mass_harvester_1
					}
				}
			}
		}
	}
}

decision_claim_system_megas = {
	sound = event_administrative_work
	icon = decision_ringworld_upgrade

	resources = {
		category = decisions
		cost = {
			influence = 5
		}
	}

	potential = {
		is_star = yes
		space_owner = { is_ai = no }
	}

	effect = {
		custom_tooltip = decision_claim_system_megas_effect
		hidden_effect = {
			solar_system = {
				every_system_megastructure = {
					limit = {
						OR = {
							is_megastructure_type = war_moon_debris_cold_barren
							is_megastructure_type = asteroid_artillery_ruined
							is_megastructure_type = aeternum_planetcraft_ruined
							is_megastructure_type = war_planet_debris
						}
						owner = {
							NOT = { is_country = ROOT.space_owner }
						}
					}
					set_owner = ROOT.space_owner
				}
			}
		}
	}
	
	ai_weight = {
		weight = 0
	}
}

#Claim Roqualia
decision_take_solakia_back = {
	owned_planets_only = yes
	sound = event_ground_battle
	icon = decision_take_solakia_back
	ai_weight = { weight = 0 }
	potential = {
		has_planet_flag = gigaflusion
		has_modifier = solakia_free_state
		owner = { is_ai = no }
	}

	resources = {
		category = decisions
		cost = { influence = 100 }
	}

	allow = {
		hidden_trigger = { has_planet_flag = gigaflusion }
		has_modifier = solakia_free_state
		has_ground_combat = no
	}

	effect = {
		custom_tooltip = decision_take_solakia_back_effect
		hidden_effect = {
			root.owner = { defect_sonya = yes }
			set_planet_flag = seizing_solakia
			if = {
				limit = {
					exists = event_target:solakia
					root.owner = { NOT = { is_at_war_with = event_target:solakia } }
				}
				root.owner = {
					declare_war = {
						target = event_target:solakia
						attacker_war_goal = wg_conquest
					}
				}
				event_target:solakia = {
					add_opinion_modifier = {
						who = root.owner
						modifier = opinion_flusion_betrayed_us
					}
				}
			}
			if = {
				limit = { NOT = { exists = event_target:solakia } }
				create_country = {
					species = event_target:solakians
					name = "Roqualian Republic"
					authority = auth_democratic
					ethos = {
						ethic = ethic_xenophile
						ethic = ethic_materialist
						ethic = ethic_egalitarian
					}
					origin = origin_katzen_splinter
					civics = random
					flag = {
						icon={
							category="flusionian"
							file="solakia_flag.dds"
						}
						background={
							category="backgrounds"
							file="circle.dds"
						}
						colors={
							"dark_purple"
							"purple"
							"null"
							"null"
						}
					}
					type = faction
					effect = {
						create_leader = {
							class = official
							species = event_target:solakians
							name = "Dofus Tequenik Machina"
							gender = male
							effect = { save_event_target_as = solakia_ruler set_dofus_real_portrait = yes }
						}
						set_leader = event_target:solakia_ruler
						set_country_flag = solakia
						save_global_event_target_as = solakia
						apply_katzen_difficulty = yes
						add_modifier = {
							modifier = katzenartig_major_splinter
							days = -1
						}
						copy_techs_from = {
							target = ROOT.owner
						}
						set_hostile = root.owner
						set_country_flag = solakia_waiting_to_get_flusion
					}
				}
				ROOT.owner = { set_hostile = event_target:solakia }
			}
			while = {
				count = 8
				create_army = {
					name = "Roqualian Armed Forces"
					owner = event_target:solakia
					species = event_target:solakians
					type = "flusion_army"
				}
			}
			event_target:solakia = {
				set_country_flag = solakia_seizing_flusion
			}
		}
	}
}

decision_give_flusion_to_solakia = {
	owned_planets_only = yes
	sound = event_celebration
	icon = decision_give_flusion_to_solakia
	ai_weight = { weight = 0 }
	potential = {
		has_planet_flag = gigaflusion
		has_modifier = solakia_free_state
		owner = { is_ai = no }
		NOT = {
			AND = {
				exists = event_target:solakia
				owner = { is_at_war_with = event_target:solakia }
			}
		}
	}

	resources = {
		category = decisions
		cost = { influence = 50 }
	}

	allow = {
		hidden_trigger = { has_planet_flag = gigaflusion }
		has_modifier = solakia_free_state
		has_ground_combat = no
	}

	effect = {
		custom_tooltip = decision_give_flusion_to_solakia_effect
		hidden_effect = {
			root.owner = {
				save_event_target_as = former_flusion_owner
			}
			if = {
				limit = { NOT = { exists = event_target:solakia } }
				create_country = {
					species = event_target:solakians
					name = "Roqualian Republic"
					authority = auth_democratic
					ethos = {
						ethic = ethic_xenophile
						ethic = ethic_materialist
						ethic = ethic_egalitarian
					}
					origin = origin_katzen_splinter
					civics = random
					flag = {
						icon={
							category="flusionian"
							file="solakia_flag.dds"
						}
						background={
							category="backgrounds"
							file="circle.dds"
						}
						colors={
							"dark_purple"
							"purple"
							"null"
							"null"
						}
					}
					type = default
					effect = {
						create_leader = {
							class = official
							species = event_target:solakians
							name = "Dofus Tequenik Machina"
							gender = male
							effect = { save_event_target_as = solakia_ruler set_dofus_real_portrait = yes }
						}
						set_leader = event_target:solakia_ruler
						set_country_flag = solakia
						save_global_event_target_as = solakia
						apply_katzen_difficulty = yes
						add_modifier = {
							modifier = katzenartig_major_splinter
							days = -1
						}
						copy_techs_from = {
							target = ROOT.owner
						}
					}
				}
			}
			while = {
				count = 8
				create_army = {
					name = "Roqualian Armed Forces"
					owner = event_target:solakia
					species = event_target:solakians
					type = "flusion_army"
				}
			}
			event_target:gigaflusion = {
				set_controller = event_target:solakia
				set_owner = event_target:solakia
				remove_modifier = solakia_free_state
				solar_system = {
					starbase = { set_owner = event_target:solakia }
				}
			}
			every_country = { establish_communications_no_message = event_target:solakia }
			every_country = {
				establish_contact = {
					who = event_target:solakia
					location = event_target:giga_jublio_system
				}
			}
			every_country = {
				limit = { OR = { is_country_type = default is_ai = no } }
				country_event = { id = giga_katzen.8021 }
			}
			event_target:solakia = {
				add_opinion_modifier = {
					who = event_target:former_flusion_owner
					modifier = opinion_gave_flusion_back
				}
			}
		}
	}
}

giga_dismantle_elysium = {
	owned_planets_only = yes

	enactment_time = 360
	resources = {
		category = decisions
		cost = {
			influence = 100
		}
	}

	potential = {
		is_planet_class = pc_giga_elysium

		exists = owner
		owner = {
			not = { has_origin = origin_elysium } # elysium origin isn't allowed to take them down
		}

		exists = orbit
		orbit = {
			has_planet_flag = has_orbital_elysium
		}
	}

	allow = {
		orbit = {
			is_colony = yes
			is_under_colonization = no
			exists = owner
			owner = {
				is_same_empire = root.owner
			}
		}
	}

	effect = {
		orbit = {
			# clear planet modifiers
			remove_modifier = giga_elysium_host_planet
			hidden_effect = {
				remove_planet_flag = has_orbital_elysium
				clear_variable = giga_elysium_admin
				clear_variable = giga_elysium_stability
			}

			# restore buildings
			if = {
				limit = {
					owner = {
						is_hive_empire = yes
					}
				}
				remove_building = building_giga_elysium_host_hive_jobs
				if = {
					limit = {
						has_building = building_giga_elysium_host_hive_major_capital
					}
					remove_building = building_giga_elysium_host_hive_major_capital
					add_building = building_hive_major_capital
				}
				else = {
					remove_building = building_giga_elysium_host_hive_capital
					add_building = building_hive_capital
				}
			}
			else_if = {
				limit = {
					owner = {
						is_machine_empire = yes
					}
				}
				remove_building = building_giga_elysium_host_machine_jobs
				if = {
					limit = {
						has_building = building_giga_elysium_host_machine_major_capital
					}
					remove_building = building_giga_elysium_host_machine_major_capital
					add_building = building_machine_major_capital
				}
				else = {
					remove_building = building_giga_elysium_host_machine_capital
					add_building = building_machine_capital
				}
			}
			else = {
				remove_building = building_giga_elysium_host_jobs
				if = {
					limit = {
						has_building = building_giga_elysium_host_major_capital
					}
					remove_building = building_giga_elysium_host_major_capital
					add_building = building_major_capital
				}
				else = {
					remove_building = building_giga_elysium_host_capital
					add_building = building_capital
				}
			}
			if = {
				limit = {
					has_building = building_giga_elysium_host_booster
				}
				remove_building = building_giga_elysium_host_booster
			}
			
			# this will hopefully make the capitals switch if it's meant to be something other than these, and update the planet view
			validate_planet_buildings_and_districts = yes
		}

		# get rid of the elysium
		every_owned_pop = {
			resettle_pop = {
				pop = this
				planet = root.orbit
			}
		}

		hidden_effect = {
			owner = {
				country_event = {
					id = giga_elysium.006
					scopes = {
						from = root
						fromfrom = root.orbit
					}
				}
			}

			giga_remove_planet = yes
			orbit = {
				giga_clear_has_mega_flag = yes
			}
		}

		custom_tooltip = giga_dismantle_elysium_tooltip
	}

	ai_weight = {
		weight = 0

		# empires which hate these should seek to take them down
		modifier = {
			exists = owner
			owner = {
				or = {
					is_egalitarian = yes
					is_cooperative = yes
					has_valid_civic = civic_machine_servitor
				}
			}

			weight = 1000
		}
	}
}

# Flood gigas habitats
@expand_planetary_sea_length = 720

decision_giga_flood_habitat = {
	owned_planets_only = yes
	icon = decision_satellite_in_orbit

	enactment_time = @expand_planetary_sea_length

	potential = {
		# habitat has the vanilla decision, flooding the flat world is just silly
		nor = {
			is_planet_class = pc_habitat
			is_planet_class = pc_flat_world
		}
		# but the rest of the gigas habitat types are fair game
		# yes that includes the frameworld, though you can't do that with the origin as you can't take aquatic
		giga_is_habitat = yes		

		exists = owner
		owner = {
			has_ascension_perk = ap_hydrocentric
		}
		NOT = {
			has_modifier = flooded_habitat
		}
	}

	allow = {
		custom_tooltip = {
			fail_text = requires_free_ice_mining_station
			owner = {
				any_owned_starbase = {
					has_starbase_building = ice_mining_station
					solar_system = {
						NOT = { has_star_flag = ice_mining_in_progress }
					}
				}
			}
		}
	}

	resources = {
		category = decisions
		cost = {
			influence = 50
			energy = 1000
		}
	}

	on_queued = {
		set_variable = {
			which = decision_length
			value = @expand_planetary_sea_length
		}
		export_modifier_to_variable = {
			modifier = planet_decision_enact_speed_mult
			variable = decision_mult_var
		}
		change_variable = {
			which = decision_mult_var
			value = 1
		}
		divide_variable = {
			which = decision_length
			value = decision_mult_var
		}
		change_variable = { #ideally, may as well refer to this in the final effect
			which = decision_length
			value = 1
		}

		owner = {
			random_owned_starbase = {
				limit = {
					has_starbase_building = ice_mining_station
					solar_system = {
						NOT = { has_star_flag = ice_mining_in_progress }
					}
				}
				solar_system = {
					set_timed_star_flag = {
						flag = ice_mining_in_progress
						days = root.decision_length
					}
					set_timed_star_flag = {
						flag = ice_mining@root
						days = root.decision_length
					}
				}
			}
		}
		clear_variable = decision_length
		clear_variable = decision_mult_var
	}

	abort_trigger = {
		NOT = {
			owner = {
				any_owned_starbase = {
					has_starbase_building = ice_mining_station
				}
			}
		}
	}

	on_unqueued = {
		owner = {
			random_owned_starbase = {
				limit = {
					solar_system = {
						has_star_flag = ice_mining@root
					}
				}
				solar_system = {
					remove_star_flag = ice_mining@root
					remove_star_flag = ice_mining_in_progress
				}
			}
		}
	}

	abort_effect = {
		owner = {
			random_owned_starbase = {
				limit = {
					solar_system = {
						has_star_flag = ice_mining@root
					}
				}
				solar_system = {
					remove_star_flag = ice_mining@root
					remove_star_flag = ice_mining_in_progress
				}
			}
		}
		create_message = {
			type = ICE_MINING_INTERRUPTED
			localization = ICE_MINING_INTERRUPTED_HABITAT_DESC
			days = 20
			target = root
		}
	}

	effect = {
		custom_tooltip = decision_flood_habitat_tooltip

		if = {
			limit = {
				is_planet_class = pc_giga_elysium
			}
			custom_tooltip = decision_giga_flood_habitat_elysium
		}

		hidden_effect = {
			add_modifier = {
				modifier = flooded_habitat
				days = -1
			}
			ice_mining_depletion_effect = yes

			if = {
				limit = {
					has_planet_flag = temp_ice_mine_exhausted_flag
				}
				event_target:mined_system.starbase = {
					remove_starbase_building = {
						building = ice_mining_station
					}
				}
				create_message = {
					type = ICE_MINING_HABITAT_SUCCESS
					localization = ICE_MINING_HABITAT_SUCCESS_BUT_EXHAUSTED_DESC
					days = 20
					target = root
					variable = {
						type = name
						localization = SYSTEM
						scope = event_target:mined_system
					}
				}
			}
			else = {
				create_message = {
					type = ICE_MINING_HABITAT_SUCCESS
					localization = ICE_MINING_HABITAT_SUCCESS_DESC
					days = 20
					target = root
					variable = {
						type = name
						localization = SYSTEM
						scope = event_target:mined_system
					}
				}
			}
			change_variable = {
				which = ice_dumping_happened
				value = 1
			}

			# special effects per hab type

			# TODO: orbital entity swap for ocean planet texture
		}
	}
	ai_weight = {
		weight = 2
	}
}

decision_hypersiphon_mass_summon = {
	sound = event_psionic
	icon = decision_surreal_visions

	enactment_time = 30

	resources = {
		category = armies
		cost = {
			energy = 50
			sr_psionic_sublimate = 2

			multiplier = value:giga_psychic_hypersiphon_summon_count
		}
	}

	prerequisites = { giga_tech_psychic_hypersiphon }

	potential = {
		has_active_building = building_giga_shroud_conduit
		exists = planet_owner
		has_ground_combat = no
		is_occupied_flag = no
	}

	effect = {
		custom_tooltip = decision_hypersiphon_mass_summon_effect
		hidden_effect = {
			if = {
				limit = { exists = planet_owner }
				while = {
					count = value:giga_psychic_hypersiphon_summon_count
					create_army = { owner = planet_owner species = planet_owner.species type = shroud_summoned_army}
				}
			}
		}
	}

	ai_weight = { # expensive on zro upkeep, might not be a great one for the AI to do
		weight = 0
	}
}