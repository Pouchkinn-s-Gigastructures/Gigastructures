namespace = maginot_destruction

### "Gateway" events that are scope-dependent ###

# on_planet_bombarded = check if bombardment has changed planet class (aka destroying the colony)
planet_event = {
	id = maginot_destruction.999
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_planet_flag = giga_maginot_world
	}

	immediate = {
		save_event_target_as = maginot_world_loc
		this.owner = { save_event_target_as = maginot_owner }
		from = { save_event_target_as = maginot_destroyer }
		planet_event = { id = maginot_destruction.1000 days = 1 }
	}
}
# delay planet class check by a day
planet_event = {
	id = maginot_destruction.1000
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_planet_flag = giga_maginot_world
		NOT = { giga_is_maginot_world = yes }
	}

	immediate = {
		planet_event = { id = maginot_destruction.1010 }
	}
}

# on_planet_zero_pops, on_planet_zero_pops_ground_combat = check if bombardment/ground combat has killed all the pops
planet_event = {
	id = maginot_destruction.1001
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_planet_flag = giga_maginot_world
	}

	immediate = {
		save_event_target_as = maginot_world_loc
		this.owner = { save_event_target_as = maginot_owner }
		from = { save_event_target_as = maginot_destroyer }
		planet_event = { id = maginot_destruction.1010 }
	}
}

# on_destroy_planet_with_* = colossus was used
planet_event = {
	id = maginot_destruction.1002
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_planet_flag = giga_maginot_world
	}

	immediate = {
		save_event_target_as = maginot_world_loc
		this.owner = { save_event_target_as = maginot_owner }
		from = { save_event_target_as = maginot_destroyer_colossus_fleet }
		from.owner = { save_event_target_as = maginot_destroyer }
		planet_event = { id = maginot_destruction.1010 }
		planet_event = { id = maginot_destruction.1012 } # destroy colossus
	}
}

# on_colony_destroyed = generic destruction
planet_event = {
	id = maginot_destruction.1003
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_planet_flag = giga_maginot_world
	}

	immediate = {
		save_event_target_as = maginot_world_loc
		this.owner = { save_event_target_as = maginot_owner }
		planet_event = { id = maginot_destruction.1010 }
	}
}

# on_planet_conquer = planet captured (probably ground combat), flavour is Dead Hand is disarmed in capture process
planet_event = {
	id = maginot_destruction.1004
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_planet_flag = giga_maginot_world
	}

	immediate = {
		# recreate ground armies
		while = { count = 5	create_army = { name = NAME_heavy_defender	owner = from species = from.species type = "heavy_defender" } }

		## clean up flags and modifiers from subspace disruption system
		remove_modifier = maginot_anti_jump_on
		remove_deposit = d_maginot_subspace_disruptor
		solar_system = {
			# Prevents jump drives
			remove_star_flag = maginot_anti_jump_star
			system_star = {
				remove_modifier = maginot_anti_jump_star_modifier
			}
			# Prevents NDB & QSO
			every_system_planet = {
				remove_modifier = maginot_anti_jump_on # in case there are others in system, so player knows to re-enable
				remove_deposit = d_maginot_subspace_disruptor
				remove_planet_flag = cant_build_here
				remove_planet_flag = cant_target_this_planet
			}

			# one jump away too
			every_neighbor_system = {
				# Prevents jump drives
				remove_star_flag = maginot_anti_jump_star
				system_star = {
					remove_modifier = maginot_anti_jump_star_modifier
				}
				if = {
					limit = { ROOT = { has_planet_flag = maginot_protocols_boost } }
					ROOT = { remove_planet_flag = maginot_protocols_boost }
					every_neighbor_system = {
						remove_star_flag = maginot_anti_jump_star
						system_star = {
							remove_modifier = maginot_anti_jump_star_modifier
						}
					}
				}
				# Prevents NDB & QSO - not in neighbours
				#every_system_planet = {
				#	remove_planet_flag = cant_build_here
				#	remove_planet_flag = cant_target_this_planet
				#}
			}
		}

		## Swap the cap variables between the combatants
		planet_owner = { # old country?
			change_variable = { which = maginot_world value = -1 }
			change_variable = { which = giga_current_maginot_world value = -1 }

			country_event = { id = maginot_destruction.2010 }
		}

		save_event_target_as = maginot_world_loc
		from = { # new country
			save_event_target_as = new_maginot_owner
			change_variable = { which = maginot_world value = 1 }
			change_variable = { which = giga_current_maginot_world value = 1 }

			country_event = { id = maginot_destruction.2000 }
		}
	}
}

### Destruction events - actually do stuff ###

# ensure planet is cracked and destroy fleets in orbit
planet_event = {
	id = maginot_destruction.1010
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_planet_flag = giga_maginot_world
	}

	immediate = {
		
		## clean up flags and modifiers from subspace disruption system
		remove_modifier = maginot_anti_jump_on
		remove_deposit = d_maginot_subspace_disruptor
		solar_system = {
			# Prevents jump drives
			remove_star_flag = maginot_anti_jump_star
			system_star = {
				remove_modifier = maginot_anti_jump_star_modifier
			}
			# Prevents NDB & QSO
			every_system_planet = {
				remove_modifier = maginot_anti_jump_on # in case there are others in system, so player knows to re-enable
				remove_deposit = d_maginot_subspace_disruptor
				remove_planet_flag = cant_build_here
				remove_planet_flag = cant_target_this_planet
			}

			# one jump away too
			every_neighbor_system = {
				# Prevents jump drives
				remove_star_flag = maginot_anti_jump_star
				system_star = {
					remove_modifier = maginot_anti_jump_star_modifier
				}
				if = {
					limit = { ROOT = { has_planet_flag = maginot_protocols_boost } }
					ROOT = { remove_planet_flag = maginot_protocols_boost }
					every_neighbor_system = {
						remove_star_flag = maginot_anti_jump_star
						system_star = {
							remove_modifier = maginot_anti_jump_star_modifier
						}
					}
				}
				# Prevents NDB & QSO - not in neighbours
				#every_system_planet = {
				#	remove_planet_flag = cant_build_here
				#	remove_planet_flag = cant_target_this_planet
				#}
			}
		}

		## clean up variables
		event_target:maginot_owner = {
			change_variable = { which = maginot_world value = -1 }
			change_variable = { which = giga_current_maginot_world value = -1 }
		}

		## crack
		# already cracked/destroyed, could be by bombardment
		if = {
			limit = {
				has_planet_flag = giga_maginot_world
				OR = {
					is_planet_class = pc_shattered
					is_planet_class = pc_ringworld_habitable_damaged
				}
			}
			planet_event = { id = maginot_destruction.1011 } # destroy fleets in orbit
			# clean up just in case
			every_owned_pop = {
				kill_pop = yes
			}
			remove_all_buildings = yes
			clear_deposits = yes
			remove_planet_flag = giga_maginot_world
			remove_planet_flag = colony_event
		}
		# destroy fleets and world
		else_if = {
			limit = {
				has_planet_flag = giga_maginot_world
			}
			planet_event = { id = maginot_destruction.1011 } # destroy fleets in orbit
			planet_event = { id = maginot_destruction.1013 days = 1 } # crack planet
		}

		## notification
		# slightly delayed to watch the fireworks
		# defender
		event_target:maginot_owner = {
			if = {
				limit = {
					any_fleet_in_orbit = { has_fleet_flag = cosmogenesis_needle }
				}
				country_event = { id = maginot_destruction.2004 days = 2 }
			}
			else = {
				country_event = { id = maginot_destruction.2001 days = 2 }
			}
		}
		# attacker
		if = {
			limit = { exists = event_target:maginot_destroyer }
			# check if a colossus was used
			if = {
				limit = { exists = event_target:maginot_destroyer_colossus_fleet }
				event_target:maginot_destroyer = {
					country_event = { id = maginot_destruction.2003 days = 2 }
				}
			}
			else_if = {
				limit = { any_fleet_in_orbit = { has_fleet_flag = cosmogenesis_needle } }
				# nothing - skips the event for attacker because they are the same empire
			}
			# normal event text
			else = {
				event_target:maginot_destroyer = {
					country_event = { id = maginot_destruction.2002 days = 2 }
				}
			}
		}
	}
}

# damage orbiting fleets
planet_event = {
	id = maginot_destruction.1011
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# planet effect
		create_ambient_object = {
			type = habitat_cracker_object
			location = this
			duration = 5
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = 0.15
		}
		# while loop does not work for some reason
		create_ambient_object = {
			type = maginot_tachyon_cannon_hit_object
			location = this
			duration = 3
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = -30 max = 30 }
			entity_offset_height = { min = 0 max = 1 }
			entity_scale_to_size = no
			scale = 2
		}
		create_ambient_object = {
			type = maginot_tachyon_cannon_hit_object
			location = this
			duration = 3
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = -30 max = 30 }
			entity_offset_height = { min = 0 max = 1 }
			entity_scale_to_size = no
			scale = 2
		}
		create_ambient_object = {
			type = maginot_tachyon_cannon_hit_object
			location = this
			duration = 3
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = -30 max = 30 }
			entity_offset_height = { min = 0 max = 1 }
			entity_scale_to_size = no
			scale = 2
		}

		every_fleet_in_orbit = {
			limit = {
				NOT = { giga_maginot_explosion_should_not_kill_fleet = yes }
				# same as = no but the logic is clearer this way
			}
			every_owned_ship = {
				# 100 000 000 direct hull damage, basically one planet detonating shouldnt kill a systemcraft but anything smaller is fair game
				reduce_hp = 100000000
				# explosion effect on ships
				create_ambient_object = {
					type = maginot_ship_explosion_object
					location = this
					duration = 3
					use_3d_location = yes
					entity_offset = { min = 0 max = 1 }
					entity_offset_angle = { min = 0 max = 180 }
					entity_offset_height = { min = -1 max = 1 }
					entity_scale_to_size = yes
					scale = 1.5
				}
				create_ambient_object = {
					type = maginot_tachyon_cannon_miss_object
					location = this
					duration = 3
					use_3d_location = yes
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 170 max = 190 }
					entity_offset_height = { min = -2 max = -1 }
					entity_scale_to_size = no
					scale = 1
				}
				# quick fix in case command platform somehow got above 100 000 000 HP
				if = {
					limit = { is_ship_size = giga_maginot_strategic_defence_command_platform }
					destroy_ship = this
				}
			}
		}
	}
}

# damage colossus that hit the planet
planet_event = {
	id = maginot_destruction.1012
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# planet effect
		create_ambient_object = {
			type = habitat_cracker_object
			location = this
			duration = 5
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			entity_scale_to_size = yes
			scale = 0.15
		}
		# while loop does not work for some reason
		create_ambient_object = {
			type = maginot_tachyon_cannon_hit_object
			location = this
			duration = 3
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = -30 max = 30 }
			entity_offset_height = { min = 0 max = 1 }
			entity_scale_to_size = no
			scale = 2
		}
		create_ambient_object = {
			type = maginot_tachyon_cannon_hit_object
			location = this
			duration = 3
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = -30 max = 30 }
			entity_offset_height = { min = 0 max = 1 }
			entity_scale_to_size = no
			scale = 2
		}
		create_ambient_object = {
			type = maginot_tachyon_cannon_hit_object
			location = this
			duration = 3
			use_3d_location = yes
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = -30 max = 30 }
			entity_offset_height = { min = 0 max = 1 }
			entity_scale_to_size = no
			scale = 2
		}

		event_target:maginot_destroyer_colossus_fleet = {
			every_owned_ship = {
				# 100 000 000 direct hull damage, basically one planet detonating shouldnt kill a systemcraft but anything smaller is fair game
				reduce_hp = 100000000
				# explosion effect on ships
				create_ambient_object = {
					type = maginot_ship_explosion_object
					location = this
					duration = 3
					use_3d_location = yes
					entity_offset = { min = 0 max = 1 }
					entity_offset_angle = { min = 0 max = 180 }
					entity_offset_height = { min = -1 max = 1 }
					entity_scale_to_size = yes
					scale = 1.5
				}
				create_ambient_object = {
					type = maginot_tachyon_cannon_miss_object
					location = this
					duration = 3
					use_3d_location = yes
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 170 max = 190 }
					entity_offset_height = { min = -2 max = -1 }
					entity_scale_to_size = no
					scale = 1
				}
			}
		}
	}
}

# actual planet destruction (delayed to apply despite other changes having happened, no escape from the failsafe)
planet_event = {
	id = maginot_destruction.1013
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}
		# stuff that requires an offender that blew up the planet
		if = {
			limit = {
				exists = event_target:maginot_destroyer
			}
			# broke resolutions
			if = {
				limit = {
					OR = {
						is_active_resolution = "resolution_rulesofwar_reverence_for_life"
						is_active_resolution = "resolution_rulesofwar_independent_tribunals"
						is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
						is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
					}
				}
				event_target:maginot_destroyer = {
					set_timed_country_flag = { flag = resolution_breached_fired_cracker days = 3600 }
				}
			}

			# Exterminatus Achievement
			if = {
				limit = { is_capital = yes }
				event_target:maginot_destroyer = { set_country_flag = exterminatus }
			}
			if = {
				limit = {
					exists = event_target:maginot_owner
					event_target:maginot_owner = {
						NOT = { is_same_value = event_target:maginot_destroyer }
						OR = {
							is_country_type = default
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						}
					}
				}
				# generate threat
				if = {
					limit = {
						is_colony = yes
					}
					add_threat = { who = event_target:maginot_destroyer amount = 3 }
					# modifier for allies + those upset by genocide
					every_country = {
						limit = {
							NOR = {
								is_same_value = event_target:maginot_destroyer
								is_same_value = event_target:maginot_owner
								AND = {
									has_federation = yes
									is_in_federation_with = event_target:maginot_destroyer
								}
							}
							OR = {
								has_communications = event_target:maginot_destroyer
								has_communications = event_target:maginot_owner
							}
							OR = {
								AND = {
									has_federation = yes
									is_in_federation_with = event_target:maginot_owner
								}
								has_ai_personality = awakened_fallen_empire_xenophile
								AND = {
									is_country_type = default
									OR = {
										is_egalitarian = yes
										is_xenophile = yes
									}
								}
							}
						}
					add_opinion_modifier = {
						modifier = opinion_cracked_a_world
						who = event_target:maginot_destroyer
						}
					}
				}
				else = {
					add_threat = { who = event_target:maginot_destroyer amount = 1 }
				}
				# modifiers for victim
				event_target:maginot_owner = {
					add_opinion_modifier = {
						modifier = opinion_cracked_my_world
						who = event_target:maginot_destroyer
					}
					if = {
						limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
						add_modifier = {
							modifier = colossus_victim
							days = 10800 # 30 years
						}
					}
				}
				if = {
					limit = {
						exists = event_target:maginot_owner
						event_target:maginot_owner = { is_country_type = primitive }
					}
					# modifier for allies + those upset by genocide
					every_country = {
						limit = {
							NOT = { is_same_value = event_target:maginot_destroyer }
							OR = {
								has_communications = event_target:maginot_destroyer
								has_communications = event_target:maginot_owner
							}
							OR = {
								has_ai_personality = awakened_fallen_empire_xenophile
								AND = {
									is_country_type = default
									NOR = {
										is_xenophobe = yes
										is_homicidal = yes
										is_xenophile = yes
									}
								}
							}
						}
						add_opinion_modifier = {
							modifier = opinion_cracked_a_primitive_world
							who = event_target:maginot_destroyer
						}
					}
					every_country = {
						limit = {
							NOT = { is_same_value = event_target:maginot_destroyer }
							OR = {
								has_communications = event_target:maginot_destroyer
								has_communications = event_target:maginot_owner
							}
							OR = {
								has_ai_personality = awakened_fallen_empire_xenophile
								AND = {
									is_country_type = default
									is_xenophile = yes
								}
							}
						}
						add_opinion_modifier = {
							modifier = opinion_cracked_a_primitive_world_phile
							who = event_target:maginot_destroyer
						}
					}
				}
			}
			# add war exhaustion to planet owner
			if = {
				limit = {
					exists = event_target:maginot_owner
				}
				event_target:maginot_owner = {
					if = {
						limit = { #isn't the case when the crisis bombards planets, for instance
							is_at_war_with = event_target:maginot_destroyer
						}
						add_static_war_exhaustion = {
							attacker = event_target:maginot_destroyer
							location = root
							value_for_planet_destruction = 1.0
						}
					}
				}
			}
		}
		# kill the world
		every_owned_pop = {
			kill_pop = yes
		}
		remove_all_buildings = yes
		if = {
			limit = { is_ringworld = no }
			change_pc = pc_shattered
			giga_clear_has_mega_flag = yes
			remove_planet_flag = megastructure
			remove_planet_flag = giga_planet_mega
		}
		else = {
			change_pc = pc_ringworld_habitable_damaged
		}
		clear_deposits = yes
		remove_planet_flag = giga_maginot_world
		remove_planet_flag = colony_event
		if = {
			limit = { has_modifier = giga_bulwark_trad_stability_maginot }
			remove_modifier = giga_bulwark_trad_stability_maginot
		}
		# add minerals and alloys to the remnant
		random_list = {
			1 = {
				add_deposit = d_minerals_4
				add_deposit = d_minerals_4
				add_deposit = d_minerals_4
				add_deposit = d_minerals_4
				# some alloys from the bunkers and stuff
				add_deposit = d_alloys_4
				add_deposit = d_alloys_2
			}
			1 = {
				add_deposit = d_minerals_4
				add_deposit = d_minerals_4
				add_deposit = d_minerals_4
				add_deposit = d_alloys_4
			}
			1 = {
				add_deposit = d_minerals_4
				add_deposit = d_minerals_4
				add_deposit = d_alloys_2
			}
			1 = {
				add_deposit = d_minerals_4
			}
		}
	}
}

### Flavour popups for countries ###

# Dead Hand disarmed, all is well
country_event = {
	id = maginot_destruction.2000
	title = maginot_destruction.2000.name
	desc = maginot_destruction.2000.desc
	picture = GFX_evt_salute
	show_sound = event_radio_chatter_02
	location = event_target:maginot_world_loc

	is_triggered_only = yes

	option = {
		name = maginot_destruction.2000.a
	}
}
# owner informed of their loss
# this event was made later and messed up the numbering, rip
country_event = {
	id = maginot_destruction.2010
	title = maginot_destruction.2010.name
	desc = maginot_destruction.2010.desc
	picture = GFX_evt_mysterious_signal
	show_sound = event_radio_chatter_02
	location = event_target:maginot_world_loc

	is_triggered_only = yes

	option = {
		name = maginot_destruction.2010.a
	}
}

# Popup for defender about successful activation
country_event = {
	id = maginot_destruction.2001
	title = maginot_destruction.2001.name
	desc = maginot_destruction.2001.desc
	picture = GFX_evt_exploding_planet
	show_sound = event_super_explosion
	location = event_target:maginot_world_loc

	is_triggered_only = yes

	option = {
		name = maginot_destruction.2001.a
	}
}

# Popup for attacker about their fleet being devastated
country_event = {
	id = maginot_destruction.2002
	title = maginot_destruction.2002.name
	desc = maginot_destruction.2002.desc
	picture = GFX_evt_exploding_planet
	show_sound = event_red_alert
	location = event_target:maginot_world_loc

	is_triggered_only = yes

	option = {
		name = maginot_destruction.2002.a
	}
}

# Popup for attacker about their colossal failure
country_event = {
	id = maginot_destruction.2003
	title = maginot_destruction.2003.name
	desc = maginot_destruction.2003.desc
	picture = GFX_evt_exploding_planet
	show_sound = event_red_alert
	location = event_target:maginot_world_loc

	is_triggered_only = yes

	option = {
		name = maginot_destruction.2003.a
	}
}

# Popup for horizon needle embark
country_event = {
	id = maginot_destruction.2004
	title = maginot_destruction.2004.name
	desc = maginot_destruction.2004.desc
	picture = GFX_evt_astral_rift_advisor_exploding
	show_sound = event_radio_chatter_04
	location = event_target:maginot_world_loc

	is_triggered_only = yes

	option = {
		name = maginot_destruction.2004.a
	}
}
