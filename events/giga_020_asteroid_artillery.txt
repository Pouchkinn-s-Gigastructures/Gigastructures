namespace = giga_artillery

country_event = {
	id = giga_artillery.1000
	title = "giga_artillery.1000.name"
	desc = "giga_artillery.1000.desc"
	hide_window = no
	is_triggered_only = yes
	show_sound = event_machinery
	location = event_target:asteroid_artillery_location
	picture = GFX_evt_asteroid_artillery

	immediate = {
		event_target:asteroid_artillery_location = {
			set_variable = {
				which = asteroid_artillery_points_current
				value = ROOT.asteroid_artillery_points_max
			}
			subtract_variable = {
				which = asteroid_artillery_points_current
				value = asteroid_artillery_points_used
			}
		}
		set_variable = {
			which = giga_current_alloy_stockpile
			value = 0
		}
		export_resource_stockpile_to_variable = {
			resource = alloys
			variable = giga_current_alloy_stockpile
		}
		event_target:asteroid_artillery_location = {
			set_variable = {
				which = giga_current_alloy_stockpile
				value = ROOT.giga_current_alloy_stockpile
			}
		}
	}

	option = { #HP
		name = "giga_artillery.1000.b"
		allow = {
			custom_tooltip = {
				fail_text = "not_enough_artillery_points"
				hidden_trigger = { #more than 0 upgrade points left
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = asteroid_artillery_points_current
							value > 0
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = {
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = giga_current_alloy_stockpile
							value > asteroid_artillery_hp_cost
						}
					}
				}
			}
		}
		hidden_effect = {
			set_variable = { #export alloy cost to a variable in the country
				which = asteroid_artillery_upgrade_cost
				value = event_target:asteroid_artillery_location.asteroid_artillery_hp_cost
			}
			add_resource = { #subtract the alloys based on that variable
				alloys = -1
				mult = asteroid_artillery_upgrade_cost
			}
			event_target:asteroid_artillery_location = {
				change_variable = { #increase upgrade
					which = asteroid_artillery_hp
					value = 1
				}
				change_variable = { #increase amount of used points
					which = asteroid_artillery_points_used
					value = 1
				}
				multiply_variable = { #increase cost
					which = asteroid_artillery_hp_cost
					value = 1.3
				}
				round_variable = asteroid_artillery_hp_cost #Round it to avoid excessive decimal buildup
				change_variable = { #increase percentage display
					which = asteroid_artillery_hp_perc
					value = 30
				}
			}
			event_target:asteroid_artillery_ship_config_target = { #The ship being configured
				if = { #Clear modifier if its there
					limit = { has_modifier = giga_asteroid_artillery_hp }
					remove_modifier = giga_asteroid_artillery_hp
				}
				set_variable = { #Grab the multiplier from the asteroid
					which = asteroid_artillery_hp
					value = event_target:asteroid_artillery_location.asteroid_artillery_hp
				}
				add_modifier = { #Apply it
					modifier = giga_asteroid_artillery_hp
					multiplier = asteroid_artillery_hp
				}
			}
			country_event = { id = giga_artillery.1000 }
		}
	}

	option = { #ATK
		name = "giga_artillery.1000.c"
		allow = {
			custom_tooltip = {
				fail_text = "not_enough_artillery_points"
				hidden_trigger = { #more than 0 upgrade points left
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = asteroid_artillery_points_current
							value > 0
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = {
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = giga_current_alloy_stockpile
							value > asteroid_artillery_dmg_cost
						}
					}
				}
			}
		}
		hidden_effect = {
			set_variable = { #export alloy cost to a variable in the country
				which = asteroid_artillery_upgrade_cost
				value = event_target:asteroid_artillery_location.asteroid_artillery_dmg_cost
			}
			add_resource = { #subtract the alloys based on that variable
				alloys = -1
				mult = asteroid_artillery_upgrade_cost
			}
			event_target:asteroid_artillery_location = {
				change_variable = {
					which = asteroid_artillery_dmg
					value = 1
				}
				change_variable = {
					which = asteroid_artillery_dmg_perc
					value = 20
				}
				change_variable = {
					which = asteroid_artillery_points_used
					value = 1
				}
				multiply_variable = { #increase cost
					which = asteroid_artillery_dmg_cost
					value = 1.3
				}
				round_variable = asteroid_artillery_dmg_cost #Round it to avoid excessive decimal buildup
			}
			event_target:asteroid_artillery_ship_config_target = {
				if = {
					limit = { has_modifier = giga_asteroid_artillery_dmg }
					remove_modifier = giga_asteroid_artillery_dmg
				}
				set_variable = {
					which = asteroid_artillery_dmg
					value = event_target:asteroid_artillery_location.asteroid_artillery_dmg
				}
				add_modifier = {
					modifier = giga_asteroid_artillery_dmg
					multiplier = asteroid_artillery_dmg
				}
			}
			country_event = { id = giga_artillery.1000 }
		}
	}

	option = { #SPEED
		name = "giga_artillery.1000.d"
		allow = {
			custom_tooltip = {
				fail_text = "not_enough_artillery_points"
				hidden_trigger = { #more than 0 upgrade points left
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = asteroid_artillery_points_current
							value > 0
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = {
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = giga_current_alloy_stockpile
							value > asteroid_artillery_atkspeed_cost
						}
					}
				}
			}
		}
		hidden_effect = {
			set_variable = { #export alloy cost to a variable in the country
				which = asteroid_artillery_upgrade_cost
				value = event_target:asteroid_artillery_location.asteroid_artillery_atkspeed_cost
			}
			add_resource = { #subtract the alloys based on that variable
				alloys = -1
				mult = asteroid_artillery_upgrade_cost
			}
			event_target:asteroid_artillery_location = {
				change_variable = {
					which = asteroid_artillery_atkspeed
					value = 1
				}
				change_variable = {
					which = asteroid_artillery_atkspeed_perc
					value = 20
				}
				change_variable = {
					which = asteroid_artillery_points_used
					value = 1
				}
				multiply_variable = { #increase cost
					which = asteroid_artillery_atkspeed_cost
					value = 1.3
				}
				round_variable = asteroid_artillery_atkspeed_cost #Round it to avoid excessive decimal buildup
			}
			event_target:asteroid_artillery_ship_config_target = {
				if = {
					limit = { has_modifier = giga_asteroid_artillery_speed }
					remove_modifier = giga_asteroid_artillery_speed
				}
				set_variable = {
					which = asteroid_artillery_atkspeed
					value = event_target:asteroid_artillery_location.asteroid_artillery_atkspeed
				}
				add_modifier = {
					modifier = giga_asteroid_artillery_speed
					multiplier = asteroid_artillery_atkspeed
				}
			}
			country_event = { id = giga_artillery.1000 }
		}
	}

	option = { #RANGE
		name = "giga_artillery.1000.e"
		allow = {
			custom_tooltip = {
				fail_text = "not_enough_artillery_points"
				hidden_trigger = { #more than 0 upgrade points left
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = asteroid_artillery_points_current
							value > 0
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = {
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = giga_current_alloy_stockpile
							value > asteroid_artillery_range_cost
						}
					}
				}
			}
		}
		hidden_effect = {
			set_variable = { #export alloy cost to a variable in the country
				which = asteroid_artillery_upgrade_cost
				value = event_target:asteroid_artillery_location.asteroid_artillery_range_cost
			}
			add_resource = { #subtract the alloys based on that variable
				alloys = -1
				mult = asteroid_artillery_upgrade_cost
			}
			event_target:asteroid_artillery_location = {
				change_variable = {
					which = asteroid_artillery_range
					value = 1
				}
				change_variable = {
					which = asteroid_artillery_range_perc
					value = 25
				}
				change_variable = {
					which = asteroid_artillery_points_used
					value = 1
				}
				multiply_variable = { #increase cost
					which = asteroid_artillery_range_cost
					value = 1.3
				}
				round_variable = asteroid_artillery_range_cost #Round it to avoid excessive decimal buildup
			}
			event_target:asteroid_artillery_ship_config_target = {
				if = {
					limit = { has_modifier = giga_asteroid_artillery_range }
					remove_modifier = giga_asteroid_artillery_range
				}
				set_variable = {
					which = asteroid_artillery_range
					value = event_target:asteroid_artillery_location.asteroid_artillery_range
				}
				add_modifier = {
					modifier = giga_asteroid_artillery_range
					multiplier = asteroid_artillery_range
				}
			}
			country_event = { id = giga_artillery.1000 }
		}
	}

	option = { #TRACK
		name = "giga_artillery.1000.g"
		allow = {
			custom_tooltip = {
				fail_text = "not_enough_artillery_points"
				hidden_trigger = { #more than 0 upgrade points left
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = asteroid_artillery_points_current
							value > 0
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = {
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = giga_current_alloy_stockpile
							value > asteroid_artillery_tracking_cost
						}
					}
				}
			}
		}
		hidden_effect = {
			set_variable = { #export alloy cost to a variable in the country
				which = asteroid_artillery_upgrade_cost
				value = event_target:asteroid_artillery_location.asteroid_artillery_tracking_cost
			}
			add_resource = { #subtract the alloys based on that variable
				alloys = -1
				mult = asteroid_artillery_upgrade_cost
			}
			event_target:asteroid_artillery_location = {
				change_variable = {
					which = asteroid_artillery_tracking
					value = 1
				}
				change_variable = {
					which = asteroid_artillery_tracking_perc
					value = 30
				}
				change_variable = {
					which = asteroid_artillery_points_used
					value = 1
				}
				multiply_variable = { #increase cost
					which = asteroid_artillery_tracking_cost
					value = 1.3
				}
				round_variable = asteroid_artillery_tracking_cost #Round it to avoid excessive decimal buildup
			}
			event_target:asteroid_artillery_ship_config_target = {
				if = {
					limit = { has_modifier = giga_asteroid_artillery_tracking }
					remove_modifier = giga_asteroid_artillery_tracking
				}
				set_variable = {
					which = asteroid_artillery_tracking
					value = event_target:asteroid_artillery_location.asteroid_artillery_tracking
				}
				add_modifier = {
					modifier = giga_asteroid_artillery_tracking
					multiplier = asteroid_artillery_tracking
				}
			}
			country_event = { id = giga_artillery.1000 }
		}
	}


	option = { #REGEN
		name = "giga_artillery.1000.f"
		allow = {
			has_technology = giga_tech_asteroid_artillery_pen_shots
			custom_tooltip = {
				fail_text = "not_enough_artillery_points"
				hidden_trigger = { #more than 0 upgrade points left
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = asteroid_artillery_points_current
							value > 0
						}
					}
				}
			}
			custom_tooltip = { #check if enough alloys
				fail_text = "giga_not_enough_alloys"
				hidden_trigger = {
					event_target:asteroid_artillery_location = {
						check_variable = {
							which = giga_current_alloy_stockpile
							value > asteroid_artillery_pen_cost
						}
					}
				}
			}
		}
		hidden_effect = {
			set_variable = { #export alloy cost to a variable in the country
				which = asteroid_artillery_upgrade_cost
				value = event_target:asteroid_artillery_location.asteroid_artillery_pen_cost
			}
			add_resource = { #subtract the alloys based on that variable
				alloys = -1
				mult = asteroid_artillery_upgrade_cost
			}
			event_target:asteroid_artillery_location = {
				change_variable = {
					which = asteroid_artillery_pen
					value = 1
				}
				change_variable = {
					which = asteroid_artillery_pen_perc
					value = 1.5
				}
				change_variable = {
					which = asteroid_artillery_points_used
					value = 1
				}
				multiply_variable = { #increase cost
					which = asteroid_artillery_pen_cost
					value = 1.3
				}
				round_variable = asteroid_artillery_pen_cost #Round it to avoid excessive decimal buildup
			}
			event_target:asteroid_artillery_ship_config_target = {
				if = {
					limit = { has_modifier = giga_asteroid_artillery_pen }
					remove_modifier = giga_asteroid_artillery_pen
				}
				set_variable = {
					which = asteroid_artillery_pen
					value = event_target:asteroid_artillery_location.asteroid_artillery_pen
				}
				add_modifier = {
					modifier = giga_asteroid_artillery_pen
					multiplier = asteroid_artillery_pen
				}
			}
			country_event = { id = giga_artillery.1000 }
		}
	}

	option = { #Good, good.
		name = "giga_artillery.1000.a"
		hidden_effect = {
			remove_global_flag = upgrading_ast_art
		}
	}
}

#Disbanded
country_event = {
	id = giga_artillery.1001
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = {
			NOT = { has_fleet_flag = maginot_orbital_defence }
			is_ship_size = asteroid_artillery
		}
	}

	immediate = {
		from.solar_system = {
			random_system_planet = {
				limit = {
					has_planet_flag = has_giga_asteroid_id
					check_variable = {
						which = giga_asteroid_id
						value = ROOT.from.giga_asteroid_ship_id
					}
				}
				change_pc = pc_asteroid
				remove_planet_flag = asteroid_has_artillery
				solar_system = {
					random_system_megastructure = {
						limit = {
							planet = { is_same_value = PREVPREVPREV }
						}
						remove_megastructure = THIS
					}
				}
				giga_clear_has_mega_flag = yes
			}
		}
	}
}

#Destroyed
country_event = {
	id = giga_artillery.1002
	title = "giga_artillery.1002.name"
	desc = "giga_artillery.1002.desc"
	show_sound = event_structural_collapse
	location = event_target:ast_artillery_destroyed_system
	picture = GFX_evt_large_explosion

	is_triggered_only = yes

	trigger = {
		fromfrom = {
			NOT = { has_fleet_flag = maginot_orbital_defence }
			is_ship_size = asteroid_artillery
		}
	}

	immediate = {
		fromfrom.solar_system = {
			save_global_event_target_as = ast_artillery_destroyed_system
			random_system_planet = {
				limit = {
					has_planet_flag = has_giga_asteroid_id
					check_variable = {
						which = giga_asteroid_id
						value = ROOT.fromfrom.giga_asteroid_ship_id
					}
				}
				remove_planet_flag = asteroid_has_artillery
				solar_system = {
					random_system_megastructure = {
						limit = {
							check_variable = {
								which = giga_asteroid_megastructure_id
								value = ROOT.fromfrom.giga_asteroid_ship_id
							}
						}
						solar_system = {
							spawn_megastructure = {
								type = "asteroid_artillery_ruined"
								planet = PREV.planet
								owner = root
							}
						}
						remove_megastructure = THIS
					}
				}
			}
		}
	}

	option = { #Good, good.
		name = "giga_artillery.1002.a"
	}
}

#Repaired
country_event = {
	id = giga_artillery.1003
	title = "giga_artillery.1003.name"
	desc = "giga_artillery.1003.desc"
	hide_window = no
	is_triggered_only = yes
	show_sound = event_dyson_sphere_build_complete
	location = event_target:giga_system
	picture = GFX_evt_asteroid_artillery

	option = { #Good, good.
		name = "giga_artillery.1000.a"
	}
}

#Site built
country_event = {
	id = giga_artillery.1004
	title = "giga_artillery.1004.name"
	desc = "giga_artillery.1004.desc"
	hide_window = no
	is_triggered_only = yes
	show_sound = event_dyson_sphere_build_start
	location = event_target:giga_system
	picture = GFX_evt_asteroid_artillery

	option = { #Good, good.
		name = "giga_artillery.1004.a"
	}
}

#Artillery built
country_event = {
	id = giga_artillery.1005
	title = "giga_artillery.1005.name"
	desc = "giga_artillery.1005.desc"
	hide_window = no
	is_triggered_only = yes
	show_sound = event_dyson_sphere_build_complete
	location = event_target:giga_system
	picture = GFX_evt_asteroid_artillery

	option = { #Good, good.
		name = "giga_artillery.1005.a"
	}
}

#Better Tech I
country_event = {
	id = giga_artillery.2000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		last_increased_tech = "giga_tech_asteroid_artillery_damage_upgrade"
	}

	immediate = {
		change_variable = {
			which = asteroid_artillery_points_max
			value = 3
		}
		every_owned_ship = {
			limit = { 
				is_ship_size = asteroid_artillery
				NOT = { has_modifier = giga_asteroid_artillery_dmg_upgrade } 
			}
			add_modifier = {
				modifier = giga_asteroid_artillery_dmg_upgrade
				days = -1
			}
		}
	}
}

#Better Shields I
country_event = {
	id = giga_artillery.2001
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		last_increased_tech = "giga_tech_asteroid_artillery_health_upgrade"
	}

	immediate = {
		change_variable = {
			which = asteroid_artillery_points_max
			value = 2
		}
		every_owned_ship = {
			limit = { 
				is_ship_size = asteroid_artillery
				NOT = { has_modifier = giga_asteroid_artillery_health_upgrade } 
			}
			add_modifier = {
				modifier = giga_asteroid_artillery_health_upgrade
				days = -1
			}
		}
	}
}

#Planetcraft
country_event = {
	id = giga_artillery.2002
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		last_increased_tech = "giga_tech_asteroid_artillery_planetcraft_upgrade"
	}

	immediate = {
		change_variable = {
			which = asteroid_artillery_points_max
			value = 3
		}
		every_owned_ship = {
			limit = { 
				is_ship_size = asteroid_artillery
				NOT = { has_modifier = giga_asteroid_artillery_planetcraft_upgrade } 
			}
			add_modifier = {
				modifier = giga_asteroid_artillery_planetcraft_upgrade
				days = -1
			}
		}
	}
}

#Repeatable
country_event = {
	id = giga_artillery.2003
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		last_increased_tech = "giga_tech_repeatable_asteroid_artillery_upgrade"
	}

	immediate = {
		change_variable = {
			which = asteroid_artillery_points_max
			value = 1
		}
	}
}

#Monthly event for stuff
country_event = {
	id = giga_artillery.4000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_megastructure = {
			OR = {
				is_megastructure_type = asteroid_artillery_0
				is_megastructure_type = asteroid_artillery_1
				is_megastructure_type = asteroid_artillery_ruined
				is_megastructure_type = asteroid_artillery_config
			}
		}
	}

	immediate = {
		set_variable = {
			which = giga_current_asteroid_artillery
			value = 0
		}
		every_owned_megastructure = {
			limit = {
				OR = {
					is_megastructure_type = asteroid_artillery_0
					is_megastructure_type = asteroid_artillery_1
					is_megastructure_type = asteroid_artillery_ruined
					is_megastructure_type = asteroid_artillery_config
				}
			}
			ROOT = {
				change_variable = {
					which = giga_current_asteroid_artillery
					value = 1
				}
				if = {
					limit = {
						is_ai = yes
					}
					if = {
						limit = { has_modifier = giga_asteroid_artillery_ai_upkeep_negates }
						remove_modifier = giga_asteroid_artillery_ai_upkeep_negates
					}
					if = {
						limit = {
							check_variable = {
								which = giga_current_asteroid_artillery
								value > 0
							}
						}
						add_modifier = {
							modifier = giga_asteroid_artillery_ai_upkeep_negates
							days = -1
							multiplier = giga_current_asteroid_artillery
						}
					}
				}
			}
		}
	}
}

#Yearly event to give ownership of asteroid artilleries
event = {
	id = giga_artillery.4001
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_megastructure = {
			limit = {
				OR = {
					is_megastructure_type = asteroid_artillery_0
					is_megastructure_type = asteroid_artillery_1
					is_megastructure_type = asteroid_artillery_ruined
					is_megastructure_type = asteroid_artillery_config
				}
				exists = owner
				owner = { #owner is not the space owner
					NOT = {
						is_same_value = PREV.planet.solar_system.space_owner
					}
				}
			}
			set_owner = planet.solar_system.space_owner
		}
	}
}

#Yearly event to give AIs some asteroid artilleries
event = {
	id = giga_artillery.4002
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = {
			has_technology = giga_tech_asteroid_artillery
			is_country_type = default
		}
		NOT = { has_global_flag =  asteroid_artillery_disabled }
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = default
				has_technology = giga_tech_asteroid_artillery
			}
			save_global_event_target_as = ast_art_tech_source #will spread the tech
		}
		if = {
			limit = {
				any_country = {
					is_country_type = default
					is_ai = yes
					NOT = { has_technology = giga_tech_asteroid_artillery }
					OR = {
						relative_power = {
							who = event_target:ast_art_tech_source
							category = technology
							value = equivalent
						}
						relative_power = {
							who = event_target:ast_art_tech_source
							category = technology
							value = superior
						}
						relative_power = {
							who = event_target:ast_art_tech_source
							category = technology
							value = overwhelming
						}
						relative_power = {
							who = event_target:ast_art_tech_source
							category = technology
							value = inferior
						}
					}
				}
			}
			random_country = {
				limit = {
					is_country_type = default
					is_ai = yes
					NOT = { has_technology = giga_tech_asteroid_artillery }
					OR = {
						relative_power = {
							who = event_target:ast_art_tech_source
							category = technology
							value = equivalent
						}
						relative_power = {
							who = event_target:ast_art_tech_source
							category = technology
							value = superior
						}
						relative_power = {
							who = event_target:ast_art_tech_source
							category = technology
							value = overwhelming
						}
						relative_power = {
							who = event_target:ast_art_tech_source
							category = technology
							value = inferior
						}
					}
				}
				give_technology = {
					tech = giga_tech_asteroid_artillery
				}
			}
		}
	}
}

#Monthly event to clear empty artilleries if their country got killed
event = {
	id = giga_artillery.4003
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_megastructure = {
			limit = {
				is_megastructure_type = asteroid_artillery_1
				planet = {
					solar_system = {
						NOT = {
							any_fleet_in_system = {
								check_variable = {
									which = giga_asteroid_ship_id
									value = PREVPREVPREV.giga_asteroid_megastructure_id
								}
							}
						}
					}
				}
			}
			planet = {
				remove_planet_flag = asteroid_has_artillery
				giga_clear_has_mega_flag = { MEGA = prev }
				change_pc = pc_asteroid
			}
			remove_megastructure = THIS
		}
	}
}


# 		make AIs build them
# 		random_country = {
# 			limit = {
# 				has_technology = giga_tech_asteroid_artillery
# 				is_ai = yes
# 				is_country_type = default
# 				NOT = {
# 					any_owned_megastructure = { is_megastructure_type = asteroid_artillery_0 }
# 				}
# 				check_variable = {
# 					which = giga_current_asteroid_artillery
# 					value < 5
# 				}
# 			}
# 			clear_global_event_target = ai_ast_art_site
# 			select_good_planet_for_ai_ast_art = yes
# 			if = {
# 				limit = {
# 					exists = event_target:ai_ast_art_site
# 				}
# 				event_target:ai_ast_art_site = {
# 					solar_system = {
# 						spawn_megastructure = {
# 							type = asteroid_artillery_0
# 							planet = event_target:ai_ast_art_site
# 							owner = space_owner
# 						}
# 						random_system_megastructure = {
# 							limit = { is_megastructure_type = asteroid_artillery_0 }
# 							upgrade_megastructure_to = asteroid_artillery_1
# 						}
# 					}
# 				}
# 			}
# 		}
# 	}
# }