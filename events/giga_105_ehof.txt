namespace = ehof_megastructure
#########################################################################################################
############################################ EHOF On Actions ############################################
#########################################################################################################
# Ship is built in the EHOF system [on_ship_built]
ship_event = {
	id = ehof_megastructure.001
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = controller
		exists = solar_system
		controller = {
			is_same_value = solar_system.starbase.controller
		}
		solar_system = {
			has_star_flag = ehof_megastructure_system@root.controller
		}
		fleet = {
			can_use_ehof = yes
			is_mobile = yes
		}
	}
	immediate = {
		if = {
			limit = {
				NOT = {
					has_ship_flag = ehof_already_counted
				}
			}
			if = {
				limit = {
					ehof_is_science_ship = yes
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_science
						value = 1
					}
				}
			}
			if = {
				limit = {
					ehof_is_construction_ship = yes
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_constructor
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_class = shipclass_military
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_military
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_class = shipclass_military_special
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_colossus
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_size = juggernaut
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_juggernaut
						value = 1
					}
				}
			}
			set_ship_flag = ehof_already_counted
		}
		if = {
			limit = {
				fleet = {
					NOT = {
						has_fleet_flag = recently_triggered_ehof
					}
				}
				controller = {
					NOR = {
						has_country_flag = ehof_is_upgrading
						has_country_flag = ehof_can_activate
					}
					OR = {
						check_variable = {
							which = ehof_pre_flight_science
							value > 0
						}
						check_variable = {
							which = ehof_pre_flight_constructor
							value > 0
						}
						check_variable = {
							which = ehof_pre_flight_military
							value > 0
						}
						check_variable = {
							which = ehof_pre_flight_colossus
							value > 0
						}
						check_variable = {
							which = ehof_pre_flight_juggernaut
							value > 0
						}
					}
				}
			}
			fleet = {
				set_timed_fleet_flag = {
					flag = recently_triggered_ehof
					days = 1
				}				# stop triggering ehof twice
				controller = {
					country_event = {
						id = ehof_megastructure.009
						days = 2
					}
				}				# Check EHOF state
			}
		}
	}
}

# Fleet enters a system [on_entering_system_fleet]
fleet_event = {
	id = ehof_megastructure.002
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = controller
		exists = solar_system
		controller = {
			is_same_value = solar_system.starbase.controller
		}
		solar_system = {
			has_star_flag = ehof_megastructure_system@root.controller
		}
		can_use_ehof = yes
		is_mobile = yes
	}
	immediate = {
		every_owned_ship = {
			limit = {
				NOT = {
					has_ship_flag = ehof_already_counted
				}
			}
			set_ship_flag = ehof_already_counted
			if = {
				limit = {
					ehof_is_science_ship = yes
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_science
						value = 1
					}
				}
			}
			if = {
				limit = {
					ehof_is_construction_ship = yes
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_constructor
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_class = shipclass_military
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_military
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_class = shipclass_transport
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_military
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_class = shipclass_military_special
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_colossus
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_size = juggernaut
				}
				controller = {
					change_variable = {
						which = ehof_pre_flight_juggernaut
						value = 1
					}
				}
			}
		}
		if = {
			limit = {
				NOT = {
					has_fleet_flag = recently_triggered_ehof
				}
				controller = {
					NOR = {
						has_country_flag = ehof_is_upgrading
						has_country_flag = ehof_can_activate
					}
					OR = {
						check_variable = {
							which = ehof_pre_flight_science
							value > 0
						}
						check_variable = {
							which = ehof_pre_flight_constructor
							value > 0
						}
						check_variable = {
							which = ehof_pre_flight_military
							value > 0
						}
						check_variable = {
							which = ehof_pre_flight_colossus
							value > 0
						}
						check_variable = {
							which = ehof_pre_flight_juggernaut
							value > 0
						}
					}
				}
			}
			set_timed_fleet_flag = {
				flag = recently_triggered_ehof
				days = 1
			}			# stop triggering ehof twice
			controller = {
				country_event = {
					id = ehof_megastructure.009
					days = 2
				}
			}			# Check EHOF state
		}
	}
}

# Fleets leave EHOF system [on_entering_system_fleet]
fleet_event = {
	# TODO :: make check performant
	id = ehof_megastructure.015
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_owned_ship = {
			has_ship_flag = ehof_already_counted
		}
		exists = solar_system
		solar_system = {
			NOT = {
				has_star_flag = ehof_megastructure_system@root.controller
			}
		}
	}
	immediate = {
		every_owned_ship = {
			limit = {
				has_ship_flag = ehof_already_counted
			}
			remove_ship_flag = ehof_already_counted
			if = {
				limit = {
					ehof_is_science_ship = yes
				}
				controller = {
					subtract_variable = {
						which = ehof_pre_flight_science
						value = 1
					}
				}
			}
			if = {
				limit = {
					ehof_is_construction_ship = yes
				}
				controller = {
					subtract_variable = {
						which = ehof_pre_flight_constructor
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_class = shipclass_military
				}
				controller = {
					subtract_variable = {
						which = ehof_pre_flight_military
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_class = shipclass_transport
				}
				controller = {
					subtract_variable = {
						which = ehof_pre_flight_military
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_class = shipclass_military_special
				}
				controller = {
					subtract_variable = {
						which = ehof_pre_flight_colossus
						value = 1
					}
				}
			}
			if = {
				limit = {
					is_ship_size = juggernaut
				}
				controller = {
					subtract_variable = {
						which = ehof_pre_flight_juggernaut
						value = 1
					}
				}
			}
		}
		controller = {
			if = {
				limit = {
					check_variable = {
						which = ehof_pre_flight_science
						value = 0
					}
					check_variable = {
						which = ehof_pre_flight_constructor
						value = 0
					}
					check_variable = {
						which = ehof_pre_flight_military
						value = 0
					}
					check_variable = {
						which = ehof_pre_flight_colossus
						value = 0
					}
					check_variable = {
						which = ehof_pre_flight_juggernaut
						value = 0
					}
				}
				country_event = {
					id = ehof_megastructure.010
					days = 2
				}				# Check EHOF state
			}
		}
	}
}

# if player lost EHOF System
# From = system
# FromFrom = country (new owner)
# This = country (previous owner)
country_event = {
	id = ehof_megastructure.006
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		from = {
			any_system_megastructure = {
				is_any_ehof = yes
			}
		}
	}
	immediate = {
		log = system_changed_owner
		# switch star flags
		from = {
			remove_star_flag = ehof_megastructure_system@root
			set_star_flag = ehof_megastructure_system@fromfrom
		}
		# New owner of system
		if = {
			limit = { exists = fromfrom }
			fromfrom = {
				# set variable for ui
				set_variable = {
					which = ehof_phase
					value = prevprev.ehof_phase
				}
				# give new player the ehof tech
				if = {
					limit = {
						check_variable = {
							which = ehof_phase
							value = 1
						}
					}
					give_technology = {
						tech = "tech_ehof_phase_01"
						message = yes
					}
					log = tech1
				}
				else_if = {
					limit = {
						check_variable = {
							which = ehof_phase
							value = 2
						}
					}
					give_technology = {
						tech = "tech_ehof_phase_02"
						message = yes
					}
					log = tech2
				}
				else_if = {
					limit = {
						check_variable = {
							which = ehof_phase
							value = 3
						}
					}
					give_technology = {
						tech = "tech_ehof_phase_03"
						message = yes
					}
					log = tech3
				}
				else_if = {
					limit = {
						check_variable = {
							which = ehof_phase
							value = 4
						}
					}
					give_technology = {
						tech = "tech_ehof_phase_04"
						message = yes
					}
					log = tech4
				}
				country_event = {
					id = ehof_megastructure.201
					days = 10
				}
			}
		}
		# remove ui for Previous owner of system
		set_variable = {
			which = ehof_phase
			value = 0
		}
	}
}

# From = system
# FromFrom = country (previous owner)
# This = country (new owner)
country_event = {
	id = ehof_megastructure.012
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		from = {
			any_system_megastructure = {
				is_any_ehof = yes
			}
		}
		NOT = { exists = fromfrom }
	}
	immediate = {
		log = system_changed_owner
		# switch star flags
		from = {
			set_star_flag = ehof_megastructure_system@root
			random_system_megastructure = {#Find out which EHOF it is
				limit = { is_any_ehof = yes }
				switch = {
					trigger = has_megastructure_flag
					ehof_phase_00 = { #Delete construction site
						remove_megastructure = this
					}
					ehof_phase_01 = {#Gives the appropriate tech and variable for the EHOF
						root = {
							set_variable = {
								which = ehof_phase
								value = 1
							}
							give_technology = {
								tech = "tech_ehof_phase_01"
								message = yes
							}
							log = tech1
						}
					}
					ehof_phase_02 = {
						root = {
							set_variable = {
								which = ehof_phase
								value = 2
							}
							give_technology = {
								tech = "tech_ehof_phase_02"
								message = yes
							}
							log = tech2
						}

					}
					ehof_phase_03 = {
						root = {
							set_variable = {
								which = ehof_phase
								value = 3
							}
							give_technology = {
								tech = "tech_ehof_phase_03"
								message = yes
							}
							log = tech3
						}
					}
					ehof_phase_04 = {
						root = {
							set_variable = {
								which = ehof_phase
								value = 4
							}
							give_technology = {
								tech = "tech_ehof_phase_04"
								message = yes
							}
							log = tech4
						}
					}
				}
			}
		}
		country_event = {
			id = ehof_megastructure.201
			days = 10
		}
	}
}

country_event = {
	id = ehof_megastructure.003
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		ehof_default_country = yes
		NOR = {
			has_country_flag = ehof_activated
			has_country_flag = ehof_activating
		}
		OR = {
			count_owned_megastructure = { #More than one Ehof
				limit = {
					is_any_ehof = yes
				}
				count > 1
			}
			AND = { # No Ehof
				NOT = { any_owned_megastructure = { giga_is_any_ehof_non_flag = yes } }
				NOT = {
					check_variable = {
						which = ehof_phase
						value = 0
					}
				}
			}
			AND = { # 1 Ehof but inactive 
				count_owned_megastructure = {
					limit = {
						is_any_ehof = yes
						OR = {
							has_megastructure_flag = ehof_phase_01_decommissioned
							has_megastructure_flag = ehof_phase_02_decommissioned
							has_megastructure_flag = ehof_phase_03_decommissioned
							has_megastructure_flag = ehof_phase_04_decommissioned
						}
					}
					count = 1
				}
			}
			AND = { #1 ehof AND active
				count_owned_megastructure = {
					limit = {
						is_an_active_ehof = yes
					}
					count = 1
				}#This trigger would never have worked previously since its checking for all EHOFs of any given phase at once - Bread
				OR = {
					AND = {
						has_megastructure = ehof_megastructure_phase1
						NOT = {
							check_variable = {
								which = ehof_phase
								value = 1
							}
						}
					}
					AND = {
						has_megastructure = ehof_megastructure_phase2
						NOT = {
							check_variable = {
								which = ehof_phase
								value = 2
							}
						}
					}
					AND = {
						has_megastructure = ehof_megastructure_phase3
						NOT = {
							check_variable = {
								which = ehof_phase
								value = 3
							}
						}
					}
					AND = {
						has_megastructure = ehof_megastructure_phase4
						NOT = {
							check_variable = {
								which = ehof_phase
								value = 4
							}
						}
					}
				}
			}
		}
	}
	immediate = {
		if = { # We dont have any ehof
			limit = {
				giga_has_any_ehof = no
				NOT = {
					check_variable = {
						which = ehof_phase
						value = 0
					}
				}
			}
			set_variable = {
				which = ehof_phase
				value = 0
			}
			giga_clear_ehof_country_flags = yes
		}
		else_if = { # We have an ehof, but it's inactive
			limit = {
				count_owned_megastructure = {
					limit = {
						is_any_ehof = yes
						has_megastructure_flag = ehof_phase_01_decommissioned
						has_megastructure_flag = ehof_phase_02_decommissioned
						has_megastructure_flag = ehof_phase_03_decommissioned
						has_megastructure_flag = ehof_phase_04_decommissioned
					}
					count = 1
				}
			}
			giga_clear_ehof_country_flags = yes
			giga_activate_an_ehof = yes
		}
		# We have an active ehof, but dont have the correct flags
		else_if = {
			limit = {
				count_owned_megastructure = {
					limit = {
						is_an_active_ehof = yes
					}
					count = 1
				}
				OR = {
					AND = {
						has_megastructure = ehof_megastructure_phase1
						NOT = {
							check_variable = {
								which = ehof_phase
								value = 1
							}
						}
					}
					AND = {
						has_megastructure = ehof_megastructure_phase2
						NOT = {
							check_variable = {
								which = ehof_phase
								value = 2
							}
						}
					}
					AND = {
						has_megastructure = ehof_megastructure_phase3
						NOT = {
							check_variable = {
								which = ehof_phase
								value = 3
							}
						}
					}
					AND = {
						has_megastructure = ehof_megastructure_phase4
						NOT = {
							check_variable = {
								which = ehof_phase
								value = 4
							}
						}
					}
				}
			}
			remove_country_flag = ehof_destination_picked
			remove_country_flag = ehof_travel_diplomacy
			remove_country_flag = ehof_can_activate
			remove_country_flag = ehof_can_deactivate
			remove_country_flag = ehof_is_upgrading
			remove_country_flag = ehof_on_cooldown
			random_system_within_border = {
				limit = {
					giga_has_an_active_ehof = yes
				}
				set_star_flag = ehof_megastructure_system@root
			}
			if = {
				limit = {
					has_megastructure = ehof_megastructure_phase1
					NOT = {
						check_variable = {
							which = ehof_phase
							value = 1
						}
					}
				}
				set_variable = {
					which = ehof_phase
					value = 1
				}
			}
			else_if = {
				limit = {
					has_megastructure = ehof_megastructure_phase2
					NOT = {
						check_variable = {
							which = ehof_phase
							value = 2
						}
					}
				}
				set_variable = {
					which = ehof_phase
					value = 2
				}
			}
			else_if = {
				limit = {
					has_megastructure = ehof_megastructure_phase3
					NOT = {
						check_variable = {
							which = ehof_phase
							value = 3
						}
					}
				}
				set_variable = {
					which = ehof_phase
					value = 3
				}
			}
			else_if = {
				limit = {
					has_megastructure = ehof_megastructure_phase4
					NOT = {
						check_variable = {
							which = ehof_phase
							value = 4
						}
					}
				}
				set_variable = {
					which = ehof_phase
					value = 4
				}
			}
		}
		# We have more than 1 ehof
		else_if = {
			limit = {
				count_owned_megastructure = {
					limit = {
						is_any_ehof = yes
					}
					count > 1
				}
			}
			# There is a better ehof available to use
			if = {
				limit = {
					NOT = {
						has_country_flag = ehof_asked_to_move
					}
					OR = {
						AND = {
							check_variable = {
								which = ehof_phase
								value = 0
							}
							any_owned_megastructure = {
								OR = {
									has_megastructure_flag = ehof_phase_01
									has_megastructure_flag = ehof_phase_01_decommissioned
									has_megastructure_flag = ehof_phase_02
									has_megastructure_flag = ehof_phase_02_decommissioned
									has_megastructure_flag = ehof_phase_03
									has_megastructure_flag = ehof_phase_03_decommissioned
									has_megastructure_flag = ehof_phase_04
									has_megastructure_flag = ehof_phase_04_decommissioned
								}
							}
						}
						AND = {
							check_variable = {
								which = ehof_phase
								value = 1
							}
							any_owned_megastructure = {
								OR = {
									has_megastructure_flag = ehof_phase_02
									has_megastructure_flag = ehof_phase_02_decommissioned
									has_megastructure_flag = ehof_phase_03
									has_megastructure_flag = ehof_phase_03_decommissioned
									has_megastructure_flag = ehof_phase_04
									has_megastructure_flag = ehof_phase_04_decommissioned
								}
							}
						}
						AND = {
							check_variable = {
								which = ehof_phase
								value = 2
							}
							any_owned_megastructure = {
								OR = {
									has_megastructure_flag = ehof_phase_03
									has_megastructure_flag = ehof_phase_03_decommissioned
									has_megastructure_flag = ehof_phase_04
									has_megastructure_flag = ehof_phase_04_decommissioned
								}
							}
						}
						AND = {
							check_variable = {
								which = ehof_phase
								value = 3
							}
							any_owned_megastructure = {
								OR = {
									has_megastructure_flag = ehof_phase_04
									has_megastructure_flag = ehof_phase_04_decommissioned
								}
							}
						}
					}
				}
				country_event = {
					id = ehof_megastructure.008
				}
			}
			# There is not any ehof that we own that is better than our active ehof
			else = {
				random_owned_megastructure = {
					limit = {
						is_an_active_ehof = yes
						exists = solar_system
						solar_system = {
							has_star_flag = ehof_megastructure_system@root
						}
					}
					root = {
						every_owned_megastructure = {
							limit = {
								is_an_active_ehof = yes
								NOT = {
									is_same_value = prevprev
								}
							}
							solar_system = {
								giga_ehof_set_decommissioned = yes
							}
						}
					}
				}
			}
		}
		country_event = {
			id = ehof_megastructure.009
		}		# Check EHOF State.
	}
}

# There is a better ehof available to use
country_event = {
	id = ehof_megastructure.008
	title = "ehof_ehof"
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "ehof_mainui_window"
	picture_event_data = {
		portrait = root
		graphical_culture = root
		room = "ehof_room"
	}
	location = event_target:ehof_megastructure_system
	desc = "ehof_megastructure.008.desc"
	option = {
		# Keep current EHOF, never ask again
		custom_gui = "ehof_mainui_option_big"
		name = "ehof_megastructure.008.a"
		hidden_effect = {
			set_country_flag = ehof_asked_to_move
			random_owned_megastructure = {
				limit = {
					is_an_active_ehof = yes
					exists = solar_system
					solar_system = {
						has_star_flag = ehof_megastructure_system@root
					}
				}
				root = {
					every_owned_megastructure = {
						limit = {
							is_an_active_ehof = yes
							NOT = {
								is_same_value = prevprev
							}
						}
						solar_system = {
							giga_ehof_set_decommissioned = yes
						}
					}
				}
			}
		}
	}
	option = {
		# Swap to better ehof
		custom_gui = "ehof_mainui_option_big"
		name = "ehof_megastructure.008.b"
		hidden_effect = {
			giga_decomission_all_ehofs = yes
			giga_activate_an_ehof = yes
		}
	}
}

# Toggle mod flags (cwtools error check)
country_event = {
	id = ehof_megastructure.004
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = {
			has_global_flag = ehof_compatibility
		}
	}
	immediate = {
		set_global_flag = ehof_compatibility
		if = {
			limit = {
				NOT = {
					has_global_flag = has_real_space_mod
				}
			}
			set_global_flag = has_real_space_mod
			remove_global_flag = has_real_space_mod
		}
		if = {
			limit = {
				NOT = {
					has_global_flag = planetarydiversity
				}
			}
			set_global_flag = planetarydiversity
			remove_global_flag = planetarydiversity
		}
		if = {
			limit = {
				NOT = {
					has_global_flag = acot_activated
				}
			}
			set_global_flag = acot_activated
			remove_global_flag = acot_activated
		}
		if = {
			limit = {
				NOT = {
					has_global_flag = has_guillis_planet_modifiers_mod
				}
			}
			set_global_flag = has_guillis_planet_modifiers_mod
			remove_global_flag = has_guillis_planet_modifiers_mod
		}
	}
}

# EHOF precursor
country_event = {
	id = ehof_megastructure.005
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = {
			has_country_flag = ehof_precursor_spawned
		}
		OR = {
			is_ai = no
			any_country = {
				is_country_type = global_event
				check_variable = {
					which = chk_precursor_cap
					value < giga_ehof_ai_cap
				}
			}
		}
	} # This is the hieroglyphics spawn code
	immediate = {
		save_event_target_as = rl_digsite_finder
		if = {
			limit = {
				any_planet_within_border = {
					solar_system = {
						NOR = {
							has_star_flag = empire_home_system
							is_capital_system = yes
						}
					}
					is_artificial = no
					habitable_planet = no
					is_colony = no
					is_star = no
					is_asteroid = no
					has_anomaly = no
					NOR = {
						exists = archaeological_site
						giga_is_gas_giant = yes
					}
				}
			}
			random_planet_within_border = {
				limit = {
					solar_system = {
						NOR = {
							has_star_flag = empire_home_system
							is_capital_system = yes
						}
					}
					is_artificial = no
					is_colonizable = no
					is_star = no
					is_asteroid = no
					has_anomaly = no
					NOR = {
						exists = archaeological_site
						giga_is_gas_giant = yes
					}
				}
				ehof_giga_new_create_rl_digsite = {
					digsite = ehof_precursor
					digsite_flag = ehof_precursor
					digsite_completion_flag = ehof_chain_begins_complete
				}
				# create_archaeological_site = ehof_precursor
				# set_planet_flag = ehof_precursor@root
				root = {
					set_country_flag = ehof_precursor_spawned
					if = {
						limit = {
							is_ai = yes
						}
						random_country = {
							limit = {
								is_country_type = global_event
							}
							change_variable = {
								which = chk_precursor_cap
								value = 1
							}
						}
					}
				}
			}
		}
		else = {
			country_event = {
				id = ehof_megastructure.005
				days = 30
			}
		}		# Try again in a month
	}
}

# Stage 1
fleet_event = {
	id = ehof_megastructure.0051
	title = "ehof_megastructure.0051.name"
	desc = "ehof_megastructure.0051.desc"
	picture = GFX_evt_barren_dig_site
	show_sound = event_dig_site
	location = from
	archaeology = yes
	is_triggered_only = yes
	immediate = {
		from = {
			set_site_progress_locked = yes
		}
	}
	after = {
		from = {
			set_site_progress_locked = no
		}
	}
	option = {
		default_hide_option = yes
		name = CURIOUS
		small_artifact_reward = yes
	}
}

# Stage 2
fleet_event = {
	id = ehof_megastructure.0052
	title = "ehof_megastructure.0052.name"
	desc = "ehof_megastructure.0052.desc"
	picture = GFX_evt_landing_ship
	show_sound = event_dig_site
	location = from
	archaeology = yes
	is_triggered_only = yes
	immediate = {
		from = {
			set_site_progress_locked = yes
		}
	}
	after = {
		from = {
			set_site_progress_locked = no
		}
	}
	option = {
		default_hide_option = yes
		name = CURIOUS
		small_artifact_reward = yes
	}
}

# Stage 3
fleet_event = {
	id = ehof_megastructure.0053
	title = "ehof_megastructure.0053.name"
	desc = "ehof_megastructure.0053.desc"
	picture = GFX_evt_atmospheric_flight
	show_sound = event_dig_site
	location = from
	archaeology = yes
	is_triggered_only = yes
	immediate = {
		from = {
			set_site_progress_locked = yes
		}
	}
	after = {
		from = {
			set_site_progress_locked = no
		}
	}
	option = {
		default_hide_option = yes
		name = CURIOUS
		small_artifact_reward = yes
	}
}

# Stage 4
fleet_event = {
	id = ehof_megastructure.00531
	title = "ehof_megastructure.00531.name"
	desc = "ehof_megastructure.00531.desc"
	picture = GFX_evt_orange_bolt
	show_sound = event_dig_site
	location = from
	archaeology = yes
	is_triggered_only = yes
	after = {
		from = {
			set_site_progress_locked = no
		}
	}
	immediate = {
		owner = {
			set_country_flag = ehof_chain_begins_complete
		}
		from = {
			set_site_progress_locked = yes
		}
		fromfrom.planet = {
			if = {
				limit = { giga_is_uninhabitable = yes} #precaution if it somehow ends up where it shouldn't
				change_pc = pc_broken
			}
		}
		if = {
			limit = {
				NOT = {
					invoke_special_ehof_chain_beginning_spawning = {
						flag = special_ehof_beginning_spawn_initializers
					}
				}
			}
			owner.capital_scope.solar_system = {
				random_list = {
					75 = {
						spawn_system = {
							initializer = "special_init_01"
							min_distance = 10
							max_distance = 40
							max_jumps = 0
						}
						last_created_system = {
							# Add extra hyperlanes
							# to core if core origin
							if = {
								limit = {
									root.owner.capital_scope.solar_system = {
										giga_is_core_system = yes
									}
								}
								random_list = {
									1 = {
										while = {
											count = 1
											giga_galactic_core_generate_hyperlane = yes
										}
									}
									1 = {
										while = {
											count = 2
											giga_galactic_core_generate_hyperlane = yes
										}
									}
								}
							}	
							else_if = {
								limit = {
									root.owner.capital_scope.solar_system = {
										has_star_flag = lcluster
									}
								}
								set_star_flag = lcluster #Needs to be made part of the Lcluster flag group so it doesn't get anymore unwanted friends
								random_list = {
									1 = {
										while = {
											count = 1
											random_neighbor_system_euclidean = {
												limit = {has_star_flag = lcluster }
												add_hyperlane_safe = { from = prev to = this } 
											}
										}
									}
									1 = {
										while = {
											count = 2
											random_neighbor_system_euclidean = {
												limit = {has_star_flag = lcluster }
												add_hyperlane_safe = { from = prev to = this } 
											}
										}
									}
								}
							}
							# else random non-core system
							else = {
								random_list = {
									1 = {
										while = {
											count = 1
											giga_generate_hyperlane = yes
										}
									}
									1 = {
										while = {
											count = 2
											giga_generate_hyperlane = yes
										}
									}
								}
							}
							giga_field_system_debris = yes
							set_star_flag = ehof_blackhole_@root.controller
							root.controller = {
								enable_special_project = {
									name = "EXPLORE_EHOF_PRECURSOR_NO_RUINED"
									location = prev.star
									owner = this
								}
							}
						}
					}
					25 = {
						spawn_system = {
							initializer = "ehof_unique_ruined"
							min_distance = 10
							max_distance = 40
							max_jumps = 0
						}
						last_created_system = {
							# Add extra hyperlanes
							# to core if core origin
							if = {
								limit = {
									root.owner.capital_scope.solar_system = {
										giga_is_core_system = yes
									}
								}
								random_list = {
									1 = {
										while = {
											count = 1
											giga_galactic_core_generate_hyperlane = yes
										}
									}
									1 = {
										while = {
											count = 2
											giga_galactic_core_generate_hyperlane = yes
										}
									}
								}
							}
							else_if = { #Lcluster start (even though we don't have one needed for compat)
								limit = {
									root.owner.capital_scope.solar_system = {
										has_star_flag = lcluster
									}
								}
								set_star_flag = lcluster #Needs to be made part of the Lcluster flag group so it doesn't get anymore unwanted friends
								random_list = {
									1 = {
										while = {
											count = 1
											random_neighbor_system_euclidean = {
												limit = {has_star_flag = lcluster }
												add_hyperlane_safe = { from = prev to = this } 
											}
										}
									}
									1 = {
										while = {
											count = 2
											random_neighbor_system_euclidean = {
												limit = {has_star_flag = lcluster }
												add_hyperlane_safe = { from = prev to = this } 
											}
										}
									}
								}
							}
							# else random non-core system
							else = {
								random_list = {
									1 = {
										while = {
											count = 1
											giga_generate_hyperlane = yes
										}
									}
									1 = {
										while = {
											count = 2
											giga_generate_hyperlane = yes
										}
									}
								}
							}
							set_star_flag = ehof_blackhole_@root.controller
							root.controller = {
								enable_special_project = {
									name = "EXPLORE_EHOF_PRECURSOR_RUINED"
									location = prev.star
									owner = this
								}
							}
						}
					}
				}
			}
		}
		else_if = {
			limit = {
				NOR = {
					invoke_special_ehof_chain_beginning_spawning = {
						flag = special_ehof_beginning_wormhole_spawn_initializers_forbidden
					}
					solar_system = {
						has_natural_wormhole = yes
					}
				}
			}
			random_rim_system = {
				random_list = {
					75 = {
						spawn_system = {
							initializer = "special_init_01"
							min_distance = 50
							max_distance = 100
							max_jumps = 0
							hyperlane = no
							is_discovered = no
						}
						last_created_system = {
							isolate_system = yes
							save_event_target_as = ehof_rubble_system
							giga_field_system_debris = yes
							set_star_flag = ehof_blackhole_@root.controller
							root.controller = {
								enable_special_project = {
									name = "EXPLORE_EHOF_PRECURSOR_NO_RUINED"
									location = prev.star
									owner = this
								}
							}
						}
					}
					25 = {
						spawn_system = {
							initializer = "ehof_unique_ruined"
							min_distance = 50
							max_distance = 100
							max_jumps = 0
							hyperlane = no
							is_discovered = no
						}
						last_created_system = {
							isolate_system = yes
							save_event_target_as = ehof_rubble_system
							set_star_flag = ehof_blackhole_@root.controller
							root.controller = {
								enable_special_project = {
									name = "EXPLORE_EHOF_PRECURSOR_RUINED"
									location = prev.star
									owner = this
								}
							}
						}
					}
				}
			}
			solar_system = {
				spawn_natural_wormhole = {
					bypass_type = ehof_wormhole_free
				}
				event_target:ehof_rubble_system = {
					spawn_natural_wormhole = {
						bypass_type = ehof_wormhole_free
					}
					link_wormholes = prev
				}
			}
		}
		else = {
			closest_system = {
				limit = {
					is_star_class = sc_black_hole
					NOT = {
						is_same_value = root.solar_system
					}
				}
				giga_field_system_debris = yes
				set_star_flag = ehof_blackhole_@root.controller
				root.controller = {
					enable_special_project = {
						name = "EXPLORE_EHOF_PRECURSOR_NO_RUINED"
						location = prev.star
						owner = this
					}
				}
			}
		}
	}
	option = {
		default_hide_option = yes
		name = CURIOUS
		small_artifact_reward = yes
	}
}

# Dead End (Hieroglyphics)
country_event = {
	id = ehof_megastructure.0054
	title = "ehof_megastructure.0054_name"
	desc = "ehof_megastructure.0054_desc"
	picture = GFX_evt_black_hole
	show_sound = event_radio_chatter_02
	location = this
	is_triggered_only = yes
	option = {
		name = tutorial.52.a
		small_artifact_reward = yes
		enable_special_project = {
			name = "STUDY_ARCANE_ARTIFACT_1"
			location = root.capital_scope
			owner = root
		}
		add_research_option = tech_abstract_1
		add_tech_progress = {
			tech = tech_abstract_1
			progress = 0.1
		}
		add_monthly_resource_mult = {
			resource = unity
			value = 30
			min = 60
			max = 2500
		}
		add_monthly_resource_mult = {
			resource = physics_research
			value = @tier1researchreward
			min = @tier1researchmin
			max = @tier1researchmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier1researchreward
			min = @tier1researchmin
			max = @tier1researchmax
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier1researchreward
			min = @tier1researchmin
			max = @tier1researchmax
		}
	}
}

# The Facility (Hieroglyphics)
country_event = {
	id = ehof_megastructure.0055
	title = "ehof_megastructure.0055_name"
	desc = "ehof_megastructure.0055_desc"
	picture = GFX_evt_ruined_system
	show_sound = event_radio_chatter
	location = this
	is_triggered_only = yes
	option = {
		name = AMAZING
		medium_artifact_reward = yes
		enable_special_project = {
			name = "STUDY_ARCANE_ARTIFACT_2"
			location = root.capital_scope
			owner = root
		}
		add_research_option = tech_abstract_1
		add_tech_progress = {
			tech = tech_abstract_1
			progress = 0.1
		}
	}
}

# The Facility (Away on an Island)
country_event = {
	id = ehof_megastructure.0056
	title = "ehof_megastructure.0056_name"
	desc = "ehof_megastructure.0056_desc"
	picture = GFX_evt_ruined_system
	show_sound = event_radio_chatter
	location = this
	is_triggered_only = yes
	option = {
		name = AMAZING
		medium_artifact_reward = yes
		enable_special_project = {
			name = "STUDY_ARCANE_ARTIFACT_3"
			location = root.capital_scope
			owner = root
		}
		add_research_option = tech_abstract_1
		add_tech_progress = {
			tech = tech_abstract_1
			progress = 0.1
		}
		hidden_effect = {
			if = {
				limit = {
					is_ai = yes
				}
				random_system = {
					limit = {
						has_star_flag = ehof_system_created_by_@root
						has_megastructure = ehof_megastructure_ruined_origin
					}
					random_system_megastructure = {
						limit = {
							is_megastructure_type = ehof_megastructure_ruined_origin
						}
						upgrade_megastructure_to = ehof_megastructure_restored_origin
					}
				}
			}
		}
		default_hide_option = yes
	}
}

# Mark system as visited (FTL Exploration)
ship_event = {
	id = ehof_megastructure.007
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = controller
		controller = { ehof_default_country = yes }
		exists = from
		from = {
			NOR = {
				has_star_flag = empire_has_visited_anyone
				has_star_flag = empire_has_visited@root.controller
			}
			cohesive_system = no
		}
	}
	immediate = {
		from = {
			set_star_flag = empire_has_visited_anyone
			set_star_flag = empire_has_visited@root.controller
		}
	}
}

# Should it activate? [Monthly Pulse]
country_event = {
	id = ehof_megastructure.009
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		check_variable = {
			which = ehof_phase
			value > 0
		}
		any_system_within_border = {
			has_star_flag = ehof_megastructure_system@root
			any_fleet_in_system = {
				can_use_ehof = yes
				is_mobile = yes
				exists = controller
				controller = {
					is_same_value = root
				}
			}
		}
		NOR = {
			has_country_flag = ehof_can_activate
			has_country_flag = ehof_can_deactivate
			has_country_flag = ehof_activating
			has_country_flag = ehof_activated
			has_country_flag = ehof_on_cooldown
			has_country_flag = ehof_is_upgrading
		}
	}
	immediate = {
		ehof_recount_ships = yes
		set_country_flag = ehof_can_activate
		if = {
			limit = {
				is_ai = no
				is_multiplayer = no
			}
			random_list = {
				1 = {
					play_sound = sfx_ehof_activate_01
				}
				1 = {
					play_sound = sfx_ehof_activate_02
				}
			}
		}
	}
}

# Should it deactivate?
country_event = {
	id = ehof_megastructure.010
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_system_within_border = {
			has_star_flag = ehof_megastructure_system@root
			NOT = {
				any_fleet_in_system = {
					can_use_ehof = yes
					is_mobile = yes
					exists = controller
					controller = {
						is_same_value = root
					}
				}
			}
		}
		has_country_flag = ehof_can_activate
	}
	immediate = {
		remove_country_flag = ehof_can_activate
	}
}

# Is EHOF Active too long?
country_event = {
	# TODO :: remove
	id = ehof_megastructure.011
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOR = {
			has_country_flag = ehof_wormhole_open
			has_country_flag = ehof_permanent
		}
		any_owned_megastructure = {
			OR = {
				has_megastructure_flag = giga_ehof_activating
				has_megastructure_flag = giga_ehof_active
			}
		}
	}
	immediate = {
		country_event = {
			id = ehof_megastructure.307
		}
	}
}

#########################################################################################################
########################################### EHOF Construction ###########################################
#########################################################################################################
country_event = {
	id = ehof_megastructure.101
	title = "ehof_megastructure.101_name"
	picture = GFX_evt_ehof
	show_sound = event_dyson_sphere_build_complete
	location = event_target:ehof_megastructure_system
	is_triggered_only = yes
	desc = {
		trigger = {
			check_variable = {
				which = ehof_phase
				value = 4
			}
		}
		text = "ehof_megastructure.101_desc_4"
	}
	desc = {
		trigger = {
			check_variable = {
				which = ehof_phase
				value = 3
			}
		}
		text = "ehof_megastructure.101_desc_3"
	}
	desc = {
		trigger = {
			NOT = {
				has_country_flag = ehof_restored
			}
			check_variable = {
				which = ehof_phase
				value = 2
			}
		}
		text = "ehof_megastructure.101_desc_2"
	}
	desc = {
		trigger = {
			check_variable = {
				which = ehof_phase
				value = 1
			}
		}
		text = "ehof_megastructure.101_desc_1"
	}
	desc = {
		trigger = {
			check_variable = {
				which = ehof_phase
				value = 0
			}
		}
		text = "ehof_megastructure.101_desc_0"
	}
	desc = {
		trigger = {
			has_country_flag = ehof_restored
			check_variable = {
				which = ehof_phase
				value = 2
			}
		}
		text = "ehof_megastructure.101_desc_restored"
	}
	trigger = {
		OR = {
			AND = {
				has_megastructure = ehof_megastructure_phase2
				has_country_flag = ehof_restored
				NOT = {
					has_country_flag = ehof_restored_first_time
				}
			}
			AND = {
				has_megastructure = ehof_megastructure_phase0
				NOT = {
					has_country_flag = ehof_p0_first_time
				}
			}
			AND = {
				has_megastructure = ehof_megastructure_phase4
				NOT = {
					has_country_flag = ehof_p4_first_time
				}
			}
			AND = {
				has_megastructure = ehof_megastructure_phase3
				NOT = {
					has_country_flag = ehof_p3_first_time
				}
			}
			AND = {
				has_megastructure = ehof_megastructure_phase2
				NOT = {
					has_country_flag = ehof_restored
				}
				NOT = {
					has_country_flag = ehof_p2_first_time
				}
			}
			AND = {
				has_megastructure = ehof_megastructure_phase1
				NOT = {
					has_country_flag = ehof_p1_first_time
				}
			}
		}
	}
	immediate = {
		# Restored
		if = {
			limit = {
				has_country_flag = ehof_restored
			}
			set_country_flag = ehof_restored_first_time
			remove_country_flag = ehof_restored
			set_country_flag = ehof_p2_first_time
			set_country_flag = ehof_p1_first_time
			set_country_flag = ehof_p0_first_time
			set_timed_global_flag = {
				flag = ehof_recently_built_phase_2
				days = 2
			}
		}
		# Phase 4
		else_if = {
			limit = {
				has_megastructure = ehof_megastructure_phase4
			}
			set_country_flag = has_built_or_repaired_gigastructure
			set_country_flag = ehof_p4_first_time
			set_timed_global_flag = {
				flag = ehof_recently_built_phase_4
				days = 2
			}
		}
		# Phase 3
		else_if = {
			limit = {
				has_megastructure = ehof_megastructure_phase3
			}
			set_country_flag = has_built_or_repaired_megastructure
			set_country_flag = ehof_p3_first_time
			set_timed_global_flag = {
				flag = ehof_recently_built_phase_3
				days = 2
			}
		}
		# Phase 2
		else_if = {
			limit = {
				has_megastructure = ehof_megastructure_phase2
			}
			set_country_flag = ehof_p2_first_time
			set_timed_global_flag = {
				flag = ehof_recently_built_phase_2
				days = 2
			}
		}
		# Phase 1
		else_if = {
			limit = {
				has_megastructure = ehof_megastructure_phase1
			}
			set_country_flag = ehof_p1_first_time
			set_timed_global_flag = {
				flag = ehof_recently_built_phase_1
				days = 2
			}
		}
		# Phase 0
		else_if = {
			limit = {
				has_megastructure = ehof_megastructure_phase0
			}
			set_country_flag = ehof_p0_first_time
			set_timed_global_flag = {
				flag = ehof_recently_built_phase_0
				days = 2
			}
			set_variable = {
				which = ehof_pre_flight_science
				value = 0
			}
			set_variable = {
				which = ehof_pre_flight_constructor
				value = 0
			}
			set_variable = {
				which = ehof_pre_flight_military
				value = 0
			}
			set_variable = {
				which = ehof_pre_flight_colossus
				value = 0
			}
			set_variable = {
				which = ehof_pre_flight_juggernaut
				value = 0
			}
		}
		# Set globals for localization
		if = {
			limit = {
				exists = event_target:ehof_recently_built_system
			}
			clear_global_event_target = ehof_recently_built_system
		}
		random_system_within_border = {
			limit = {
				has_star_flag = ehof_megastructure_system@root
			}
			save_global_event_target_as = ehof_recently_built_system
		}
		country_event = {
			id = ehof_megastructure.009
			days = 2
		}		# Check EHOF state
	}
	option = {
		name = GOOD
	}
}

########################################################################################################
########################################## EHOF Life Cycle #############################################
########################################################################################################
# Firing State
country_event = {
	id = ehof_megastructure.500
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = fire_state
		remove_country_flag = ehof_report_quest
		remove_country_flag = ehof_report_standard
		remove_country_flag = ehof_report_cohesive
		remove_country_flag = ehof_report_bountiful
		remove_country_flag = ehof_travel_diplomacy
		# reset all state flags
		remove_state_flags = yes
		# set new state
		set_country_flag = ehof_activating
		random_owned_megastructure = {
			limit = {
				giga_is_any_ehof_non_flag = yes
				NOR = {
					has_megastructure_flag = ehof_phase_04_decommissioned
					has_megastructure_flag = ehof_phase_03_decommissioned
					has_megastructure_flag = ehof_phase_02_decommissioned
					has_megastructure_flag = ehof_phase_01_decommissioned
				}
			}
			solar_system = {
				giga_ehof_set_activating = yes
			}
		}
		# save megastructure system
		ehof_mega_system = yes
		if = {
			# if user selected system to open wormhole
			limit = {
				not = {
					has_country_flag = ehof_wormhole_to_cohesive
				}
			}
			country_event = {
				id = ehof_megastructure.501
				days = 5
			}
		}
		else = {
			# set flag to generate system on monthly pulse
			set_country_flag = should_spawn_covesive_@root
			# removes flag from travel event that defined the next system as cohecive
			remove_country_flag = ehof_wormhole_to_cohesive
			# remove flag from travel event that allowed player to open travel event .003
			remove_country_flag = giga_ehof_target_cohesive
			# lock fleet
			event_target:ehof_megastructure_system = {
				every_fleet_in_system = {
					limit = {
						has_fleet_flag = ehof_ready_for_travel@root
					}
					set_event_locked = yes
				}
			}
		}
	}
}

# Activate State
country_event = {
	id = ehof_megastructure.501
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = active
		# reset all state flags
		remove_state_flags = yes
		# set new state
		set_country_flag = ehof_activated
		random_owned_megastructure = {
			limit = {
				has_megastructure_flag = giga_ehof_activating
			}
			solar_system = {
				giga_ehof_set_active = yes
			}
		}
		# open wormhole
		event_target:ehof_destination_system = {
			spawn_megastructure = {
				type = "ehof_megastructure_wormhole_destination"
				orbit_angle = @ehof_wormhole_angle
				orbit_distance = @ehof_wormhole_distance
				owner = root
				init_effect = {
					set_megastructure_flag = ehof_wormhole_nexus
					set_megastructure_flag = ehof_wormhole_opened_by_@root
				}
			}
		}
		# spawn Traders
		if = {
			limit = {
				NOR = {
					has_global_flag = ehof_traders_spawned
					has_global_flag = compound_invasion_ongoing
					check_variable = {
						which = ehof_phase
						value < 3
					}
				}
			}
			random_list = {
				4 = {
					change_variable = {
						which = ehof_spawn_traders
						value = 1
					}
				}
				1 = {
					modifier = {
						factor = 3
						check_variable = {
							which = ehof_spawn_traders
							value >= 4
						}
					}
					modifier = {
						factor = 4
						check_variable = {
							which = ehof_spawn_traders
							value >= 8
						}
					}
					modifier = {
						factor = 5
						check_variable = {
							which = ehof_spawn_traders
							value >= 12
						}
					}
					country_event = {
						id = ehof_mega_trader.100
					}
				}
			}
		}
		#send fleets to target system
		country_event = {
			id = ehof_megastructure.305
			days = 4
		}
		if = {
			limit = {
				has_country_flag = ehof_permanent
			}
			set_country_flag = ehof_can_deactivate
		}
		else = {
			country_event = {
				id = ehof_megastructure.3072
				days = 30
			}
		}
	}
}

# cooldown state
country_event = {
	id = ehof_megastructure.502
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = cooldown
		# reset all state flags
		remove_state_flags = yes
		set_country_flag = ehof_on_cooldown
		random_owned_megastructure = {
			limit = {
				OR = {
					has_megastructure_flag = giga_ehof_activating
					has_megastructure_flag = giga_ehof_active
				}
			}
			solar_system = {
				giga_ehof_set_idle = yes
			}
		}
		# set back to can activate
		if = {
			limit = {
				check_variable = {
					which = ehof_phase
					value = 1
				}
			}
			country_event = {
				id = ehof_megastructure.201
				days = @ehof_phase1_cooldown_days
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = ehof_phase
					value = 2
				}
			}
			country_event = {
				id = ehof_megastructure.201
				days = @ehof_phase2_cooldown_days
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = ehof_phase
					value = 3
				}
			}
			country_event = {
				id = ehof_megastructure.201
				days = @ehof_phase3_cooldown_days
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = ehof_phase
					value = 4
				}
			}
			country_event = {
				id = ehof_megastructure.201
				days = @ehof_phase4_cooldown_days
			}
		}
		# set cooldown variable for tooltip
		if = {
			limit = {
				check_variable = {
					which = ehof_phase
					value = 1
				}
			}
			set_variable = {
				which = ehof_cooldown_days
				value = @ehof_phase1_cooldown_days
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = ehof_phase
					value = 2
				}
			}
			set_variable = {
				which = ehof_cooldown_days
				value = @ehof_phase2_cooldown_days
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = ehof_phase
					value = 3
				}
			}
			set_variable = {
				which = ehof_cooldown_days
				value = @ehof_phase3_cooldown_days
			}
		}
		else_if = {
			limit = {
				check_variable = {
					which = ehof_phase
					value = 4
				}
			}
			set_variable = {
				which = ehof_cooldown_days
				value = @ehof_phase4_cooldown_days
			}
		}
	}
}

########################################################################################################
########################################## EHOF State Changes ##########################################
########################################################################################################
# Set to Idle
country_event = {
	id = ehof_megastructure.201
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_system_within_border = {
			has_star_flag = ehof_megastructure_system@root
		}
	}
	immediate = {
		log = idle
		ehof_recount_ships = yes
		remove_country_flag = ehof_on_cooldown
		random_owned_megastructure = {
			limit = {
				OR = {
					has_megastructure_flag = giga_ehof_activating
					has_megastructure_flag = giga_ehof_active
				}
			}
			solar_system = {
				giga_ehof_set_idle = yes
			}
		}
		country_event = {
			id = ehof_megastructure.009
			days = 2
		}		# Check EHOF state
	}
}

########################################################################################################
######################################### Send Fleets Through ##########################################
########################################################################################################
country_event = {
	id = ehof_megastructure.305
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = send_fleets_through_wormhole
		# count fleets to sent through wormhole
		set_variable = {
			which = ehof_travel_fleet_count
			value = 0
		}
		# save megastructure system
		ehof_mega_system = yes
		event_target:ehof_megastructure_system = {
			#limit = { has_an_active_ehof = yes } # limit makes no sense here, probably used to be an "any" type clause
			every_fleet_in_system = {
				limit = {
					has_fleet_flag = ehof_ready_for_travel@root
				}
				# add one to fleetcount to delay wormhole closing in close wormhole
				controller = {
					change_variable = {
						which = ehof_travel_fleet_count
						value = 1
					}
				}
				every_owned_ship = {
					limit = {
						has_ship_flag = ehof_already_counted
					}
					remove_ship_flag = ehof_already_counted
					if = {
						limit = {
							ehof_is_science_ship = yes
						}
						controller = {
							subtract_variable = {
								which = ehof_pre_flight_science
								value = 1
							}
						}
					}
					if = {
						limit = {
							ehof_is_construction_ship = yes
						}
						controller = {
							subtract_variable = {
								which = ehof_pre_flight_constructor
								value = 1
							}
						}
					}
					if = {
						limit = {
							is_ship_class = shipclass_military
						}
						controller = {
							subtract_variable = {
								which = ehof_pre_flight_military
								value = 1
							}
						}
					}
					if = {
						limit = {
							is_ship_class = shipclass_transport
						}
						controller = {
							subtract_variable = {
								which = ehof_pre_flight_military
								value = 1
							}
						}
					}
					if = {
						limit = {
							is_ship_class = shipclass_military_special
						}
						controller = {
							subtract_variable = {
								which = ehof_pre_flight_colossus
								value = 1
							}
						}
					}
					if = {
						limit = {
							is_ship_size = juggernaut
						}
						controller = {
							subtract_variable = {
								which = ehof_pre_flight_juggernaut
								value = 1
							}
						}
					}
				}
				set_fleet_stance = passive
				remove_auto_move_target = yes
				set_event_locked = no
				auto_move_to_planet = {
					target = event_target:ehof_destination_system.star
					clear_auto_move_on_arrival = yes
				}
			}
			every_ship_in_system = {
				limit = {
					has_ship_flag = ehof_eager_tp@root
				}
				remove_ship_flag = ehof_eager_tp@root
				fleet = {
					remove_auto_move_target = yes
					set_fleet_stance = passive
					set_location = event_target:ehof_destination_system.star # a little bit stupid but since subspace drives can't use bypasses hacky workarounds are needed
					remove_fleet_flag =  eager_ehof@root
				}
			}
		}
	}
}

country_event = {
	id = ehof_megastructure.3051
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		random_system_within_border = {
			limit = {
				giga_has_an_active_ehof = yes
			}
			every_fleet_in_system = {
				limit = {
					has_fleet_flag = ehof_ready_for_travel@root
				}
				set_event_locked = no
			}
		}
	}
}

#########################################################################################################
##################################### Check if travel was successful ####################################
#########################################################################################################
fleet_event = {
	id = ehof_megastructure.308
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_fleet_flag = ehof_ready_for_travel@root.controller
		exists = controller
		controller = {
			is_ai = no
		}
	}
	immediate = {
		remove_fleet_flag = ehof_ready_for_travel@root.controller
		# count fleets that have passed through wormhole
		controller = {
			subtract_variable = {
				which = ehof_travel_fleet_count
				value = 1
			}
		}
		if = {
			limit = {
				exists = from
			}
			controller = {
				log = "Travel report pass to ui"
				if = {
					limit = {
						not = {
							has_country_flag = ehof_already_shown_success
						}
					}
					log = "Travel report triggered for [from.GetName]"
					country_event = {
						id = ehof_megastructure.309
						days = 2
					}					# Travel report
					set_timed_country_flag = {
						flag = ehof_already_shown_success
						days = @ehof_short_cooldown
					}					# Stop double reporting.
				}
				if = {
					# if country has level 4 ehof and permanent wormhole don't close it
					limit = {
						check_variable = {
							which = ehof_phase
							value = 4
						}
						root.controller = {
							has_country_flag = ehof_permanent
						}
					}
					# set ui deactivate button
					set_country_flag = ehof_can_deactivate
				}
				# else if all fleets have passed through -> close wormhole
				else_if = {
					limit = {
						check_variable = {
							which = ehof_travel_fleet_count
							value = 0
						}
					}
					country_event = {
						id = ehof_megastructure.307
						days = 2
					}
				}
			}
		}
	}
}

########################################################################################################
######################################### Close the Wormholes ##########################################
########################################################################################################
country_event = {
	id = ehof_megastructure.307
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		#remove wormholes
		log = remove_wormholes
		every_megastructure = {
			limit = {
				OR = {
					has_megastructure_flag = ehof_wormhole_node
					has_megastructure_flag = ehof_wormhole_nexus
				}
				has_megastructure_flag = ehof_wormhole_opened_by_@root
			}
			remove_megastructure = this
		}
		# unlock all ships and remove autoMoveTarget
		every_owned_fleet = {
			limit = {
				has_fleet_flag = ehof_ready_for_travel@root
			}
			remove_fleet_flag = ehof_ready_for_travel@root
			set_event_locked = no
			remove_auto_move_target = yes
		}
		# set to cooldown
		country_event = {
			id = ehof_megastructure.502
		}
	}
}

# close non permanent wormhole after max 2 Month
country_event = {
	id = ehof_megastructure.3072
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		not = {
			has_country_flag = ehof_permanent
		}
	}
	immediate = {
		log = check_to_close_wormhole
		if = {
			# if wormhole is still open set temp flag and check again in a month
			limit = {
				event_target:ehof_destination_system = {
					any_system_megastructure = {
						has_megastructure_flag = ehof_wormhole_nexus
						has_megastructure_flag = ehof_wormhole_opened_by_@root
					}
				}
				not = {
					has_country_flag = wormhole_should_close@root
				}
			}
			set_country_flag = wormhole_should_close@root
			country_event = {
				id = ehof_megastructure.3072
				days = 30
			}
		}
		else_if = {
			# if wormhole is there and flag was set close wormhole manually
			limit = {
				event_target:ehof_destination_system = {
					any_system_megastructure = {
						has_megastructure_flag = ehof_wormhole_nexus
						has_megastructure_flag = ehof_wormhole_opened_by_@root
					}
				}
				has_country_flag = wormhole_should_close@root
			}
			remove_country_flag = wormhole_should_close@root
			log = close_event_1
			country_event = {
				id = ehof_megastructure.307
			}
		}
		else_if = {
			# if wormhole is gone but ehof still active
			limit = {
				has_country_flag = ehof_activated
			}
			remove_country_flag = wormhole_should_close@root
			log = close_event_2
			country_event = {
				id = ehof_megastructure.307
			}
		}
		else = {
			# if wormhole was closed remove flag
			remove_country_flag = wormhole_should_close@root
		}
	}
}

country_event = {
	id = ehof_megastructure.3071
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				or = {
					has_megastructure = ehof_megastructure_wormhole_destination
					any_megastructure = {
						has_megastructure_flag = ehof_wormhole_opened_by_@root
					}
				}
				or = {
					has_megastructure = ehof_megastructure_phase1
					has_megastructure = ehof_megastructure_phase2
					has_megastructure = ehof_megastructure_phase3
					has_megastructure = ehof_megastructure_phase4
				}
			}
			log = remove_wormholes_and_resetting_ehof_to_cooldown
			remove_country_flag = ehof_can_activate
			remove_country_flag = ehof_can_deactivate
			remove_country_flag = ehof_activating
			remove_country_flag = ehof_activated
			remove_country_flag = ehof_on_cooldown
			remove_country_flag = ehof_is_upgrading
			country_event = {
				id = ehof_megastructure.307
			}
		}
	}
}

########################################################################################################
############################################ Travel Report #############################################
########################################################################################################
country_event = {
	id = ehof_megastructure.309
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = "Travel report fired"
		ehof_mega_system = yes
		ehof_dest_system = yes
		# Save system details for situation log
		event_target:ehof_destination_system = {
			if = {
				limit = {
					cohesive_system = yes
					empire_has_visited = no
				}
				# Create Point of Interest
				root = {
					if = {
						limit = {
							NOT = {
								has_event_chain = ehof_system_list
							}
						}
						begin_event_chain = {
							event_chain = ehof_system_list
							target = root
						}
					}
					if = {
						limit = {
							not = {
								is_variable_set = ehof_system_number_counter
							}
						}
						set_variable = {
							which = ehof_system_number_counter
							value = 1
						}
					}
					create_ehof_dest_poi = {
						counter = ehof_system_number_counter
					}
				}
			}
			# Count planetary bodies/deposits
			every_system_planet = {
				if = {
					limit = {
						is_moon = yes
					}
					prev = {
						change_variable = {
							which = ehof_sys_moons
							value = 1
						}
					}
				}
				if = {
					limit = {
						is_star = yes
					}
					prev = {
						change_variable = {
							which = ehof_sys_stars
							value = 1
						}
					}
				}
				if = {
					limit = {
						is_asteroid = yes
					}
					prev = {
						change_variable = {
							which = ehof_sys_asteroids
							value = 1
						}
					}
				}
				if = {
					limit = {
						is_planet_habitable = yes
					}
					if = {
						limit = {
							root = {
								OR = {
									is_machine_empire = yes
									any_owned_pop = {
										is_organic_species = yes
										prevprev = {
											habitability = {
												who = prev
												value >= 0.7
											}
										}
									}
								}
							}
						}
						prev = {
							change_variable = {
								which = ehof_sys_green_habitable
								value = 1
							}
						}
					}
					else_if = {
						limit = {
							root = {
								any_owned_pop = {
									is_organic_species = yes
									prevprev = {
										habitability = {
											who = prev
											value >= 0.4
										}
										habitability = {
											who = prev
											value < 0.7
										}
									}
								}
							}
						}
						prev = {
							change_variable = {
								which = ehof_sys_yellow_habitable
								value = 1
							}
						}
					}
					else = {
						prev = {
							change_variable = {
								which = ehof_sys_red_habitable
								value = 1
							}
						}
					}
				}
				if = {
					limit = {
						is_moon = no
						is_asteroid = no
						is_star = no
						is_planet_habitable = no
					}
					prev = {
						change_variable = {
							which = ehof_sys_planets
							value = 1
						}
					}
				}
				every_deposit = {
					switch = {
						trigger = is_deposit_type
						d_minerals_1 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 1
								}
							}
						}
						d_minerals_2 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 2
								}
							}
						}
						d_minerals_3 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 3
								}
							}
						}
						d_minerals_4 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 4
								}
							}
						}
						d_minerals_5 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 5
								}
							}
						}
						d_minerals_6 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 6
								}
							}
						}
						d_minerals_7 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 7
								}
							}
						}
						d_minerals_8 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 8
								}
							}
						}
						d_minerals_9 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 9
								}
							}
						}
						d_minerals_10 = {
							prev = {
								change_variable = {
									which = ehof_minerals
									value = 10
								}
							}
						}
						d_energy_1 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 1
								}
							}
						}
						d_energy_2 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 2
								}
							}
						}
						d_energy_3 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 3
								}
							}
						}
						d_energy_4 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 4
								}
							}
						}
						d_energy_5 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 5
								}
							}
						}
						d_energy_6 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 6
								}
							}
						}
						d_energy_7 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 7
								}
							}
						}
						d_energy_8 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 8
								}
							}
						}
						d_energy_9 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 9
								}
							}
						}
						d_energy_10 = {
							prev = {
								change_variable = {
									which = ehof_energy
									value = 10
								}
							}
						}
						d_physics_1 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 1
								}
							}
						}
						d_physics_2 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 2
								}
							}
						}
						d_physics_3 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 3
								}
							}
						}
						d_physics_4 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 4
								}
							}
						}
						d_physics_5 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 5
								}
							}
						}
						d_physics_6 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 6
								}
							}
						}
						d_physics_7 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 7
								}
							}
						}
						d_physics_8 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 8
								}
							}
						}
						d_physics_9 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 9
								}
							}
						}
						d_physics_10 = {
							prev = {
								change_variable = {
									which = ehof_physics
									value = 10
								}
							}
						}
						d_society_1 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 1
								}
							}
						}
						d_society_2 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 2
								}
							}
						}
						d_society_3 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 3
								}
							}
						}
						d_society_4 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 4
								}
							}
						}
						d_society_5 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 5
								}
							}
						}
						d_society_6 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 6
								}
							}
						}
						d_society_7 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 7
								}
							}
						}
						d_society_8 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 8
								}
							}
						}
						d_society_9 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 9
								}
							}
						}
						d_society_10 = {
							prev = {
								change_variable = {
									which = ehof_society
									value = 10
								}
							}
						}
						d_engineering_1 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 1
								}
							}
						}
						d_engineering_2 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 2
								}
							}
						}
						d_engineering_3 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 3
								}
							}
						}
						d_engineering_4 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 4
								}
							}
						}
						d_engineering_5 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 5
								}
							}
						}
						d_engineering_6 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 6
								}
							}
						}
						d_engineering_7 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 7
								}
							}
						}
						d_engineering_8 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 8
								}
							}
						}
						d_engineering_9 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 9
								}
							}
						}
						d_engineering_10 = {
							prev = {
								change_variable = {
									which = ehof_engineering
									value = 10
								}
							}
						}
						d_alloys_1 = {
							prev = {
								change_variable = {
									which = ehof_alloys
									value = 1
								}
							}
						}
						d_alloys_2 = {
							prev = {
								change_variable = {
									which = ehof_alloys
									value = 2
								}
							}
						}
						d_alloys_3 = {
							prev = {
								change_variable = {
									which = ehof_alloys
									value = 3
								}
							}
						}
						d_alloys_4 = {
							prev = {
								change_variable = {
									which = ehof_alloys
									value = 4
								}
							}
						}
						d_alloys_5 = {
							prev = {
								change_variable = {
									which = ehof_alloys
									value = 5
								}
							}
						}
						d_exotic_gases_1 = {
							prev = {
								change_variable = {
									which = ehof_exotic_gases
									value = 1
								}
							}
						}
						d_exotic_gases_2 = {
							prev = {
								change_variable = {
									which = ehof_exotic_gases
									value = 2
								}
							}
						}
						d_exotic_gases_3 = {
							prev = {
								change_variable = {
									which = ehof_exotic_gases
									value = 3
								}
							}
						}
						d_exotic_gases_4 = {
							prev = {
								change_variable = {
									which = ehof_exotic_gases
									value = 4
								}
							}
						}
						d_exotic_gases_5 = {
							prev = {
								change_variable = {
									which = ehof_exotic_gases
									value = 5
								}
							}
						}
						d_volatile_motes_1 = {
							prev = {
								change_variable = {
									which = ehof_volatile_motes
									value = 1
								}
							}
						}
						d_volatile_motes_2 = {
							prev = {
								change_variable = {
									which = ehof_volatile_motes
									value = 2
								}
							}
						}
						d_volatile_motes_3 = {
							prev = {
								change_variable = {
									which = ehof_volatile_motes
									value = 3
								}
							}
						}
						d_volatile_motes_4 = {
							prev = {
								change_variable = {
									which = ehof_volatile_motes
									value = 4
								}
							}
						}
						d_volatile_motes_5 = {
							prev = {
								change_variable = {
									which = ehof_volatile_motes
									value = 5
								}
							}
						}
						d_rare_crystals_1 = {
							prev = {
								change_variable = {
									which = ehof_rare_crystals
									value = 1
								}
							}
						}
						d_rare_crystals_2 = {
							prev = {
								change_variable = {
									which = ehof_rare_crystals
									value = 2
								}
							}
						}
						d_rare_crystals_3 = {
							prev = {
								change_variable = {
									which = ehof_rare_crystals
									value = 3
								}
							}
						}
						d_rare_crystals_4 = {
							prev = {
								change_variable = {
									which = ehof_rare_crystals
									value = 4
								}
							}
						}
						d_rare_crystals_5 = {
							prev = {
								change_variable = {
									which = ehof_rare_crystals
									value = 5
								}
							}
						}
						d_dark_matter_deposit_1 = {
							prev = {
								change_variable = {
									which = ehof_dark_matter
									value = 1
								}
							}
						}
						d_dark_matter_deposit_2 = {
							prev = {
								change_variable = {
									which = ehof_dark_matter
									value = 2
								}
							}
						}
						d_dark_matter_deposit_3 = {
							prev = {
								change_variable = {
									which = ehof_dark_matter
									value = 3
								}
							}
						}
						d_dark_matter_deposit_4 = {
							prev = {
								change_variable = {
									which = ehof_dark_matter
									value = 4
								}
							}
						}
						d_dark_matter_deposit_5 = {
							prev = {
								change_variable = {
									which = ehof_dark_matter
									value = 5
								}
							}
						}
						d_negative_mass_deposit = {
							prev = {
								change_variable = {
									which = ehof_negative_mass
									value = 5
								}
							}
						}
						d_zro_deposit_1 = {
							prev = {
								change_variable = {
									which = ehof_zro
									value = 1
								}
							}
						}
						d_zro_deposit_2 = {
							prev = {
								change_variable = {
									which = ehof_zro
									value = 2
								}
							}
						}
						d_zro_deposit_3 = {
							prev = {
								change_variable = {
									which = ehof_zro
									value = 3
								}
							}
						}
						d_zro_deposit_4 = {
							prev = {
								change_variable = {
									which = ehof_zro
									value = 4
								}
							}
						}
						d_zro_deposit_5 = {
							prev = {
								change_variable = {
									which = ehof_zro
									value = 5
								}
							}
						}
						d_living_metal_deposit_1 = {
							prev = {
								change_variable = {
									which = ehof_living_metal
									value = 1
								}
							}
						}
						d_living_metal_deposit_2 = {
							prev = {
								change_variable = {
									which = ehof_living_metal
									value = 2
								}
							}
						}
					}
				}
				# if = { limit = { has_deposit = d_minerals_1 }				prev = { change_variable = { which = ehof_minerals value = 1 } } }
				# if = { limit = { has_deposit = d_minerals_2 }				prev = { change_variable = { which = ehof_minerals value = 2 } } }
				# if = { limit = { has_deposit = d_minerals_3 }				prev = { change_variable = { which = ehof_minerals value = 3 } } }
				# if = { limit = { has_deposit = d_minerals_4 }				prev = { change_variable = { which = ehof_minerals value = 4 } } }
				# if = { limit = { has_deposit = d_minerals_5 }				prev = { change_variable = { which = ehof_minerals value = 5 } } }
				# if = { limit = { has_deposit = d_minerals_6 }				prev = { change_variable = { which = ehof_minerals value = 6 } } }
				# if = { limit = { has_deposit = d_minerals_7 }				prev = { change_variable = { which = ehof_minerals value = 7 } } }
				# if = { limit = { has_deposit = d_minerals_8 }				prev = { change_variable = { which = ehof_minerals value = 8 } } }
				# if = { limit = { has_deposit = d_minerals_9 }				prev = { change_variable = { which = ehof_minerals value = 9 } } }
				# if = { limit = { has_deposit = d_minerals_10 }				prev = { change_variable = { which = ehof_minerals value = 10 } } }
				# if = { limit = { has_deposit = d_energy_1 }					prev = { change_variable = { which = ehof_energy value = 1 } } }
				# if = { limit = { has_deposit = d_energy_2 }					prev = { change_variable = { which = ehof_energy value = 2 } } }
				# if = { limit = { has_deposit = d_energy_3 }					prev = { change_variable = { which = ehof_energy value = 3 } } }
				# if = { limit = { has_deposit = d_energy_4 }					prev = { change_variable = { which = ehof_energy value = 4 } } }
				# if = { limit = { has_deposit = d_energy_5 }					prev = { change_variable = { which = ehof_energy value = 5 } } }
				# if = { limit = { has_deposit = d_energy_6 }					prev = { change_variable = { which = ehof_energy value = 6 } } }
				# if = { limit = { has_deposit = d_energy_7 }					prev = { change_variable = { which = ehof_energy value = 7 } } }
				# if = { limit = { has_deposit = d_energy_8 }					prev = { change_variable = { which = ehof_energy value = 8 } } }
				# if = { limit = { has_deposit = d_energy_9 }					prev = { change_variable = { which = ehof_energy value = 9 } } }
				# if = { limit = { has_deposit = d_energy_10 }				prev = { change_variable = { which = ehof_energy value = 10 } } }
				# if = { limit = { has_deposit = d_physics_1 }				prev = { change_variable = { which = ehof_physics value = 1 } } }
				# if = { limit = { has_deposit = d_physics_2 }				prev = { change_variable = { which = ehof_physics value = 2 } } }
				# if = { limit = { has_deposit = d_physics_3 }				prev = { change_variable = { which = ehof_physics value = 3 } } }
				# if = { limit = { has_deposit = d_physics_4 }				prev = { change_variable = { which = ehof_physics value = 4 } } }
				# if = { limit = { has_deposit = d_physics_5 }				prev = { change_variable = { which = ehof_physics value = 5 } } }
				# if = { limit = { has_deposit = d_physics_6 }				prev = { change_variable = { which = ehof_physics value = 6 } } }
				# if = { limit = { has_deposit = d_physics_7 }				prev = { change_variable = { which = ehof_physics value = 7 } } }
				# if = { limit = { has_deposit = d_physics_8 }				prev = { change_variable = { which = ehof_physics value = 8 } } }
				# if = { limit = { has_deposit = d_physics_9 }				prev = { change_variable = { which = ehof_physics value = 9 } } }
				# if = { limit = { has_deposit = d_physics_10 }				prev = { change_variable = { which = ehof_physics value = 10 } } }
				# if = { limit = { has_deposit = d_society_1 }				prev = { change_variable = { which = ehof_society value = 1 } } }
				# if = { limit = { has_deposit = d_society_2 }				prev = { change_variable = { which = ehof_society value = 2 } } }
				# if = { limit = { has_deposit = d_society_3 }				prev = { change_variable = { which = ehof_society value = 3 } } }
				# if = { limit = { has_deposit = d_society_4 }				prev = { change_variable = { which = ehof_society value = 4 } } }
				# if = { limit = { has_deposit = d_society_5 }				prev = { change_variable = { which = ehof_society value = 5 } } }
				# if = { limit = { has_deposit = d_society_6 }				prev = { change_variable = { which = ehof_society value = 6 } } }
				# if = { limit = { has_deposit = d_society_7 }				prev = { change_variable = { which = ehof_society value = 7 } } }
				# if = { limit = { has_deposit = d_society_8 }				prev = { change_variable = { which = ehof_society value = 8 } } }
				# if = { limit = { has_deposit = d_society_9 }				prev = { change_variable = { which = ehof_society value = 9 } } }
				# if = { limit = { has_deposit = d_society_10 }				prev = { change_variable = { which = ehof_society value = 10 } } }
				# if = { limit = { has_deposit = d_engineering_1 }			prev = { change_variable = { which = ehof_engineering value = 1 } } }
				# if = { limit = { has_deposit = d_engineering_2 }			prev = { change_variable = { which = ehof_engineering value = 2 } } }
				# if = { limit = { has_deposit = d_engineering_3 }			prev = { change_variable = { which = ehof_engineering value = 3 } } }
				# if = { limit = { has_deposit = d_engineering_4 }			prev = { change_variable = { which = ehof_engineering value = 4 } } }
				# if = { limit = { has_deposit = d_engineering_5 }			prev = { change_variable = { which = ehof_engineering value = 5 } } }
				# if = { limit = { has_deposit = d_engineering_6 }			prev = { change_variable = { which = ehof_engineering value = 6 } } }
				# if = { limit = { has_deposit = d_engineering_7 }			prev = { change_variable = { which = ehof_engineering value = 7 } } }
				# if = { limit = { has_deposit = d_engineering_8 }			prev = { change_variable = { which = ehof_engineering value = 8 } } }
				# if = { limit = { has_deposit = d_engineering_9 }			prev = { change_variable = { which = ehof_engineering value = 9 } } }
				# if = { limit = { has_deposit = d_engineering_10 }			prev = { change_variable = { which = ehof_engineering value = 10 } } }
				# if = { limit = { has_deposit = d_alloys_1 }					prev = { change_variable = { which = ehof_alloys value = 1 } } }
				# if = { limit = { has_deposit = d_alloys_2 }					prev = { change_variable = { which = ehof_alloys value = 2 } } }
				# if = { limit = { has_deposit = d_alloys_3 }					prev = { change_variable = { which = ehof_alloys value = 3 } } }
				# if = { limit = { has_deposit = d_alloys_4 }					prev = { change_variable = { which = ehof_alloys value = 4 } } }
				# if = { limit = { has_deposit = d_alloys_5 }					prev = { change_variable = { which = ehof_alloys value = 5 } } }
				# if = { limit = { has_deposit = d_exotic_gases_1 }			prev = { change_variable = { which = ehof_exotic_gases value = 1 } } }
				# if = { limit = { has_deposit = d_exotic_gases_2 }			prev = { change_variable = { which = ehof_exotic_gases value = 2 } } }
				# if = { limit = { has_deposit = d_exotic_gases_3 }			prev = { change_variable = { which = ehof_exotic_gases value = 3 } } }
				# if = { limit = { has_deposit = d_exotic_gases_4 }			prev = { change_variable = { which = ehof_exotic_gases value = 4 } } }
				# if = { limit = { has_deposit = d_exotic_gases_5 }			prev = { change_variable = { which = ehof_exotic_gases value = 5 } } }
				# if = { limit = { has_deposit = d_volatile_motes_1 }			prev = { change_variable = { which = ehof_volatile_motes value = 1 } } }
				# if = { limit = { has_deposit = d_volatile_motes_2 }			prev = { change_variable = { which = ehof_volatile_motes value = 2 } } }
				# if = { limit = { has_deposit = d_volatile_motes_3 }			prev = { change_variable = { which = ehof_volatile_motes value = 3 } } }
				# if = { limit = { has_deposit = d_volatile_motes_4 }			prev = { change_variable = { which = ehof_volatile_motes value = 4 } } }
				# if = { limit = { has_deposit = d_volatile_motes_5 }			prev = { change_variable = { which = ehof_volatile_motes value = 5 } } }
				# if = { limit = { has_deposit = d_rare_crystals_1 }			prev = { change_variable = { which = ehof_rare_crystals value = 1 } } }
				# if = { limit = { has_deposit = d_rare_crystals_2 }			prev = { change_variable = { which = ehof_rare_crystals value = 2 } } }
				# if = { limit = { has_deposit = d_rare_crystals_3 }			prev = { change_variable = { which = ehof_rare_crystals value = 3 } } }
				# if = { limit = { has_deposit = d_rare_crystals_4 }			prev = { change_variable = { which = ehof_rare_crystals value = 4 } } }
				# if = { limit = { has_deposit = d_rare_crystals_5 }			prev = { change_variable = { which = ehof_rare_crystals value = 5 } } }
				# if = { limit = { has_deposit = d_dark_matter_deposit_1 }	prev = { change_variable = { which = ehof_dark_matter value = 1 } } }
				# if = { limit = { has_deposit = d_dark_matter_deposit_2 }	prev = { change_variable = { which = ehof_dark_matter value = 2 } } }
				# if = { limit = { has_deposit = d_dark_matter_deposit_3 }	prev = { change_variable = { which = ehof_dark_matter value = 3 } } }
				# if = { limit = { has_deposit = d_dark_matter_deposit_4 }	prev = { change_variable = { which = ehof_dark_matter value = 4 } } }
				# if = { limit = { has_deposit = d_dark_matter_deposit_5 }	prev = { change_variable = { which = ehof_dark_matter value = 5 } } }
				# #if = { limit = { has_deposit = d_negative_mass_deposit_1 }	prev = { change_variable = { which = ehof_negative_mass value = 1 } } }
				# #if = { limit = { has_deposit = d_negative_mass_deposit_2 }	prev = { change_variable = { which = ehof_negative_mass value = 2 } } }
				# #if = { limit = { has_deposit = d_negative_mass_deposit_3 }	prev = { change_variable = { which = ehof_negative_mass value = 3 } } }
				# #if = { limit = { has_deposit = d_negative_mass_deposit_4 }	prev = { change_variable = { which = ehof_negative_mass value = 4 } } }
				# #if = { limit = { has_deposit = d_negative_mass_deposit_5 }	prev = { change_variable = { which = ehof_negative_mass value = 5 } } }
				# if = { limit = { has_deposit = d_negative_mass_deposit }	prev = { change_variable = { which = ehof_negative_mass value = 5 } } }
				# if = { limit = { has_deposit = d_zro_deposit_1 }			prev = { change_variable = { which = ehof_zro value = 1 } } }
				# if = { limit = { has_deposit = d_zro_deposit_2 }			prev = { change_variable = { which = ehof_zro value = 2 } } }
				# if = { limit = { has_deposit = d_zro_deposit_3 }			prev = { change_variable = { which = ehof_zro value = 3 } } }
				# if = { limit = { has_deposit = d_zro_deposit_4 }			prev = { change_variable = { which = ehof_zro value = 4 } } }
				# if = { limit = { has_deposit = d_zro_deposit_5 }			prev = { change_variable = { which = ehof_zro value = 5 } } }
				# if = { limit = { has_deposit = d_living_metal_deposit }		prev = { change_variable = { which = ehof_living_metal value = 1 } } }
				# if = { limit = { has_deposit = d_living_metal_deposit_2 }	prev = { change_variable = { which = ehof_living_metal value = 2 } } }
			}
			# Count Megastructures
			every_system_megastructure = {
				limit = {
					NOR = {
						is_megastructure_type = ehof_pgate_unknown
						is_megastructure_type = ehof_pgate_gateway
					}
				}
				prev = {
					change_variable = {
						which = ehof_sys_megastructures
						value = 1
					}
				}
			}
			# Notify outcome
			if = {
				limit = {
					OR = {
						everchanging_system = yes
						annihilator_system = yes
						urmazin_system = yes
						quest_system = yes
					}
				}
				root = {
					set_country_flag = ehof_report_quest
				}
			}
			else_if = {
				limit = {
					cohesive_system = no
				}
				root = {
					set_country_flag = ehof_report_standard
				}
			}
			else_if = {
				limit = {
					cohesive_system = yes
					rare_system = no
				}
				root = {
					set_country_flag = ehof_report_cohesive
				}
			}
			else_if = {
				limit = {
					cohesive_system = yes
					rare_system = yes
				}
				root = {
					set_country_flag = ehof_report_bountiful
				}
			}
			# Visited via ehof
			set_star_flag = empire_has_visited_anyone
			set_star_flag = empire_has_visited@root
		}
	}
}

#########################################################################################################
################################################ Dialog #################################################
#########################################################################################################
# Standard
country_event = {
	id = ehof_megastructure.401
	diplomatic = yes
	custom_gui = "giga_standard_window"
	title = "ehof_report_standard_header"
	show_sound = "event_lootbox_galatron"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = "ehof_report_desc"
	immediate = {
		ehof_dest_system = yes
		remove_country_flag = ehof_report_standard
	}
	option = {
		name = OK
		default_hide_option = yes
	}
}

# Cohesive
country_event = {
	id = ehof_megastructure.402
	diplomatic = yes
	custom_gui = "giga_cohesive_window"
	title = "ehof_report_cohesive_header"
	show_sound = "event_lootbox_galatron"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = "ehof_report_desc"
	immediate = {
		ehof_dest_system = yes
		remove_country_flag = ehof_report_cohesive
	}
	option = {
		name = OK
		default_hide_option = yes
	}
}

# Bountiful
country_event = {
	id = ehof_megastructure.403
	diplomatic = yes
	custom_gui = "giga_bountiful_window"
	title = "ehof_report_bountiful_header"
	show_sound = "event_finding_loot"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = "ehof_report_desc"
	immediate = {
		ehof_dest_system = yes
		remove_country_flag = ehof_report_bountiful
	}
	option = {
		name = OK
		default_hide_option = yes
	}
}

# Quest
country_event = {
	id = ehof_megastructure.404
	diplomatic = yes
	custom_gui = "giga_quest_window"
	title = "ehof_report_quest_header"
	show_sound = "event_finding_loot"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = "ehof_report_desc"
	immediate = {
		ehof_dest_system = yes
		remove_country_flag = ehof_report_quest
	}
	option = {
		name = OK
		default_hide_option = yes
	}
}

# SA Standard
country_event = {
	id = ehof_megastructure.4011
	diplomatic = yes
	custom_gui = "giga_sa_standard_window"
	title = "ehof_report_standard_header"
	show_sound = "event_lootbox_galatron"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = "ehof_report_desc"
	immediate = {
		ehof_dest_system = yes
		remove_country_flag = ehof_report_standard
	}
	option = {
		name = OK
		default_hide_option = yes
	}
}

# SA Cohesive
country_event = {
	id = ehof_megastructure.4021
	diplomatic = yes
	custom_gui = "giga_sa_cohesive_window"
	title = "ehof_report_cohesive_header"
	show_sound = "event_lootbox_galatron"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = "ehof_report_desc"
	immediate = {
		ehof_dest_system = yes
		remove_country_flag = ehof_report_cohesive
	}
	option = {
		name = OK
		default_hide_option = yes
	}
}

# SA Bountiful
country_event = {
	id = ehof_megastructure.4031
	diplomatic = yes
	custom_gui = "giga_sa_bountiful_window"
	title = "ehof_report_bountiful_header"
	show_sound = "event_finding_loot"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = "ehof_report_desc"
	immediate = {
		ehof_dest_system = yes
		remove_country_flag = ehof_report_bountiful
	}
	option = {
		name = OK
		default_hide_option = yes
	}
}

# SA Quest
country_event = {
	id = ehof_megastructure.4041
	diplomatic = yes
	custom_gui = "giga_sa_quest_window"
	title = "ehof_report_quest_header"
	show_sound = "event_finding_loot"
	location = event_target:ehof_destination_system
	is_triggered_only = yes
	desc = "ehof_report_desc"
	immediate = {
		ehof_dest_system = yes
		remove_country_flag = ehof_report_quest
	}
	option = {
		name = OK
		default_hide_option = yes
	}
}

# Dismantle Dialog
country_event = {
	id = ehof_megastructure.410
	title = "ehof_ehof"
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "ehof_mainui_window"
	picture_event_data = {
		portrait = root
		graphical_culture = root
		room = "ehof_room"
	}
	location = event_target:ehof_megastructure_system
	desc = "ehof_megastructure.410.desc"
	option = {
		custom_gui = "ehof_mainui_option_big"
		name = "ehof_megastructure.410.a"
		hidden_effect = {
			if = {
				limit = {
					has_country_flag = ehof_travel_diplomacy
				}
				remove_country_flag = ehof_travel_diplomacy
			}
			if = {
				limit = {
					has_country_flag = ehof_can_activate
				}
				remove_country_flag = ehof_can_activate
			}
			if = {
				limit = {
					has_country_flag = ehof_can_deactivate
				}
				remove_country_flag = ehof_can_deactivate
			}
			if = {
				limit = {
					has_country_flag = ehof_activating
				}
				remove_country_flag = ehof_activating
			}
			if = {
				limit = {
					has_country_flag = ehof_activated
				}
				remove_country_flag = ehof_activated
			}
			if = {
				limit = {
					has_country_flag = ehof_is_upgrading
				}
				remove_country_flag = ehof_is_upgrading
			}
			if = {
				limit = {
					has_country_flag = ehof_on_cooldown
				}
				remove_country_flag = ehof_on_cooldown
			}
			if = {
				limit = {
					has_country_flag = ehof_p0_first_time
				}
				remove_country_flag = ehof_p0_first_time
			}
			if = {
				limit = {
					has_country_flag = ehof_p1_first_time
				}
				remove_country_flag = ehof_p1_first_time
			}
			if = {
				limit = {
					has_country_flag = ehof_p2_first_time
				}
				remove_country_flag = ehof_p2_first_time
			}
			if = {
				limit = {
					has_country_flag = ehof_p3_first_time
				}
				remove_country_flag = ehof_p3_first_time
			}
			if = {
				limit = {
					has_country_flag = ehof_p4_first_time
				}
				remove_country_flag = ehof_p4_first_time
			}
			if = {
				limit = {
					has_country_flag = ehof_restored_first_time
				}
				remove_country_flag = ehof_restored_first_time
			}
			random_system_within_border = {
				limit = {
					giga_has_an_active_ehof = yes
				}
				remove_star_flag = ehof_megastructure_system@root
				every_system_megastructure = {
					limit = {
						is_any_ehof = yes
					}
					system_star = {#The planet call here was invalid if a ruined ehof was repaired
						giga_clear_has_mega_flag = {
							MEGA = prev
						}
						remove_planet_flag = cant_target_this_planet
						remove_planet_flag = cant_build_here
					}
					remove_megastructure = this
				}
				giga_ehof_amb_reset = yes
				star = {
					change_pc = pc_black_hole
				}
			}
			set_variable = {
				which = ehof_phase
				value = 0
			}
		}
	}
	option = {
		custom_gui = "ehof_mainui_option_big"
		name = "ehof_goback"
		ehof_go_back = yes
	}
	option = {
		custom_gui = "ehof_mainui_option_big"
		name = "ehof_leavestation"
		ehof_leave_station = yes
		default_hide_option = yes
		hidden_effect = {
			country_event = {
				id = ehof_megastructure.3051
			}
		}
	}
}

#########################################################
### MYSTERIOUS STONE AND PRIMORDIAL PILLAR ENCOUNTERS ###
#########################################################
# Mysterious Stone
fleet_event = {
	id = ehof_megastructure.016
	title = "ehof_megastructure.016.name"
	desc = "ehof_megastructure.016.desc"
	picture = GFX_evt_pgate_unknown
    location = THIS
    is_triggered_only = yes

    immediate = { controller = { set_country_flag = primordial_pillar_encountered } }

    trigger = {
		exists = controller
		controller = { NOT = { has_country_flag = primordial_pillar_encountered } }
		controller = { NOT = { has_origin = origin_incohesive } }
        solar_system = { has_megastructure = ehof_pgate_unknown }
	}

	option = {
		name = ehof_megastructure.016.a
	}
}

# Primordial Pillar
fleet_event = {
	id = ehof_megastructure.017
	title = "ehof_megastructure.017.name"
	desc = "ehof_megastructure.017.desc"
	picture = GFX_evt_pgate_unknown
    location = THIS
    is_triggered_only = yes

    immediate = { controller = { set_country_flag = primordial_pillar_encountered } }

    trigger = {
		exists = controller
		controller = { NOT = { has_country_flag = primordial_pillar_encountered } }
		controller = { NOT = { has_origin = origin_incohesive } }
        solar_system = { has_megastructure = ehof_pgate_gateway }
	}

	option = {
		name = ehof_megastructure.017.a
	}
}
# this = country
country_event = { 					# Is your EHOF cluster in need of some roiling subspace tides?
	id = ehof_megastructure.019 	# Does your EHOF cluster connect to the main galaxy?
	hide_window = yes				# Its time for some hyperlane begone! now only 99.99 EC!
	is_triggered_only = yes			# Converts normal systems that are trapped by the lanes of the EHOF into cohesive systems
									# Cuts off hyperlanes from normal systems that connect to the cohesive cluster and the main galaxy
	trigger = {					
		any_system = {
			has_star_flag = first_ehof_system_of_@root
		}
	}

	immediate = {
		random_system = {
			limit = { has_star_flag = first_ehof_system_of_@root }
			save_event_target_as = ehof_first_system_of_@root
		}
		if = {
			limit = {
				exists = event_target:ehof_first_system_of_@root
				any_system = {
					cohesive_system = yes #only check from the neighbors of cohesive systems
					has_star_flag = ehof_system_created_by_@root
					any_neighbor_system = {
						cohesive_system = no
					}
				}
			}
			set_spawn_system_batch = begin
			while = { # Subspace tides take 5 at a time or somethin'
				count = 5
				random_system = {
					limit = { 
						NOT = { cohesive_system = yes }
						any_neighbor_system = { 
							cohesive_system = yes 
							has_star_flag = ehof_system_created_by_@root
						}
					}
					if = { # ONE OF US! ONE OF US! ONE OF US!
						limit = {
							NOT = { any_neighbor_system = { cohesive_system = no } }
						}
						every_system_planet = {
							set_planet_flag = cant_build_here
							set_planet_flag = cant_target_this_planet
						}
						set_star_flag = cohesive_system
						set_star_flag = ehof_system_created_by_@root
						save_event_target_as = ehof_color_system_name
						set_name = {
							key = "ehof_standard_name"
							variable_string = "[ehof_color_system_name.GetName]"
						}
						every_system_planet = {
							limit = {
								is_primary_star = yes
							}
							save_event_target_as = ehof_color_star_name
							set_name = {
								key = "ehof_standard_star_name"
								variable_string = "[ehof_color_star_name.GetName]"
							}
						}
					}
					else_if = { # Ew gross it has friends... 
						limit = { # Has any other neighbors that aren't cohesive
							any_neighbor_system = { cohesive_system = no }
						}
						every_neighbor_system = {
							limit = {
								cohesive_system = yes
							}
							remove_hyperlane = {
								from = this
								to = prev
							}
							prev = {
								change_variable = {
									which = ehof_hyper_snip
									value = 1
								}
							}
						}
						while = {
							count = ehof_hyper_snip
							giga_generate_hyperlane = yes
						}	
					}
				}
			}
			set_spawn_system_batch = end
		}
	}
}