namespace = giga_elysium_origin

### Game Start
country_event = {
	id = giga_elysium_origin.001
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_elysium
	}

	immediate = {
		# Gives starting technologies
		give_technology = { tech = giga_tech_orbital_elysium message = no }

		# spawn elysium
		capital_scope = {
			solar_system = {
				# create origin platform
				spawn_megastructure = {
					type = orbital_elysium_origin_platform_0
					planet = prev
					owner = root
					graphical_culture = root
				}
				# immediately upgrade it to fire its effects
				random_system_megastructure = {
					limit = {
						is_megastructure_type = orbital_elysium_origin_platform_0
					}
					set_megastructure_flag = origin_elysium
					upgrade_megastructure_to = orbital_elysium_origin_platform_1
					finish_upgrade = yes
				}
			}
			save_event_target_as = giga_elysium_host

			leader = {
				save_event_target_as = giga_elysium_governor
				unassign_leader = this
			}

			# finish the colony and set capital scope
			random_moon = {
				limit = {
					is_planet_class = pc_giga_elysium
				}
				destroy_colony = yes
				giga_get_species_for_colony = {
					TARGET = this
					WHO = root
				}
				create_colony = {
					owner = root
					species = event_target:giga_colony_species
				}
				set_name = {
					key = "GIGA_ELYSIUM_PLANET_NAME"
					variable_string = "[event_target:giga_elysium_host.GetName]"
				}
				add_district = district_giga_elysium_housing
				add_district = district_giga_elysium_control
				if = {
					limit = {
						root = {
							is_low_tech_start = no
						}
					}
					add_district = district_giga_elysium_science
				}
				set_capital = yes
				assign_leader = event_target:giga_elysium_governor
				save_event_target_as = giga_elysium

				# populate the elysium
				create_pop = {
					species = event_target:giga_colony_species
					count = 4
				}

				if = {
					limit = {
						root = {
							is_hive_empire = yes
						}
					}
					add_building = building_spawning_pool
				}
				else_if = {
					limit = {
						root = {
							or = {
								is_individual_machine = yes
								is_machine_empire = yes
							}
						}
					}
					add_building = building_machine_assembly_plant
				}
			}

			# adjust capital
			while = {
				limit = {
					planet_size < 22
				}
				change_planet_size = 1
			}

			set_update_modifiers_batch = begin

			clear_blockers = yes

			create_pop = {
				species = root.species
				count = 1
			}

			if = {
				limit = {
					root = {
						is_anglers_empire = yes
					}
				}
				set_colony_type = col_rural # better job distribution for anglers
			}
			else = {
				if = {
					limit = {
						root = {
							or = {
								is_gestalt = no
								has_civic = civic_machine_obsessional_directive
							}
						}
					}
					set_colony_type = col_industrial
				}
				else = {
					set_colony_type = col_foundry
				}

				# tweak to reduce the sheer volume of industrial jobs
				add_deposit = d_giga_elysium_origin_industry
			}

			if = {
				limit = {
					num_districts = {
						type = district_industrial
						value > 0
					}
				}
				remove_district = district_industrial
				if = {
					limit = {
						root = {
							is_catalytic_empire = yes
						}
					}
					if = {
						limit = {
							root = {
								is_anglers_empire = yes
							}
						}
						add_district = district_farming_uncapped
					}
					else = {
						add_district = district_farming
					}
				}
				else = {
					add_district = district_mining
				}
			}
			if = {
				limit = {
					root = { is_gestalt = no }
				}
				while = {
					limit = {
						has_district = district_generator
					}
					remove_district = district_generator
					add_district = district_mining
				}
			}
			if = {
				limit = {
					num_districts = {
						type = district_mining
						value > 2
					}
					root = {
						is_lithoid_empire = no
					}
				}
				remove_district = district_mining
			}
			if = {
				limit = {
					num_districts = {
						type = district_industrial
						value > 0
					}
					root = {
						is_individual_machine = yes
					}
				}
				remove_district = district_industrial
				add_district = district_generator
			}

			if = {
				limit = {
					root = {
						is_anglers_empire = yes
					}
					num_districts = {
						type = district_industrial
						value > 1
					}
				}
				remove_district = district_industrial
				add_district = district_farming_uncapped
			}

			validate_planet_buildings_and_districts = yes

			# update stability etc
			root = {
				country_event = {
					id = giga_elysium.100
				}
			}

			# temporarily boot some miners
			add_modifier = {
				modifier = giga_elysium_origin_fix
			}

			# make sure unemployed are fixed by demoting
			every_owned_pop = {
				#unemploy_pop = yes
				clear_pop_category = yes
			}

			# hopefully force an update
			set_update_modifiers_batch = end

			# shuffle pops back into jobs
			#while = {
			#	count = trigger:num_pops
			#	check_planet_employment = yes
			#}
			#set_update_modifiers_batch = begin
			#set_update_modifiers_batch = end
			#while = {
			#	count = trigger:num_pops
			#	check_planet_employment = yes
			#}

			while = {
				count = 1000
				limit = {
					num_unemployed > 0
				}
				check_planet_employment = yes
			}
			set_update_modifiers_batch = begin
			set_update_modifiers_batch = end
			while = {
				count = 1000
				limit = {
					num_unemployed > 0
				}
				check_planet_employment = yes
			}

			# clear fix modifier
			remove_modifier = giga_elysium_origin_fix
		}
	}
}

# colonised planet
planet_event = {
	id = giga_elysium_origin.002
	hide_window = yes
	is_triggered_only = yes

	pre_triggers = {
		has_owner = yes
	}

	trigger = {
		owner = {
			has_origin = origin_elysium
		}
		planet_has_no_megastructure = yes
		nor = { 
			has_planet_flag = has_orbital_elysium 
			giga_is_habitat = yes
			is_non_giga_habitat = yes
		}
	}

	immediate = {
		set_planet_flag = has_orbital_elysium
		giga_set_has_mega_flag = yes
		solar_system = {
			# create origin platform
			spawn_megastructure = {
				type = orbital_elysium_origin_platform_0
				planet = root
				owner = root.owner
				graphical_culture = root.owner
			}
			# set it upgrading
			random_system_megastructure = {
				limit = {
					is_megastructure_type = orbital_elysium_origin_platform_0
					planet = {
						is_same_value = root
					}
				}
				set_megastructure_flag = origin_elysium
				upgrade_megastructure_to = orbital_elysium_origin_platform_1
			}
		}
	}
}



# when elysium is completed, remove negative modifier
planet_event = {
	id = giga_elysium_origin.100
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = {
			has_origin = origin_elysium
		}
	}

	immediate = {
		remove_modifier = giga_origin_no_elysium
	}
}

#Tree destroyed (oh no!)
#silently kill tree
# planet_event = {
# 	id = giga_elysium_origin.101
# 	hide_window = yes

# 	is_triggered_only = yes

# 	trigger = {
# 		OR = {
# 			has_deposit = d_tree_of_life_colony
# 			has_deposit = d_tree_of_life_home
# 		}
# 	}

# 	immediate = {
# 		remove_deposit = d_tree_of_life_colony
# 		remove_deposit = d_tree_of_life_home
# 	}
# }

#informatively kill tree
# planet_event = {
# 	id = giga_elysium_origin.102
# 	title = "origin.3003.name"
# 	desc = "origin.3003.desc"
# 	picture = GFX_evt_burning_city
# 	show_sound = event_alien_nature

# 	is_triggered_only = yes

# 	trigger = {
# 		planet_devastation >= 50
# 		OR = {
# 			has_deposit = d_tree_of_life_colony
# 			has_deposit = d_tree_of_life_home
# 		}
# 	}

# 	immediate = {
# 		remove_deposit = d_tree_of_life_colony
# 		remove_deposit = d_tree_of_life_home
# 	}

# 	option = {
# 		name = UNFORTUNATE
# 		tooltip = {
# 			remove_deposit = d_tree_of_life_colony
# 			remove_deposit = d_tree_of_life_home
# 		}
# 		add_modifier = { modifier = no_lifetree }
# 	}
# }

# planet transfer
planet_event = {
	id = giga_elysium_origin.103
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			AND = {
				FROM = { has_origin = origin_elysium }
				nor = { 
					has_planet_flag = megastructure
					giga_is_habitat = yes
					is_non_giga_habitat = yes 
					any_moon = {
						is_planet_class = pc_giga_elysium
					}
					has_modifier = giga_origin_no_elysium
				}
			}
			AND = {
				FROM = { NOT = { has_origin = origin_elysium } }
				has_modifier = giga_origin_no_elysium
			}
		}

	}

	immediate = {
		if = {
			limit = {
				FROM = { has_origin = origin_elysium }
			}
			add_modifier = { modifier = giga_origin_no_elysium }
		}
		if = {
			limit = {
				FROM = { NOT = { has_origin = origin_elysium } }
			}
			remove_modifier = giga_origin_no_elysium
		}
	}
}